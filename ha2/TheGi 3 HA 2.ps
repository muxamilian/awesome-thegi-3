%!PS-Adobe-2.0
%%Creator: dvips(k) 5.992 Copyright 2012 Radical Eye Software
%%Title: TheGi 3 HA 2.dvi
%%CreationDate: Thu Nov  8 09:02:47 2012
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: URWPalladioL-Roma URWPalladioL-Bold PazoMath-Italic
%%+ URWPalladioL-Ital PazoMath CMR10 CMSY10 CMEX10
%%+ PazoMathBlackboardBold stmary10 CMMI10 CMSS10 MSAM10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/texbin/dvips -o "TheGi 3 HA 2.ps"
%+ "TheGi 3 HA 2.dvi"
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2012.11.08:0902
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 647 2012-02-12 15:03:40Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.12, 2012/02/12
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def

    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
%%%%%%%%%%%%%%%%% tools %%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 594 2011-10-31 18:13:18Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 622 2012-01-01 15:36:14Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.02, 2012/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 645 2012-02-12 09:09:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.13, 2011/11/21.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.06, 2011/09/18
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  mtrx setmatrix TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  pop pop pop pop 
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Created the     : Sat 20 March 2004
% Last Mod        : $Date: 2010/10/02 $
% Version         : 0.62 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 328 2010-05-24 15:56:43Z herbert $
% PostScript prologue for pstricks-add.tex.
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: MSAM10
%!PS-AdobeFont-1.0: MSAM10 003.002
%%Title: MSAM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSAM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSAM10 known{/MSAM10 findfont dup/UniqueID known{dup
/UniqueID get 5031981 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSAM10 def
/FontBBox {8 -463 1331 1003 }readonly def
/UniqueID 5031981 def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSAM10.) readonly def
/FullName (MSAM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /satisfies put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE2340939CE40EE9186A0DCC3D3
D661293EC5BB40766B73935EB54125526067D631E1E3D1D6569AB3546CB257C3
4C12CA4AE98C3F99898F1448AC0B416B8E5C3EEF3D74B5FD6A1BE3C23B160E78
79A9E0AC4FC82364F946003C1B2E0EF3CEA944727E7502B65BA1331D36C159E2
1D107580F28A32E04CB876822CEF478BF4464CE4F7AE824FC786E099A1BE2A3C
7D2BFE2A748AB092AEBC2021DBFD5C40E912BC5856F3EF8615147350E75D2BF9
E428D7948E2128053FDB1F90CA9C7D6581E25A6645879F50577FE7F0B32B873F
13F97C524E19F1CFE3883C0DE1DF80FB61111978B0C2D028A99A712D3DC27D8F
C83C4EC335F0DB9912DD2AF009FAA56C5BD5855BA92851629EF6C47E6AC303A6
1A231558746ED8A78C76E476ED71246A2E15C51F465AB21A22ACACB03014B06F
201876D3C6F49E2D38D8C4FE8011F7BB148FC3227E0BFA51C0F9AAD64F0C6095
77B3D875476B666F9FB9A46763C49272FC504CC0E817A1533409D293D6D62CC8
DFDA666BC9DC70C4510BFB0DD2BC94B33D457EACFD754761B696163DB4C547B5
FF8994977A7C9910AF486487CE0320FA1E705BAF4B14FB937229D80F58D01E6E
9D9716EA3EDA84840B5D6BDE216A25814ABC4DE4C6818266C33CD4C3DA4F23BF
DAE6ABDC6D64E7EC7DE918DDB0B05D8413D32D99D15FE112C1D393D21806E0C9
7CE0F0977AA36617B8DD50937C5B0B5698947B0A71A167072FE1B3AD6F274D97
484926DF52CE7D9D2A4928A188E1F867C298E6DB475C0CBE09F0523D8BC6FE24
E1CED78178EE1E9D66A906B72505339E62499C0E4B6B5A2D596C4F8F4312F582
9413DC88D6EDFEAAE0C86BEE44CBDDD79BC02C844B80324B1FE3512E73C213BF
ECD22E7E13F98AB56E4D693B1D6045045E2F01DCC2AA1F70A4699B7D718A743F
D749133029EAD1870DF0B00EDEEDFD33642A88EB10DDF4CBBF8A7D8F7781179F
A91CF398747D52769A054CDACAEDC330FB79ECC96CF43C29515F5895D3A8C1E6
828F776844C88090405F868A872EF54467B72825B001B46F6496817A9B928BEC
ED212D4368368778F2D1B66D005F2D6E3DF4AB9B9791AF2CECCA3AE524781A41
5052FD21CB81D934F0F12CF8C8FFC656BAFBE897C5E86A21D3F42A38F7916693
ADD1DBF48F534DA16099FFCF3E3DBCB254BF49D8F72FAC2F9548477F9AFA414E
65A29F24FA16A9E0955A9A6CCC47198E6332ECD1A791F2E36E6656852179A94C
E3CF4477A9A6CF507B8184ECA5C0304FA15ABD8B0C379EAC19B9D16A630D96DB
A6DA819C2E481AE4870BCAB5963C0F9D837C97E207F7ED58B776799586B9F755
B705AC31C09C3F74AFBCDACF092B05F9E2B072C1B17EE6347523D3D5E1D404AC
636C33DD94121C3711C3D05F48E12DF8489F894E4913263176E81927BF5E3A94
99D124F64D00BCC288F03FD14F89E6352083333EC6C2044E2F81C477DD4CA9A9
55135915C27654B09BC9099FA966AD440417945879399B39C7BF20385456878F
9AAE7343912927476C2C88A445C03E3B77381F3F9A82FEECADCCF8C307144775
144279EB14E0F0443F8200C0FABD54A075EDCB83EAB07A7CAF6EAB17C6CDB239
077DC62173A54E93BE2911F4A45F72B80DD9C41B301B292EFA78D361AD74BD7D
2E94D44A2D79BB7B89708E094A21CCB28D80E0FCA707D742CC02BB81FE4B0E06
4A5E93DF0414BAC27ADDB044A0D444692973994CD028E1C62F1FFA4776554914
2D55B0F81C06A2633A4AE42AD00422A619E339F2E6F0C6FC74F70552974509A0
812F1007FD7055E9ABB8CB39F799F847993DB9593A76C388F9BC883D4A0DE2CD
BFD0F7F2A5F1C50791EB4363104B49088E6EA2C5E61EF256A9FF232357D62D78
0C876D200E4136F7B0570A3B0988F3E23443081591DDB861745B4F6F0FF7D854
8F558F995A283B346E266DB6FFB54E0761046152A864F710113B6BF12967D022
2947517E1CE2079849CF8EB01BB2B96EEC2575AAAD1AA1E019D7E72BCFDF2979
8E2A6EE0C1525389C16411E5DBD416467B9900F07223117A77E0B4C3B0D49A96
C2E3A61AF9C9B1CEB80AC6357FC0CA446FF87BA0CCCD81924F6209198BD6E1A6
9EECEF233B17CC4E9F0654024F7E857EAB409F4B9B9ADE4090F2B715443A80EA
130369A193A32A4DA3730F13E3C9E717CCC9E74611D787277B73EFCE14FCC3B8
6B11AD88F42705F65E9C747B472F379ECDCB7F8F9C3FEA64402972623EA0998F
255892C43CEFD7ED08957C495AAACDA59E9398B43788DF27F7433F72377C8F88
F54F5E3A5564244827EBF92227B94F4FE896FEC6519769AAD567E618DFF61B7D
B93EE0FFA2EA58BE1FDAA0025259789FDB31A1019661C18080567EB5C6306596
F97F039E3C9ABF9E40B4725A96F8170B49B73B68E308786FE99B0C005DE01894
7CC93C196E1F830570D51F0AD29BF27CCE45AD7D3B4332C9D50F1E9C2D04E033
1E197DB9BE1D44566F738CD26A13B8EBC8FD49E999D35F042E8A24F025414F14
D9D11ED702250F1295722F68A022196A0E38B9ADDDBA997283ABAA62898EF32B
C765387E238CA3475ED5C6EF2803CE32B5A90A8287C70386F46B84C332E8C00F
85A8CC2DE78D433A325B7862AD4D93B3EE2CABC4B688833BF263E26879AF213C
934FAFEBE8D804E2BC8433B81ED5DA99F08C2C11B93019D3D9C1C952F20C68A7
E141DEA2CB983DAC5A2B9426A98262FEB13C420EAA315C890F0B907BEA099C1A
10B0AB255AF99694C722166DCDA72FD58CFBA3328FC5EF83A52A750C5E613E74
A8572CB8B78ABDAC27B798E727E3E5AF9451416493FE3F4E95157B4ABDF3A910
64369E34A2B40176A5E0E30F472E33A41B8C7BA4CB1BFB9173783909161370AA
EA40C83C60AAE242358688CE13193C9DDC3544A959A1E6A16FCC4BFAA65A63C7
5AEF208FC201F88DD047B5E6EFBD4BB256F973269BA1B06CCFC186D48BCCB4F6
A0F512B1D6541417BB6045045CBE72B72AA2549C345B1BB466335226A0E76A10
9645C25A0FB4CD8455C7C10C0F4E7E9914D2010BA1C95C6BAE4E62C8B6A8BDB4
92281B366208ABD9C010B3660C5E150D63D6927255CF9081C0898E9B206FAB57
B306669AB87AF405C537CA7D3411DBC41C53EEFD8071C094486158E97BAFE90E
BA29BEB83BA60776D33BF9CAF9C7FEB66D4B93DA27E499B006D243FF59CB33F6
AFC65D10B74CC522BF4AD45E3451B395AD5029B148A1C9B710D5CF02B65F9189
0822C0A33C4D07F2DEFDD5B4F6E063891F0456F1BCA4540F9DCD3B0F9F39696A
52336AFCF0A33A029AEEB448CE120B9D939487EC8274AD4E1D5F5AF4C14EC910
680C5E312735DFA3A5B1835370A76DFA63A05379021A64EE55E25AD5218398A3
6DD66D1B474A2E7C6E236E0E4A9BD0E4F7AD1807C6478225C58327BFE1822000
26713D01CAD6951F456504D79867D523605ECD78F2D5DA05994BA4812BF65E7E
34ACB732150ECB3D212D03387C71677F617D76A9A42C708C89D61614F280A5FB
0BFA84A17CF9DF333C9E13DEE82A5ADC9D2E588338D247889ECFB090CC63CF9B
8D92B1CB784B65BE80E3B57998F9ABEE702E07BC127D272C67B0A97734E405C1
FAA87E6B9DDB8ECAD2B9DCD56D687DFF71BDF29BBDA0A0812695F81C5EBB83F8
0A810D6560F28D7CA1F89A11F253E1B3B4EBAF511454E4BF2C46A333BC186558
8D73374455A32DE993526063AE70EAA647454ECC62BFC5A53357F2955E4A8A02
E20AA64AB6511CEFC5A32874C8F2BC2424C6B85BAE80191216A22D93BF2813EA
18A1A961543D7C58C4F4B263D76AD6C61270F2A77468B3E59BA9D861E5AA6CE1
B7A9C4C2A13E80C4052283DF3529210B3F6E90C2EFF205866865E7E96F34513B
05A45939728619E02FF1410C0D220F6D615718893E7370A0B91675BCF681B2D9
56112D9D37ECB819017472DCD38FE4724834869F82985A69E33BF862DB420DEB
AA1CDF83099114501C037873E86E0D33FC954E12D40038FBDC78E7159B738516
A078AA386D9424B8D4913B7848D8439D2ACAFB7C81C9AB192D77F316D299D11B
24F67141B1E0FDB564B70FE68070BE6BC00F22C11A1291BA6401C722487BFE19
D7869DA874C9059677DBEF958B7AA06EB924A17B3EFE9014493EA1FA8C4C67B2
B5DC483ACFAAE88F2DFF9FAAA7825854671ECFD522540C9F6C3817C11D3B63CA
8ECF710EAC4F27506B67B972633D0821BD15F4511F305A5677F2919DEBF7DE88
4F60E36360A7856B6B6A8A866832534279AF45B4232877F45C92ABDFE0910F7C
F86825A1B6012FF93479BDC9639C01CF2C783356B33127AEC7039D40529EE54A
756D8B7524E069DA60A38AFE592B8B228ABE22B7BC9CD9B23277FBB567B1377C
77E21AE6F55ADF4F8864F4260562F0384165444385D5A8C5966EBF191900B898
85240634EBE8A5DA382E0EE3583B1B5D102B6EBFAD60AB9C335919EFBAA55A6E
36CE4887299E395EB5766080FC0B6F93B1247F28842FB817084C9C090616AA72
25F4ED6996D36CD9675009C615BA26BD4904F3130991023E4116A7E6BCB26C10
7106241DE039BA7F26E137040BAF587AE03A476526F025C70F16EF23474C0EEB
6E27D8562C7C733CF470EA198494A505A8F871E8EBA31D4F0D9F0AEB9D0EF63B
738B582F7BD73DEFD5D83707BBC7854B6FC7FA6E2636F0B68C4858B247F70C4D
F602764B9465975E9AF28C2046EAD743CC350E747D6524B9CD7F325946B9287B
F7D46E4342A71B0409B2BF5FA4D340DD549F6A5B05D2784EC5A248560F4E214B
C5304217B3AF8451C190FE1C312527746E45DE39D8D43CBEED9A19FFE143CA61
3B65344C26E189D790A0211556C609F107C78F55CA120F3449A697D1305DAD2C
D3EAB88E2CBDC022A4E036E232237C1C16ECFA62D6CF8EA3B6610B58C75EEEE9
676201206E4A8B8C7CF5EF409F2C0544DAAC926497B1FBCDEA07DF042ED870D3
9D74709FDB8CD2CAC4726655371EDDAE78A5D9E0811ED4DCE8C23DAE1ED44D06
F4DF09BD9A00C1DE178E766E05CD3CA64301C592BC01EA4F6D1973586547B170
A3338C60FA1148DC5F3F7B7DB5EAC870239BD137CC85AD54380379F5C30B0754
D0A0FD8DDDC7CE725B58F37DE7DF077916C912F2808D0E4CA32808D0439A148E
3B1E18B9C88C8B4DF23FF5C53B2881D7C23D1C239F08137BBD8FEA326E7CD1BC
C80027A40463BD58758F4402D3DCDFED46C2E3C405E1B1E8DD0062E1272AB5C8
91953946FBB4B9EB0A74D0F7F4FAAD798571EEDBF0CD4C92A6916909297F27B7
5135990685B849E8244D2EE73D5C7BEF1D3042CA8353210EB4293A2B2F1BCCEA
7FF2AA91F52D343BFBF5E91F2381AE5B6803C46605D471B7BD122153E87D872D
EBF37727370BB683A194C4C4DE13F54AECB116BEB3E0750E10AF272E0C015641
0F9264A21BA79821B29D8CB78746C314E6893765AB9BB7BB1730D758F687E615
D2AEED695331E99591AFA000AA540ABD36ACA911E91E20912AB819A80D5183A4
CB88E08E0E9911612639C05043942AC8EA0072E9CB7154C415C0FB37DFE3F01E
638D5052C87A8359DD979C44B730F06019191C5BED15E6E79FAF312ED8EB0B02
3E712A0F6C89A6F7C122A561F133FB4D2A98EE09B11ADEA53702C92C210334E6
8D5F3E1BCC0E81CE178ED749B00FF4089C1AC412DC5F6696C9D8B9D2EB24B35C
3C1F8F63EA348A95622AF76CDD5C4DFE06A8C7534A55FAF937777E864C98062C
CEAA3ECB5E518C75FEAA240910646EF782303BF34FBF8162C8650D5A6F0EADB4
FAD9AED7994003F74E09A3CFD8900A33160CD1D49AA1C7BB5E42A2B0AB5A9D20
A5AEE02435D84A2622ED87454A2867E112A9AC72653A7865E2DDB9C236384228
94DE4A396FA798ED1F370AE5247E0E703D4D4225ACC1EF410631555D7DBC814F
F84353CD407284FBEA1D371CA578165B888D771ABEF7C3ADE33DF899E55FB0C6
A99A97A474739D07FF17DDBA267EC6C0A6154094D6E7354FEEF9723F23CA6E86
D8467D66FC5DEA43D700C9712BCDBCB15EDB628F4B840A76D761CC213376A0CF
3F137F399AF2F349C1D7FC9EE28CE88F416F1069D6907C3E917AECDD245A1BBF
4375A03755C145042232F87BD3F097746E41A70FAE7761AB26D1FDBABBFB56FE
D8C80879557D3849CBFC7D25D84D137ADBB5FD4F6FEF8CC9D54824EC85DDF553
FC992F823952FC7591D08F035BDAFC9317F144C94E828F09E29A02F0D6639DF5
08D32902957CF0BE88694AA031FA8BCA9E73D48A60FBEF090FEFF955FEF964DA
F53A9B58D2732F986DD20814A1C11963E4FF24011CB93D616CF4A6DEA6ACC5B5
354626A142D85BFC4F03DBC32F26253B97414C9CFDF3C3EBDD68FE0B7908AF88
1961CDBB6A94155524361C0B95E42AF0DC1542752B2129938BCD020CA19D64E1
0EB5DE254B638D700EF4BA620D924D65E95A329AC2657D2CCA597A4FEF7F1347
05419CFB59A93578682671B9A2910BBAF099C877288C19A4EBEBCB3C64415248
C00D0295332B6388384F27779F0B0A2D05A9F3BBCB3C1F587EAE05AE4D2C5319
478E8D848ED75B368FF45ED8B2D572AAE502493D2A3660F8400E1AAF9B27AB35
99FA7E39E250E91A67101F20FAE8BFC13A07FD2F7FD3A45002C02AD891458739
10D221602C35139358B1F23E0DDEADDF0AC07B1689EE95DB17A3B6888D9BEB65
C7A9BA2CD903B2F8348489A57F5A7191D1627A2C76A856C9E178B17A40293F98
E9CACD819DBAFBD0FFEC6EF5BAA6D8AFF764786470A5B02860DA35A5B3A2BBE7
45E6E4882CCF3A980B0C35F6C170D7269F7263FBBBF4051A51437A218711AA18
A408F16E7C9FD7D61AC4E859A91CA4B18D5BC3B0F6EF0287298B75C11FBD9FA4
1BF203A988C21BC2C550839E432350ECB4471F8553F7B4E42128DCA6B1239DAF
6C9D4A8B8AB7FA8AB013EC3060F02D6DB609F59E0BDE4D05891811A41F7E47EE
7166D88DDCFF5BFE1AB84D873C38009A857DB436100CACD8DEB98548A2FD3770
B44D6194717757468A9C84238E5B83AD19921E31485ACC168C25DA73D95767E2
27EDA7FBEC3FA6C8C58DED3649994CC965F81327D8547181CE06A73A6D696552
6A6EB8009B1C40A46791E8DD0AD66E125F61CA6810BB4B74E266703F9DE0E322
41D93C72DF010EE7DF3B7AF46CAAA9463E68D5C8B792D3197C4EED52CD16D5E4
493C1F8944901537C4E6AC73E5D6621CBD177B50CFD7F86E786D6E6EC176F6C1
3D7E9346C2859A185793A764E960F236A1798FF5E3A740ADDEF422FDA93FE058
53A9989A0A7252337DDCE50B6A040E49421069081644A51C80D37BF73CB30254
BC1D8A551F71FFE93F068070448334307A87526A86A3A7D53AEABC3506E78DD1
849BFF403701D6059D6CC2CCFCBAC8BEBF440B8D3152C63908C6882E56EAAF71
2984E440F40B5F355DAC74EB02738BCB094E40A55A48A26BA9970D09EF48EDB9
C0C6BA95EC2A5E98325594AC418DFF541515964C77B8D2C8E953703063F17F36
D042EFFB97936DA27FC3601DDD601709B71382EC67BB58C8D07254A6BBF7FFF4
EADB3B735D143E4654A5F06ECF67F0305606CD0619022A5DEC8206D4F9B8D3B0
1CB47BCDCCC4F1898958555F5218EBA0BB9F6BDA92E8A8F645C51D69C597141A
DACC7696EC47C399F6BC4CC2760FF9366A7D1F2ADE54B913F1ED476D606ACA25
83D3958E9EE0547A5C54C359AD40D487FEED3555A936A7F9A2098050930339C0
DB023D22CC949331C13287D1108A4F840235AF8E613FD6176485B22A31B165EA
8DE2F2534E57BC3E63D44604D095AAF56667F587FBFB99FACB6315A21101C80A
6029178A3D776FC5BA0369F2C4DC3939602C74FA1BFE35F67D7A5B69F6E536BD
FB3F7E019C8A0C61AF4FDC3F6314A86F3AA1BA7A2CCC793353ED360A75E3A558
917DFA168A2502D5DD483DEEBF299518EE9A577DB4FD71312A64AD1E0D2326A8
63B8BC7CC28FAFAF6C09297DAC4C257F148E75B52EF87B97F479F5C2B7079A57
5CBB4969803B76F9B0B0D5795F9E93554AFFD54CEF2C9F48346BBF17FC73D0D2
684B8E4A17AD97736496540D269BA9E8D1FECDA52A4EDACDC022D276F288C698
E425A3690CB2D5A17A72C69073CA9CB3028779
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSS10
%!PS-AdobeFont-1.0: CMSS10 003.002
%%Title: CMSS10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSS10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSS10 known{/CMSS10 findfont dup/UniqueID known{dup
/UniqueID get 5000803 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSS10 def
/FontBBox {-61 -250 999 759 }readonly def
/UniqueID 5000803 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSS10.) readonly def
/FullName (CMSS10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 68 /D put
dup 97 /a put
dup 109 /m put
dup 111 /o put
dup 114 /r put
dup 118 /v put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C295470093CA270C4488BB4EB864B48
63941B9739638D2E6F3CC778582B46AEB4E466D89D1C211225274356A4BC90F3
274C6AA56E200249B7D0949A3FD4185DCB3E5286910EFD7CA72D5D8E8052C96F
388D12094B87D3705CE64459558CF024667C0FE96CBB32B0BC9E51037D7BD62B
E4B05FF99384E71D78441A79B0B1DBA1CAE02434A9FAE46596FB86B873B1670D
AE0BAF516445A0DDC127F8FF3ADA0B10EC30A9CC1F7E9248828B5E8AB46C3FE4
154B80A54128A08777F5F9B8C519C7E3B632B3476F007FA156E9F39FBE57638B
4214CD2BA79BA9DDA0F4C073AED814ABCCC2F7906C57A872C00E67FF03AC1200
29DAB92376422FA21C67CA98BCEB8C431CA2D3EDDC16972F84BF6DB2F705BAB5
CAB39C82D139FB1304B9E7BF1F6FF447596081D5690B1519E468D6BE49C329C5
C9C809023EDEB9DCE4A6D52A8049E0CC134E8B41BFC6558CFCAD3D9D2773EA16
131567AE6231B3235869767A1E7C1FA6C8D6FC1B276CBB1CAD14D376188C9682
302836A9290E587D4225EB8BB1DBA2C4580A81FACFDA197174FE948CE757C575
F23070FD84DE121955D7D9307BF986C5E739FFFB6CB76822C341FBD9FC2E3378
AC9332B40C07D5B8745D74E30F1D719EAFAEDBF5FBC40D0546F69A66072D8A49
28D2CC2E76B9B1EFD191E0BC7510C2C8761BD92EFCFDAC263342A01398A56D18
121A591FF5CD4AD8B25699A7897E60BA940336BC17B9EC9F97C2464D031F958A
A3548D0C97C50C580B6EEFD0FE8330EE2BB0D2E7FD1DAE33448953544A4B1C5D
8EB57798D0ED4B22909FEA78ECDBC4D8A124DA05B9999242D68681017285A0C7
69041C1F79442279FBE328733EA0A6694D68BA89739FDB9297BE0CF1808C07F7
BBF6F1538DFE084EC8C0EC24D883F6CC08A51DFEA23EE920F44BA55FFF58E960
C7BEE551FCD2D5814DE7E3F835608073C2CB80EC57100CFD484C837881674E92
B217F4D11165427DACCC29C129005874C05CDE5FBB2D912368EA2B98C45AEDD8
8A0D2493F60EF36809C8C6EBBC7856F6656E8D398BCB29DAACD4F7D4300A0B01
161CEF51195D2C58DDFBCAFC1C03F49304ADF02789889826F1E20BCC14827565
F2A45CA57DCC61B52E33638A0C6C5A59B145E82B82571DF1806EC40FC0E8634E
A34A791B1325571E19F3AC2EF6FE68A14B0ABEF7EBE0EDA3942E85E5AE967A14
0C5AEBFF2A36DCA8866700CB7082D2ABE470864C44AEE1F6D180D511304C8674
D02FAB12A7079ABF96E1CA3CDF9D75532123E87663B1D524265AEF63EB5C2169
B67A651A101E1C7EDB008D3DB06DB1FC1A81B41B291D6C4A58FB57989FFCA434
DA84B3914D1D80B17AA3A55A70BBC06C49DD5F7DDD03FEB0055088558FA192A5
261477899857CF598DB740E82D035E84CF17B33048CFED2DCBEBC2B75CCAEBEA
B6C5AA1C6978FBB36ED98D9047028360ED430A0AA69AC85A8F83825EA649E1B2
64B260197B06A24A1DD969CEEEE136FB046D713D0630B246BD41CA285F076038
F7F8431913BB9A3E70311844D4C22AA446E3CA217A9DFD75A898997130269B29
AD4AB7D9662856E677FB2DAED7078639CF31C6E6637C74DE2B5D0ACB88BD61F3
CE3C5D56D3D4B3EC1ACB33EACBE05E53A133EBFE93CE6A0CBC8F24BDC5B31BBF
5B3E55D6B40B1CED389076014667E28BBBD60145A06BDECEE8011A2C6F06D091
73767A8045CEF2A110B614149FEE783A2351FB2938A9F73CA406538EAD82ACC5
A3DFD3DE00221E1B4EA977AF8C89661357FF7D2F1FCEAD6CFC9D6AD81F95100D
EA1F328249AD84AE849220E6593D45015B4D7C9527F3063E9F6DB6E572092A1F
1F460696227D5F0FA5A5484B1F0D8B4A35066451663BE448D924DBBFD388B6D6
D7CFC87C9E75B7CF79A4C9207E29E0BAAAD7FDF529B860F7731EA978E335334C
13CB2F0A4250F5957B44CAA0674AE8356F586A24FD137103973B9A1FC31090C7
C84DC5D380404BCDF3FE20C6F74FFDD8BD1DE845E99DC6FE09931F003834ECC8
08C5D962070B6C44F901A787CCEF048A2C584A2285506B4D4E82B1BF130E2220
B6C8B3240A4CBBCE16AD3676B23A50B75F82CD88D1B8F21D30A12716426112B3
23DFDE5A348DC9DCCCE5BB5DB5433A5AC125DE1229FFAAE0D8319B2929986EEA
56A93BA1FBDBE617F30852A3DC8C712DF674169C6D656F75E252187A085B2788
2467CC4DB08D48EE6A98C61BC55E6EFB1938FAA718802B7587B94C8F1477E9BB
DCF6E02B5E67FE3AD9D87C321CD9BC0CCD36B9C4BC601E6BD552EAB8E1C940CE
3A22F3C2501C3C939CB4F17CE97566F0A04602D2A22A05CECDF4A49CAFD6332D
5870E1F31AAA5F86867F71610CDB83E473B9D20BA00D8986D7148E0EED03865D
9622864B52B09D12E0C5FCDD023D29D5AB1CACFA92B6FC14FC84E95F407861D5
2BEE3301AF399FD7ED04DFDE6679A345A282E7FC08D47E3FC8969D3B00ACD7B7
F8769647D6D4F4106340EF739583374D023C2702C48FAC1B643B5897D2D7DBCB
73257712A0FDEEEB98A021D218CDDEBBA34687E23C4828D7F96D1ADDFAED7EA5
B279322E6D55FB486AD8F3A8E7B2C67915564FE56F0C9277A06B29C47FB7D007
11AFDDB3FC1B173B4E449CC6B198041CCA0624D81B4840FE5B63BE72157AC6E7
03E5E95D2E2CE2E40BCE8044A8F2AA45F855484A891B9F0F8F70188AC66A8DEE
F4D656CBE216E6D9AC33BA8DD0685D480833E1226784469A221D9FA3CA600AC7
5574B5226649A9C48CCB43339942FC9010F86BAA2D181AEB487A92A96BF2EDF1
60F3B93FDFF4137A25A8AEC5ADF8613019CDB103DC4367EF3D8AEB4FED0E6BF7
622AE0CD3CAA0321D26CA4280CFB60D08D9560AB8AA5698231171B881BE9A27F
BDCF3162134126212C523738D221AA05E31CEE73D9D40F73C450B6AE2C1E70D5
C37162BDF55943069923A290A6C720042566E55A21CD81C460818883AB016C16
8FCCD1255A66977DC1C110261D7642199D466DD3D2493A2D47694F842241C474
1752B00DA03E69CD16A8A14BEB8A431A315D19A39BA978E46EB1189089FEF647
F9DBB58AAE6B3FBD475E4DCAD241A051DD100ABE81D40ADF18A4C50F53BF749F
D6F7C8E02A5665B4AD18DDAE79096DD447F8BD32C68F9F97F05E0071D9E9AFEE
257B96D48ABD9920418E17C8F027E9E975E4A08DFB1988E7104CBBC1CAF356EA
7750AA7110BE116AF1BA69A94776E4356573B38472A8A1292C63701543B0F315
611A0E0595B30424A1137478BA6F990AC7C3AB4DB69E75C222B617F373C521D4
246E954E9857AF59D1E6C36412B643733CF5E1C90389EF0E5E0DA55D3AD12E97
E7630C315F72A03CAF22E0ACE3AAAFC1D496CF4E5ABC49C2DD5E264BE7EB2698
AFF36089B5DD2C53DB1C1FCFBE1E89D41A95DDD278CEB29DC85FD1DB8B83CAB1
EB37C531E9BB8466ED6B8B60258D3C355626CDA43A32834DC89DFB11E5FC6D68
0F78CFA871113DB81A1690250A6F842ADA15734CB6DF7C6ACED6D8D586BC4E1A
94EF3052FB0F8B9454390B882CBB6E135AF1F9C777AC362C2A758C3A98117120
73C6E2FAFB580716D4B2889A4331CC658AAE996245685B973D9C184541385680
AEC2956107DAB00230FB39BE98D3CA898D917E5F2088F26CBA4F8B5B115B6443
8753331233B10852702FC26D9DD4C990C13CE4D0DCEA23D62A826A4B4FD16070
5F3638C0A50A3373A33FCAA6F3644975AFD0560EE5F2D1CDF08820373468E4FE
6679A229D6955CFDF7ACAA92A87E6D8571AD18CF59F84F88A674B2946FF20A28
B9798EAA22442415EB46B9498DDC0F4BA6ADD347AB43E9293CAABEAE80127378
129D5DC69F6DFFBDAFA5D65580239E8EDF6833D0DE6DF75F0FD090A83CE0974B
AC947BABBD1B1C7194DDAEA37B0CAB477ABF9433FCE0243C8D308409427D1DCB
8EE4FC36C7E5CEE104904B520B3F6E677A5B92F694BDBC2C799991667E0EC14C
B95EAE7DE1854BF4542F05B4AF401CF67FC3E46EA5A0DC362F3CF177B1796DA6
753AA803E724D1721DDD1BCB0C12CE0859E172D2A370C3697286F80D9E138AFD
A0EE016805F847BD30D11D8B891E54C77AB51A7CABF76BB14B06153C7F811FE4
93FC4B7CF161051A458EDF767DF94F487DB939A2740B4242BFEE234F75084DDE
207E84533004B933D43C712F0C71DA4A00FFD6D721EBC93AFDC4200E3B8DE433
3ED3E1DB799BAA27548ADC853AFF5D9D6BD92D644E3CF394789C99D9DC054A26
7770AF5DC5BD6563929AE11BE341F036584DD573D3F43D9D975201EF77BEEF80
D1EEDD1D4AD5D4D4DAF6D5B9D4C1736CB111D6FC74C236779C0ADA430323A825
09EA8D0CB1772220AF28B93098BDB36913159208D1B2D7ED45808BF7B686419C
5C0E3DAB5BC9830FDF3B494D624EE8068BF6F5212BD69EF466B9A213047BD105
B848F056DC544A8CE66C546B1A4DCB4BA29CF0EB4DCD9C2452F22172AFF33B29
E97E12D8F0D312B03BD9E5377BF0C81D884F1E79DB66E8144F106DFD2579AD26
C693C5B68F3AC46BF0D6281032D4D4BAEB2243151AB1AC0BDA2ACDDD4D590C90
F29B335DF8F57DC593DCC081FB56924028E3161AC4865B49D1B0F63F5EE866D9
7A71171C09B09A44B0E32F03494D9EA63F3C89F5E772BE25A6557F119299E989
99BA041694ED805AA4F3BBDF00D88171C9D43A9085A287A36A1F0F9386F2A98A
96815CA51F06E1CDF20B757983C5FDF4003F5438232159F325C6335B734FD982
1423BA77D0EFD044381AFBD0704E3DE95D23A70E2428E9AA355A9A8A25C6C74B
48488C14DEC93A766E112D74C83576ED355F17A809E8D3F9C65C4E3E14EF484F
4658DFB57597E2A4461D8044E95844391C1275D63F282B37888C842A5151937A
45007547263D70195ACC018A373D498B88C5A028BC66ED96A343EEE74D61EEB3
D9472B6A549CEB8699F4B35154A0E2ED22867E4F9E4A76311EB2C9F9078FBA81
838EA49C2966BA64C165434DA3093206B70186BE80600B891D9979F730FDC794
5DD6D8B2090CC67A634B719F441092A10C447A86ADB78DAE45823ECED5FCEADA
ECA52E363D913D9EFC0ED98A5A1F823DDA3350EE27F09C14E4C7298CC0FB6200
DEBC640C68C82D70AFB7A7BA668F1D7948686206884736CD03D9F6E6CF9702BF
E3C932CEF3CE07FBBFCEC0476EA6E8D5D4C5C6450C8FB236B89BB82D51886240
5BA7462F50A88F69228DCBDF26B7250E90B3DF8E94ACA1CADD9EFB5C73EF9DD5
46052314D445CC92512BA231F79A09A2F0D91976B160B8C9BA055DA4AAC1300D
491193EC66A6DE12BE01EEEDBC3A2291DA1F27AB76596A236B75E19FC5F1FB6A
DA1AD835CA08B6CD03B97B4CA1BFCBDD2500BB09F1A1B0438E4A759370EFA318
F062BA9F3D352572CE232E6FBADDAA5363807D0DC5320B807FE5485C8CB09B6B
0BED9F5B1300FF370252DEBAC9DB25CE2EC494E8EEA45FC6604B3C104E81B287
EDD49F3D7430EC9176A16B4FCEC5DF68DCC11ADF90BD5337E2E4B59BEFAC8298
E5ED2C7FC5928635420FB1955251932713236DCE28012C86F63D12AF1DB634D0
0B8CB8992B8723548177BD6822A808FF221A9E38B0DCCBC1F3430A9BAEDA89CD
ACEBBDD8CCA5E17F1CC37E35A01E058BAAAB6BE7124314DA19962BADB74EE73D
8FB13FF6AFB6FFF97926CA045B62B98BAA753AB0FC78B881D3FAFF9EE2FE918C
8EDBEF87637F1530E3E13AC090FF81F4136E08D5F3734327E643CDF621278741
A17AEBC56E21217888A6C8B5ED4269731910E7E25693CFBDD4EB4A32698F2447
4C45D73E810B627D8719E4E34D8FF378F9B68BFB149AC67B3B1E55F20D097FC1
AF74D46F5A3923C63DFEBFCA210F6B257F5FF3F2AC34CE41C15C9977634E473C
2235295C05C3DF6B3009C7854BF11CC87471CBE085793AF9C5D05C5479B9E780
14A5A6F3F6DDE5A18243DA15732CCF26ADE40C566DBC3C62B71D46DE87A12C6A
647CAC923254E2E74AF882DBD5C9E108A9160393C5CD12566AF7C824EFEAC56E
6F05B92C73A76824C5ED1735BCBAC61B98D509250C854CF1500C212F574D18D6
4426B8510FE9785B814A70E75C9234D42483E736D0689D3561E8EE5650F33A36
D50127589401D267BA6442E8616E2CDB1F6691D3FC4A2A377E5E154972E890DD
60CB463E9EA9A6EA61087DF452FA5646F69BE879337EAA0F5DA4438FF0365627
4E3B16851C2F08E976FDA27AF451CCEFED00376FC3D6E0C160F0BC19544DE289
BECEEF9A067FD71D54DA3A4F73F06E2F522BA07551296214DDA47B1BBB1212E0
1100ACB5F65FD30C655A3402C83058F8ECFE48FA60B6A3DC86C4996414130194
6676EC7F37454023AB53E9D9EE60249ABF6953E76DCE3123DD268BBD492412BE
65D7C3E5A5E483C381182A8F19B506F0AF6DCD55532B89852D1D96021B22E9DF
D9D072BD7DD4450577E658B433A84F92752B260AFA2EC4A118747CBFE36AB7D7
6D5DD96A119AA1BDD0FDCBC3AFDAE5FF72713EB46759A06CD09B5CFABCDAB0E9
85599506AC07AA525978AB157496163AAB387F079EC9FA1F9E91B9C2FBCDC9EC
7027D77016760539AC03F1C1DB242D28D6EE946C42DD2262D82ED48C3A839853
BA977046F0EF373AFF884AC3112D2FB319421C3165DFA5710BFB9AB9595A10F4
9D05704B9E22137CF27F4B2DA9CEF6D8801D5F792969B2E58FB539B8038DF440
6DE20C0313A7BCD16F279290AD6859B0E657CC3041C7928CAE35B9D3A681F2A3
2D40F8EDAF1127E754276556C95E1282514B6EB6E43FF4F0FAFF28C715E3F39A
374415B62C1F5F8E31E006D6ABC736057910A3729AC60360CEE1B2C8D9F77336
39CAC45329A372205FD551B9E9EA5082411207473D9D90E76136AA70180172E6
AF6EF3EF6B38B1906B904BE9BD5251EF067738840C28877659B649C6C4CA328F
1BEF8A9CEC2CB062702F58CC0B8D2D097FBC278F9FD894E10ACE1DEC4530CBF8
E4E467B6DB9C596DF0C3D43E6AD70F30B733EEE692C2EBD68756D0C16E1F00B6
AD011B5DA073A769B53C2DA2E7C9B7ADC6F551BF4DF4C39C66443692C3DC62CD
B1E094013F364D04BE2FBFCD1C7B2836180E9022E0434421FFA4317A50096684
CF0B8740EF680F27F4A84AAF2AA92C64883BAF57BDC60C6467A8D4E09E6316FF
9BE73053045E5F3586DA3BD1298DC15D751913FB1E72EF80047F6B33591B97D3
DFAD34EB224D64EF60F5B4ACC6EB42E1BE0CB2812FF2F3C264AD2E44F5EBA441
670CA0A60E73176ACDC4E42E74F8F489C73481EB5D46A61FDA1C0FF9F8844DBD
99CECAFE2A72833E4522981FA13713AAFAF8F121E60FAA6F379B2C8874CFF23B
8FECE70654E5855E525A403700A96CF7F8111BF2B58386E29640D82F1DD86900
E0E203F3ED554209CBDA2A61A5641D4B39D98C5C43D4575648D06BB82B6C4D4A
F043EC61B17C208CE8B4F43A7BCBBE588A3D13A183D79A47404223037FCFA4F1
DD237344E589F161BB9BBF3FAD2E28749350DB9A74C09E894BBCA85B82E704E2
99788B24642A7D0F0FD96601CF1AE4819EBECAB89824A0DC1C03BA4B546ED36E
DABC8D49CFAA53D2A9A5DD6B3431E364C99ED0323513476CDCEE49BC413E50BF
51EB93563DC03B62F84C5F96ED713F288D109C79179AEC41424822772032035A
40E84014F5BF40948F05E8562C9CA9DDD71F89021BE238E74781A92D64E5F9E5
AD6C0D954C6686C714BF189E78EE47F1530CDB8376E52631A1A26E3021FAB977
DBF01167266AD68A779C0180E034A90CB77B86747395BE885E484BE4028B4093
8BE191D58D0BF85308C72E6384292A2E1CD06130A091F8AF9DC6C3E12B1E4BA2
BB2C37AB4AAFC0CCC7964C06B9EC1C7E3F16F7AAF86D31B08566DC4DEF37C43F
29EDF6A08E9AAC1E5B3CA6D1CFF3BFEAA81F5D91FC44A01988A3F5E2747FF33B
9547EEE2B94EBC03B2B922638FB8B3E35212CACFFA454E9F7341735216BC2C0E
DED45D9D5FAAC31D83299B2EEDD2681D4943D894C5DFA60063EAEC8D22D2A62B
3251D7788DFA6D82F86A408D878035C274E22B7751F71BED093B46EB550880F7
71183B302FF5EA24C156861633A9B68F26484B652A5E35FC87B66F6D1C7E1E4F
20C468D9D70E43953D82F84E66C081B73389C195E8248D03F0F025EB5FE3C13B
AF4DF095FE89CB3A043C2587E09D84B30DB7140139AE57C9102798CE151B5FEE
447D243B8BEBAAA7E933FDD92C108D613C68C699C4A69E480D0607664FD127F9
6AFFD9CDA5E62DFB940A1AF3F2D03AD03BB4A70E0FB62EEACCBADD1BC9B7E539
9C7B843F25D0BEBED8B80A724FCBBE0843C933F901F2F064CCEC37A8C469C22A
268A5FCDE6046F6F5AE3A4B9C27E6B95994DD29E2553734AD44E4F90F88484D7
25FFE3710A5D647C3A7BC8308199B7960CB127B1FFF25FF0E9C12E9F359C58F5
93845427DCDA52BABBB03D037AE9C8357613D74888C569B698335CE6AA9DE374
D80262DF0DD21BDB9B1B2DF01D6A8ACAA8CCE89AB76839ADD93B16D93C634BAC
20A2B9036342159C1D7EE7F97C369A34E99F79E1856ACF29E296B7A27A1FB6A5
F1038371D1C470FFFA911DE8FA020D1F05A6307571D8CF53CB7AB0F55E122102
E69F27FA4C3D2ACDCF000837C1B2D73D3E0A41C18E05866ECFE87FBA575CFE7F
484C71E34572EE14D65B8EA44FD5F7443C38C2FCC1B0EA3B70C3B93760BF9727
CB412116032E46D3F85C40CAD28C73EAD6D66560D84FCCE0FC3A51CEE15C1C7E
417044B02177C83A79AAFA776AFBEAEEEA9B22EC63AEC1A6D993627B4B7701B9
F8277E4DB4BEFFB3BEFE3D368B7B760F37F4AA84E688BD735E0705731A7945BB
30DB48B72DC87ECFFFBE12BEFC4083F9FB3E3915FC9B912820
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/UniqueID 5096651 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 15 /bullet put
dup 17 /equivalence put
dup 18 /reflexsubset put
dup 20 /lessequal put
dup 33 /arrowright put
dup 36 /arrowboth put
dup 41 /arrowdblright put
dup 44 /arrowdblboth put
dup 48 /prime put
dup 50 /element put
dup 57 /existential put
dup 58 /logicalnot put
dup 62 /latticetop put
dup 63 /perpendicular put
dup 83 /S put
dup 92 /intersection put
dup 94 /logicaland put
dup 95 /logicalor put
dup 102 /braceleft put
dup 103 /braceright put
dup 106 /bar put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70B1491
307A6D9A2F2BA5099C8A07762E70BDAA74BA5E2BAB260C1352107EB8A96523D9
4BA3082B99772D585329AB8645C3BBD11D72BA01F95CCF11C6DEBFDAAF7F5C4D
795F99DAE6A8D59462D759001BBEBB59AB0C322EFE02904D82B424649C2FA593
0E23281DECC5AA908E54244566055D418602EEDBE78843300158908F77C0AC75
9562065826D34C38C598D8626BFED7CB672F132E065E2C27932F709935988376
94901EBAEAEC410E2B36575A71EBB8954C3A90EEC264E6115950FC91D0D54999
323D8B4FF8129A8EEC3900A00CCB026E6943BE105BF5F504AB332FC17E568681
F423D1125A596766BE58ADC658888DB39BA74F67CE0E26C392220832FB036E93
7587E96684BFB78BD035F54AF71B2408241AAF548F996AD440155624B3EDDC79
2102EE58E1E27EAA0675F1F13297A4CAF514CB319E58D424A820B8F48984987F
DBB53808DDA9F65E665EDC552A782B7CF45CD977FBE5AC332A82DA9D9EE7E7E6
B3126AB12DA5385A3449D79C933A88F0305A24D4162A214B85D77EA7DDB93888
7AD6A426EA74D5D1B97F9EFD983BB4505F2770733F4285BF38A99F910BD4264C
4337016A95F7EA88C053DF306B3658CD624B82B45DDCF5E10577569ACA5EF13A
0603FEDDCEA1337AD80F22554E627E927ECE5E43D073B53FD18A97C096F4945B
4EFB8821FAF6FF5E46B7EBAF4D51258A19655C942F0206ADE88BDFB19DC07D3C
F7A96B6FC6361F61F61D2A142646CECC63506CA47BC83534F841E60E84E985A5
CFAEC8D85576FDCCB7F771EC37AFD4DB7D3D9C08F99BF41C4886A1B583465744
99899D649B2F2B18CF910927D4BA5B13BCCEEE6463B7A73A396E0BA86330EBAC
EEDC826C790C8F6238BF440EB15597E0C88FF6F0EBFAC52CB6A02D54045E942A
5B0A7522C687740014E190CB8DA8562DECE3B53A41F788740197EA6D22BBC839
1101E07096DE68CEF00C447FBA44C0891B2B039F046D5381FCA663648E011EEA
788061AE13E37B8E71B3C26A144E365EEB9B28379E390A769843D098C6B011B9
DF76FB4B00A1908A2FF3DFDDB2BEB855E553B398B88F2A6556B324B3834FC495
5275CB4A4692393F836382669BBEC4ED4390634FB35F9D03012E45DF1CC20039
E5DBE08C6781A4907A1B28A64A13124341B3C49FB001F6B47DE8BD80FD8E5624
22023166D09358D715873F6380665D4CFBB72F7633F171F955D5F16EEDF20778
B5367B8A0D21CF57DE0AB677B129C0CAF60BD0BFBD10B5809E801B22F49F7AB5
D05AF43231C2620E79A911BEA0A5DE59A8B2377164C84DB93D8E789232D4CB9E
ED40C7BC25465E818BB9EEB30153135B229E9A3719A1B4A681C3A40D41EA2E9E
77BEB500A6F4A4AD4442AD0F6A556CAA1E5FEDEED0599140E591BAD6CCA13EA2
6B7576B290877D925A776EF3C5BF8749C3787AFD09650FDB5B636DCBA7EF9DF3
6ADE807875094BAE665446730C0678EEF70A0C576031E927A6AB7EA043B97AA3
0335976AEB6CB58088F3EC61F8D4B958F2E7B8201FCA874378C72A59B328BE99
850BE31EF8765D30F3D1314A2AB26DAE1F87B471E5DEE100F87EF7B6F1202FFF
5F3E4214F57CB701016DEE59194B64EE55E00800E11450DA3A739C374F8920B8
A3E072E8CBB00251F0896BFDA394185C3A43AEE68DBF748F55544F6224234818
33EB6C52DC3BE928EB0988A8C84AF01ACC4BF7D413DBCE1BFB33917581C31206
A63E60C194908524AAE9C39EFB6A8FE46993C6E4E3D74BDB65D5D1F672073FA6
F66A23750F8B09959C3EAE89410261400A6516A0EF1120137561E2833B248238
D4FD4B8EA249BAEF7656CCAE76360842990883A8C0A22B6727581E65B0753EF8
D7A64195C905E75A5BB5D3FCAF16D2D005C207CDBCC03A36C6DF919B126E05EF
AA4E5BD2E00C55993011CCFA045044F2C03DDC1278D3F1524007ED30B2BFEFA9
A669A305BFFA302DC14514C685847E12B8D7C4E6B97A109937AD3AD978023744
9273A47360575297321EC19B886A74556766B8C0C2C1483802318C52B7C24C6F
3F11FAAC67A3E3A7A7217DBDD0DA3335E456021459AFCDD908079277BA2CBA81
67E93E1833A1C83F49D6C16A5B3A13BB7130276EEFDA289B14AA2561793EC17D
0E935D3BC3E3DD21E00050649887E64B9B4C2B691524D12F8287C2F4BD2FB858
B57FFF55DC0C37C9D8CCDC71C11EFF408734AEF8D018FE1A1A56C1A9B7B9676E
9BBCB68264876A1C585DE35DE5BEB8EA923908987E681ECB08798ADD0BD74F06
0F3B526E20AF0EAAF819B97B3A3517E51FD5A8A677E04B9F04ACC74E86A244A9
51942F12EA2C88C61942F36E37C0864C8EC3B2FAF5235751BF933D66109292FD
D4B00ED3667B5F7F8B92527CD839A45DC90FD256472215F22C00A65A38CD9D6A
B8A7C783DF4AF4B2CCAEF4C4EF236954A2ED23F547A16AB3293DFCAAC47563D7
723F3AD89A24585E72B7A4CA63029A3145466139CC7C0F3E3B7622E5A704402F
8C52456125B4A9A5E2B6124FABFB0B0D67A9A5D8785F283E55CD7E2C7B2DF9B4
92EEC7DE4D62D6222A676169C6B2F45F34D30F83A7D2D4E348CBD06BF1A085C3
71229887833F5EB100EB68886F6E142D648DA74954CC8EB2DF5691C387673272
AA1964647CF78D4E02EE775582B1B8D0F0803EFA31892509A9EEE95F84E3E877
4CD3E12943149AE1DE5686E5DE7CB904FAB0303ED1D98C27515F4C2312D35D99
D580AAB11E5989F44AE7D560EC8A91E9D405885FB9D1BB0BB4097FE34A388626
B29E1A30301B4A39D7BBFE157380C3942D9264752ECE9CADE0DBB28BD7F552E5
2A688D380EAA144346C9B7403549C41BA6DA82088F2191103A1DF8848DD0B945
616B340F4C12355136BA70C7E4C022BC1420694119FD32D1D0810E0CE780AF0B
0C4F3D97FAF45327F326BC86AA5331B922E7F8F8C6CB3813E56073CDB7AD8910
96D0D481F68F15ACE1C270D6763E2960B986406FCFB89583AE119794327AADB2
AB2E7BD4D1498355B0B483B0321EEFAF5E4D66064BE6DE2755D94217312BCBC9
0C42F6C8E6CBDD655C27AE6E53C105A39B8C28D50484CB1811D8B6A360B18360
F63714E24AE2625E8645DBE78D1BCF7F61F4F80B0842B2BE88A9C02FEC663F52
16D252970502785192D3DB32DF234B177D55643640C05A247C22E90C09FF0201
EDD651CEF7DCD90F3CE49FD98BB2B23C91C41822F84466E3BD89E931AD511836
052A1171718142DD88FD5C952BC7C9DBD797117F31058D09F92D51EB46ED4411
8962D772BE54C025D0C6E3BC0C25A6301568D42EE751362EC9EF1A50A2C5047A
412B48559AFC7E677CB2B718F0B23B3FA692991B7F093A25F475C7546A0B4328
064C92E7E5CF671A2721FCA795D08AEF3DD450E72588E1ECCB47041453CC9344
6E287E92EA54C64EE510D6C3A7D4E18722863B8D09D3E51EE1301F670B1E79A8
A85766EB6E8E20A2610B66277D0D34033046FDF09AF93AF9A34AB90CA785E36E
7DAB0ECA2B1A8D9409D12A1E46EF79FDC5CF1D3E4A79BF05D946BCD1F170920A
DDBCBA686676C6146E5BC3699A0ED66E02546A215D1E0B333C59002E8834BA60
3FF16F6C6EF4B59B898621AF6D0462609F29C0454DCB1B90D4F9D41AAC59348F
A3574B47404A6F4F157B934F95E9F5F38C9703EB8B28D49041AF49479DA6DA85
284D3F6E0192DD8EB108D151BAFAF628DBC904F7B3CF0C3F080F91CDD23D5D45
BCCE02E9896D1928EC79C8F767BA04D87D88635D9C26FD83E8809007215EB174
1A1F1DAB3AC3653EF9BC74C07F57D1EA7BB44893B2D112E2943BF0BEB830E665
AA1962454C04FE001F7DA1523BB30979E5F8BF5783565884B338FB721828E147
FCAB90CA9912CF030890908EB60E4653E7C440B4DCEF5C648D00BB9DC9C5F85D
660A5B9243FA18DF122283AF6C31B6950D1BD45EA9B1D7DDB46311C20BB1723C
6F9D80AE9F1D30517D82F97C3362AA3098E640F17ACAA1C4D210F17A849AA926
2823E5674B2D68A054073986C274D26021C9DD5BC092A5DA86477CB8239B5F43
027BD6F6F703748E2993A98033DE4C7F65BB4664125FB83F6A231987591A6B37
B0B599B882A70DF2149870187AEFA6E11AEB5753A43A86352E1A85CC3CFD0DE8
03B4EFE3DEB08056656C17595D3C27A244CF24BDA8E42604DF16C1A44AF57C38
E1CD476D2F1E1920D941DA45CAE8688F175B2653B62D8BFAC04D005C9753CBEF
49D1FF22627D138C90082F9CFCCD8B65D562AD4E02F3D24708C878C44D2EB820
8436C1B8A47E945A369294E307301DD79B0E9140868C421E5069F986351D0B0B
E461CC367256F65EDC71A601FD5B853CEFA545BE964583764440D87F55819035
30314572B3723F1F4941DA74231C9399C8F1DB072037DB260501E4A9065C8FD9
958C7047342D2CC885BCA11B0ECDC22A2E1611DB145C83208CEF84AE54D74477
3C1F15C5C65EB1ABD542751008FC3DD98E035B113CFF239DEB12213E87F98492
441E57F59F4685D4492211222517BB82A47585D5D81C0B2DE3011FA17801263C
C8C866B77F225E4C6C7675A7A067BCDF98BE8C9CBACBEAF7D60CA40E02F35629
3E3A1FAAAE94AA4CBBF74F2916F6B993F50B359E03BD7F086EB0BBD800977BE0
5795A537CEE287B0710A20E2CA42079564F21405F6172C50B88EBE333CD3618F
B93684800C2CB0CEFC05C14DE8811FE7DA3AE81BCBC1E2E23284E84A3417EC4A
9528FF6C6BC49119FC6F85F119CE3B33C5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: URWPalladioL-Ital
%!PS-AdobeFont-1.0: URWPalladioL-Ital 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Italic) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -9.5 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Ital def
/PaintType 0 def
/WMode 0 def
/FontBBox {-170 -305 1010 941} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB5F973DECC54C8130ABE
C8E23C8067FC409DBA23A469DC7C6C4F7EEDC3DA588EE3C5B2829D3E1492978B
F91C30C1912183DB62BA489418A68C3BD44566603673FAFE6C3DD78FDFC1F6A0
840DFA44EAD8A5653DDF2FE86B8BDF672707D2AAC76CE376C2C9E56EB95F30CD
75B1E312BE777EAD75EFA21114335130DDC559ACC1A14454397984D624EEB43A
C7BD688E270025A34A912884DF387744462E4F666099415F25F86999B31B0588
576296579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FC
F88AA072958C75F616D971AFB3D9116E041EE7B66C39DA4481A97509DE7AC156
CB43C5A85501E66164E5FC61F9C64EE138CA0D9A0808BE0443CF3FBAD13C63EE
E7E39F1D385A453E8095DB2FF5914A611E11BBDDB04D6FC55D51B08358EF7253
9B8E1FE26561CD5CA9661C91D264B3810A37BE373BF66FCB021E4407375ECAF6
BEDC1561D701A5885F4216EC592958C80DB9B8365D66A8E075A88782C4BC6161
F6B5246F49B14E4E086FD10E01EDEA5D95A0F67D9F6D16C093CC98116B652B60
04B7FBD451E536399DE7A8D8B8E0740228524FA5CF81735BBC72B976F955FB3F
85B91278057DC1FA6B42FF84B9F267188631A0EB7B4456653620151073F4275C
9B80D71B4DA3EF23BA2811F90A844D2D4A18C2D3E7C75DC2351F250E946C49EE
1D67BA5377ABAE009B18599825EAA89BAB6B56BC1177B32B4863A004CC7448B0
27D9F6030ABABDDED61E95CF4D02EA9170BBCF04E982FB170EFF61B5F0A3E39A
E4596CB6B478F6EA85D464460C3E3C301813928D1A4140ED2931D06F55DA1B92
575627B7363A7B2F52C2EBCB003F3168ACEADBC274B460104B32A37A35E08E61
6B4C58ED4BC82DA01AE19F2AFD0CA670D4CD12464788C7AF3C22AAE6B2B67FBD
72227163E56D6B000CA09205E5DC3FF0CA6BA2B37E3BFE57D69E497510C9A84A
76F6A2812AF05BE4ECCE8A4C95E1CACFF6D389DBCCBBE4CDB35E9AC7B9CA647E
44F7C88874A4BD1BAFEC8BF60722713355D2CDAB5789904B3FF364F59BCC30D5
93015B4C63E38A6105A0E23FA25DD024213A61BD7765AF40D48A4E4075738873
5E9C7A100A3E13DC621926EFA64B88D997BA5C7B7EE0E07F12FF891AAC70CD8B
D221C6FA366C4D482154A17ACCCDD59B4B3B349146BE95607A9D853DC7E89A36
171E129FD3DE07307E654F802F8390F412B259EE394E71C5DB81E4274C6D3180
106156AA2D5B798924758113CF894EB28A8CC9AA47E6529B2B2DBDC0E8E0470A
88979A0D9076C69C0F2643BD241202CD2BC2904CB8B7DCA56313B998828CDE45
8A37DA4A2A263F77A707FED54222B02E04628027B8CB093E58991865751E5924
6825728359319B91633EC6E7D1E7F16B2DAA2DC8924BBFE6D9617A94D985DECC
EAD4372FB593E4E0C71FD738E5951AA7D2FB6551E91712F26A24863A924E7A80
306543BE55681C8EBF629EF51236027BCED24D0600F61FB1746F2706C3709E89
5E89D19FE884FCE692F06DB74C169CB5C33DD9D71CE5ADDCE021A7C84541082A
2FE66D6852481694A0A0E70E5CE0FB43E820AACF407DB268F2760F36FAC82E48
F1A1A43105912A559D78274189318C9557587934B040A99FBA99942BD86CE4B4
6FF5C69BABCA7A3C511EBE5F047EE68288BF3DE1225D981C287FA9BCB9A3F6A9
27E3BA6903B35183A80EB555699747DE2A252D5C9578091F53E88750944AA110
5951D105D651195041696C183D62872AA2923D802D94278A2835CCAE2F4D299F
67168AF7E61F19056BD1DEB7FE32A4F4EA6F97F06F469C78589FDB9EC33A8371
EC60CA1EC6E1A556CD20AAC23DBD644F0B3F94722F0A1B4D56F1159949FA81B8
9CA8C81756274E6697F71D328B75CBCD653245AA60D404B3187D0FEB65CF565A
912A654E29F3638C6FDF3A9C1A993DAC3946217C12D9286E6FD875A84589BE79
A66E6C29ACE5156971C30E226B3CBBC1946AE90F8F22F5353BBA2FB1EB179511
1596A7373812DA577F2F42423A83972F2F36ABC8703D5AE866D69E7127AC4128
988F493604E1BC8DCE99225BC1D2E7206B08A31D0797C7D0DFE11C16D853E5A4
5A80A83B45C36FD67DCB66EEAAA47B4E9F707C6A0E121968A50773E3DE3BC9EF
1EC7413E58486776B00FEF2A35214E9CB20A617275B4BE4E7B808D3B1EC2E90A
742E6D2A577185734A8D72DDEDCA10955949EBD7ACA2B41D6116EFB62846B8CA
23B1F4217D973AB8F2FE70F2A9FEC30ED77252CEDFF5033EBA73C85D40182724
9B2E45E4A221277810BA60E2CCC2F206AA2A7E246EAE8A3D691E544C2BDF4154
522F5854E82CA1DBCEAE6DCBEC08F0D813812EB57F840C0C5A817A72491DFA55
DC3A898F11E561CB2508D4CC33B74366155DFAF2F7CD7534A5797E6CA76C5B2F
2173591D29EAB7E726209F29DF526209B01DF5F9F3A622B13195D28ADA82E6E3
491E0D60EECD2C6DA9E20DF14E732F09AE35EEA07923B5F4DD67DD7AF66DF5E5
25250725A95D15EFD0B5EC317437135C5AA5C89F08E56C9637125725BF8CAC54
73F8755B70B204A8E7683C5AD462F825F1D3C2181AAC6C27FE1A95F97D94152A
9A489FB0D6253756948A06DCC288F0FE1CA7300FB80AACBD86E19F7CB00EACD5
9FF51779F408B04948415F94402A51664C11CF6924A9898A5DB07028C227BC3A
ACE8D620E5F6C4B938A2B4AE6E4F19A6C7C221A9736A9E7BF4CF81060849E24B
A2C31FB62D42EE36A42F56CDC4201396AAF3E9DECCC3281BF409F0F419BF73CF
51E7FF0664E17634AC9F79779123CFD883C8AFEF2597F2083699F13F193F666A
DF9A2D6D3E79E34050C3EDFBD923799A53D027DF2F51FFF18496B76E5248A3CE
CAAA7BBB3C7D88DAAD64EA4C7D1B861CF372B735FA56029E92103BDE93E7DF94
564A140D982474F4FBAFA6899D16224E633F16FA099A45538C9D5AD428839A8F
87E3FA1A4B633CB6598F3F77F3F0723B3CED8B0FDFFA96F38E5F3B91656FCEEA
5466934B7B24AAD00AD1E03D9BA945156C82BF0A3AB246BA724F69FEB1EA4BD5
C202DE3F3CE50081BC03CC36A004178D30E57C7FE0E41CE5C9F2919FD27DCDCD
F03557FDC0F4A6D3E5CF88F55CF1F19C1000505D93247D92C9E55AD9661AC5A7
BD2A64BACF3611C0863F70CDBA10D0EFF5C3D4965B5EA38EC42B436DECC3A33B
BACF6FCC14A7883C82D27F6ACB1C9B2F9D1E495E8D817D37DFD2CA33DDA0D3A0
7873B5B0689EFBAA58121F4B8AEAF53269D83B9CBB71F24A1346E0184B7EA670
D15C34F2719BA532154B51AF9A70F8E71CE392D8FF1943E10792E4096DCC5BAB
8E5CAE0B0ACFCBC6BFFBE5B370F52E38E750F117A61647C37E846906ABD77DB0
9D0EAB3B1214182E7DB08E59E004E2255DBDC4E0A9FAD85863CEC1B6C58479A1
DDB40393AD8FB19DFF6C96BD3BDE3321BEE521AE6E10CF664940FAFDE474E59B
2AFB843AE2A8B12D3CE3BEE1CF7596C4CD0D465DBF44E16C267512E5FC0B1672
6FBD945DDA5541C8DDA7C7C36002FF4DBE9029A1E79BD5F165EDCCF293E2E638
9542AAEC2E389E9C3790ED94CB2CA47D39D00E83A377DB2DFEC1778FA7B90AD8
EDED8B840CB952E7BEDC0EE6C1BC7B69B110DBFCD3D67140F16A31253C0BE465
6E35FA02FAF5101E1AE6B7CB286C9DBE65E599A5E23CC2A3BB44438C741B7954
6B6FB5CAC135A79EA5E3D73F78E9ACED9637C539AE998D80E1F8486C083DE97C
76C16514FEC7F8AF666913C95B1392E66A1C22FB5658F5B83080977E1B85F173
0452A8FE89EFFAECF4E753A713F08859CBA75F55FA2173C32727863E859CF82D
FCC137248BC9EF074637CB876482A37ADEC6B5D27A5D39FCF0A6AC30EE74060B
E1BC56B2737F4708AC8A56474AD799D179352705B663A86AC14CA66E5E372256
E190AAD039EEDFB4978B5F304889A0B008C7C65BBCB2C726E2EB6CCFAC2BA3F0
0C4C2A968520060BEF76E8BE8B44E0A79150BF43BEA591068A7B10F1EB394AB2
1D1849791E6DCBEA7DB02FB26FF4DEB35C1C00D1625F3DC260AC38C40B30FF5E
2E6B04694C1217C5055806937712C50FA44586937D23FE5D90E5EE54ED5D47FC
F19F90443D996FBE22CDB47F1447C61EBBCD7164DD895125E4878F915CF508B9
C1AC289AF93ED15CB227CFFD23A6F7EF4ADA5F1536ED6A15BB5E61951DAFF2A3
6A004A71161272E761C6C940133F9359413EE1D245E820EC0195E91BB7CDBB60
19EC8BF894334254229A26FA3735C14E263C15078FCBECC350DD1870FF5A2C94
2739DEB8C7E86DFBDF2CCC127B35E5059CAF4625775E6D99CAB59B930EEA2AC6
03BFF1FA0A58ED8AE0998E25DBD9B2E6F168ED210035073CAF220B8844753234
0E24ED18C7E2FFABE0515E7E3892F66DCEB275A2A4AD1E81A3959CEF584E4532
9C85747C61458DF4819D5F0F662EC0FD5EA9902FCB47165B09710E7BD23C6AC6
DDD2C81E6A9D0AF87B991FDDF0ED7352615CA62101C04648A4D90E5BC6F74096
E00ECE5A490C8B34BCC0714CD0B2C1D8701C5A549DA089B006B69D645001627F
7D7DF036AAFE40A2A51B7EF1EB0B63E9A141C632ED35D57A330C9370D1BB0EFB
242450D579777DBC85BD0FFD46F405BAE00601E0AC56D4BF37E98D7BE04057CE
355BBA9EC53AB6E04D707C2909F2E640F996D527FCF1088A69A2B740580263DB
C77680618C923BABB61E0EB001BA1E1ADEDDC9836CFB339B8AA19BFCDD6F30FE
CA7420BC0CB5EDD4D43B230DF2369ACF7EE9E12C08FF5B94E52A9114F89A71D6
798D0736591DD3ED47B3A1663A88F8882D545CE3BB6C8E64CEB5DD9269263EB4
5D95E78A065502C6C753703FC4A101A747A97858C228A79B9863D2CF91A03FC4
59074419E202D64C232DD62D72AF61C99A0E8520A6A90391B260B5BD05FA5EA9
1A095C1B5C287C776BB9A96CCC49D381122B97B49A218868E3EE198860BEAD0C
7048655F00D56E4DCF41105DC5E530313F932E208924998E6C31868269516F63
CC84A3C6A182563FA87B6A9000DA121C010A40A2D04B27AE9B2F6BC16D2D9F44
364D8F5FC82E953903FCA1097387329C47E58A0E5014E9412390401290F43BA4
55DEF5A21F6ADD669AFF1099E3D76DD5DEA6A85A059A820FE2A25DED422E0BB6
39254079B5FB0D28629C4C30CC3BB698DA95DF8AA168A21A9222A84F4D412B79
E8BE5520638A538DED92CC65DA00774AB270D68D7BF94466B0F6E04CC4732D79
AA3F7FFC0D0DFCFDF130BFC4BEC8982BE9A8054D3D6B6359F9C1F91F85C4119E
68D6A3F287A05A90D4E8067F9C12E64FDCE631513E7A739D6CB8B3A9C4CEFE86
EC4BE40CD9E073F041A94DDDFA9324AE71306EFE51A9CCA9C3D16880A8DED0C9
C7791C987AFF884611690B6A42EDE811E52102AFBFFDC05AB1D87BF05D5B0D92
F7D729463E296B7F2B4C9AE655AE15DC14ED748F964C0DB3EAF2AB3584324136
A5163F3514C139941BE05BCF136D8A2586C83F29DFFD42DE8E35B1800246CEBB
B54F8C3462FF9598357074969A1FC95A9C3D0CE34CB2B48DB39EAD4D6A893919
4DB0FB0DEFCA4ED7D68DAD6C1C9A9D92397F760A3704F53CA8D802D20F3953C0
807B3E840E1D1D755B40C834FA1B7AF82BFF29C668B8081D81891456B5C2A458
062AE8936A1EB45ABB32D64FFBE3475AC402B3DEC385C593322FFFBFA6459AED
B6C7A96847EF66B919660191C51B9D6979D861394B757231173420B130353EAC
9DCA9D835F4B74E77A542ECC85D27B1E7B2892E94414ABB1135A4643102DFD0A
FCD8682BE5CA11AABA54285DE072C9340589046D29896E8D1807150C2282F119
0716D068C50DF812D8CF9F07F4648192A7EF6EFE726C5803C6661BD18215AF41
660910B4BDE9E7492FC447504FBCA85F944CA2938FD474019BA359F7F38A6D94
CE92F4C7589F8A436D3D6EB8485D8D31470AD56B208426982C0CDB79D45E15A8
19B40FA880980119B5E684BC207450E3273A5A03173AA590B6C92E28D15C0ED8
BDD1A30E7692524E4319D54A79AE361A8B6A38C7CBCE8F8EEAD34B7E0F952038
65E3627DC24E3B676C1B1A425BF7B0676C9A797CEC325992590FF75BC7EBF8D9
45AF076E6EFF9D5C4C32C529D1E1AC71CC81899899FDE180793908CAF66B9018
DD7AA1603DD842C69C78DF7E22AB2B89FB4F0615D8040724513DA469051896E3
A2FD2398930E5911F3E581C44F939FB25007777BD6EE0E01C625E429808B2D0E
0AC6178B1C4DC57D29E87A9489D768FFFF49EADE80B94899A05ED6F3A1C0A207
DF2F4F06A47AA3DADA904CAF2D8CB7A34AA26EB7E5275582F7A2939103D58682
CC9ED169B3582C030C9343D404211694AC7CB6961FC49DBA6673C707C4F13E83
3E87535CCDD8538360B58E240BE1E941CF7170EB90C3EBB3655EE6006AB36656
9FE04F95E458E1D4DD1D38766B6AFBCF3CFE8926A28904EB2D5986B5BD875EE9
80E0393405F62CD7CE3FB02BFD3C100E7A65751929D0797D1C23EE03044C5BEF
27D8244C9BEB865CE8C031C4CF8A1580CC9FAF439E591AC1624923AE6DB8994D
D4DB0D452EE6690A8ACB5D31AF98893672C3DEF7A733E839622CCF9361593316
EBFFF8A418D20D93D4BD2501A30A61A4A906FE2791C7CEE3356119D1E4BD658E
9EB5C64396D14E541FDA2EE23AFA6E28FE2514C19A900BC02CFDAADE9A502663
76F3243722074E8876405E2368CF3BC65040648818172EBF4499A4E54AAA4E93
68A2B84C9E9BD86203BF90AD076077BF49F20E7ADF22AE9612796DEB9138059A
4C12D608FBB56DBB4892268FB19A5038B92846A311D5E9443EFCE4D1CEC49379
962163A2B4BF57C589CE3DE6B2E2B8BFA490837CBE55E8818A643F3F3F88BB22
7E90541B15D490FDBCEF4BF28DD94C99136295744B66327E4D7554EB52331622
A8090D0C2F709654C55A596B7D4F164FFB0C46C01FCB7D76FE663A99E6465531
1B952AD69AF7312325919122800171B474419D914DDFDEFA36EDF8594A939A25
17FA41ACD230B1E0CE76E289C42EAB07B0F60457BE7D9759D0213A6F36607CC7
21D6B87FA453D0E822E9A94D94EF709930ECA646B2F07D8358D48D0A768B6BC2
283A5010975536EEF28F9B03CA4C49221E676C8467B4ABE8217A7459651CC8DD
6791A341BF41A595EB76C02EC5ECADEACC704FAA5A18D9F5B26CB72790991B10
447A90DED21E55B42B6D4AED6EE2091E33FE3A23E68BED36AD507701D972BAEC
539741F8B99CECD2737CE83866B38C840DEBB6211CE96439F8BC222F59724B11
5086BBBCE13DAEB47BF1CC0D4E406E63EC6F93991E948F1E6FEC641EE0735D36
40FF126847D225B597E0D475F3E0D58AC610CDBC979A265C946FA308B9365348
0A061AC954384611BF6D56A1F0B72D203A7C5FF3017508DF9821E5610CCEEB0A
4DD2F9F9347E39F0BEEDF5984C9715F4C5E204E06DCB2A6512AE65D97CC57F15
D490A70F55BE838631CDFFEC407FB30602E7316BC73E417A9B3B2FEE9458BDC9
C89A8AE1973C99EC7A5333173F5F0F7947C8F90709A7BBAC4E2CD6F54B4A25FC
25AE0F5DF9450C8CB4656C6257DB9470F5D7563CBE15CCA876D054B59D76B5A6
B02F0CC3CB1928ED3C6EACEFA7D47717CB54C48D4AB617713273983F31B5BC75
1A6B384326F24D458543A5A27FC1921B9E9C88EDC62F4A1EEF157FCCCF5C66CC
80448B1EBE9CCFFCC3B94580BBEF7C1F4F8E7782F6F1ABCABAD9EBC22A55727B
F40CAB44696D80CF4535A7412245600785C7B52C4EEB47FA5FD640739E1F09D5
C5DAA85E69FA4F596B104C5804E7FDFBB5D0A20D24A42E96EF043E276CEEDB1D
C252214E1D0A486278FC9D412149043391C768E5DC9F864801980F44F2E50F09
1E0098AAB73D3CAB735893DEAF5D02CC69F425FCC37EB4B7F69C0B77FF5D9651
D08FC054993075C5A2C7CBA1F29A9B4823FE94E940093D762456E58B05A96096
8A73608643E0A120523B68142F7119D80D5FC8FB9D84DBA018005CED081AF5AE
85F267E162F3C87BD90931695E2C473C6EC7AF3A9DF7168137770443B5D897BA
C38FE33F7047FADB40486167706041D8E4C8039C0EF935042D3049867723AA95
51FFD58E4936317040EB171E7A77F97F4E08C8EA82E98341B6BA6B0B604A277C
E3950462318057F893A50B1BE89222348D7CE507F36BF64173AA1D106CD4BD1C
0DB79FFBD30BC895C870BBF733C7B0F74F32D282586435F5EF207A09A1D42C46
62D6403E3B41787E1449587E28093E66A9837BBD992202AC1D215B6637907005
53259DC9ADBD6ED7BE07C01ED8C23E5EF803018D0F42D2C052759D07A9DC963D
A62EAD21774B6E296620D9408BA6576F959B2D37C1BA3588EDA55F9979679855
446748AE3F64C0292F4CDB448BD6D73CC6718E452C8431CF0BF8FEE0940E9648
06391EB100B755CF5FD85E5E4BD63179613EDDC287AC8C2491221A4130B3BBCD
0099A5B265CA383359D056E3F40CBD377C4F37096952ED2F1DD38A57AB13DB12
6EDA4916D2BD24B442988AE5D946AC80FDEEE8420CF6B478F73A70887004F396
CE83F054988E6BC659AF72DFB2FCC6CA510D16189213EE3075854C9197C55B7B
B04301A34DDDCB309E609FE019E2F5C7DEC5C291D1360CCF59EB38EE2EB1237E
1392878FC2D0E41644868BEBB484099DC792E4628C206A28FA2B6163B8F3B732
C6C20DF09A257B9C18E90F08B7EFBF14899E442B4902206B5809F06E919B5ABC
1F4D9EEC2701095126C265112A6D9F3934B71691830511E27EEAF423AEDB277E
B1D70783D1615DC86768F5E763BBE7DFBE116CFE88945A17F8A739BAEB3CF03B
65D7E32B4C6A5E6613B8AD5D886B7D046CEAD2F6C29BF1E997B920631BFDC689
C6246F99C289D6EC034C10A7229B1EE14D14267FC316FE59F158FE13F4DDD0AA
AB1EA8B6BEE00ED619B3901A4C5B32ACB732416268531C5792FCFB8D5E57C625
5FD303D58311D4982E167C8B1C3A9FF720C5F158502CDD1F6E63952FA1362ADE
8379E117CB466B3B1CDA7C166445268C5A9F02FB3F38AEBDC51BE6F677E460DE
73C56718552F137D3F3597F71B0939059E86D673509EFE81AE9BF23E82FDF9C2
96809F091B1FD0FB31D709F7AA26D7EBAA454286ADFB14E8006AE6566C323FBF
DCE27EE1CFB3FA6DF18363FC7DF5EBB825558AF48AB614459A383275F46B0E17
949612B89374A91445818F51C5A0775CE1A0809D5C2979D409E4D68BB6DFCA01
35DD2C9F24C44B84C69898E30FFC3E8464296E8C6A453567430EDC6802C21B55
61DBC1B19BFA4431E2C5647890BF2F4B734D8F5C5A0906A7708DE6359942925F
E084E097902DAA32058ED16528D28E506AB83672AF3D39D485D68E16B5AE0ACC
DBD3B9F8AEB5280C0E01296A4C3B31FE2863B7102767AE5592A4F5985E18BF5B
2AD7B2B19A85FA917C11867EA2B3317CCBA9CF7C197226AFA487585D475D6E46
01B9DAA4E25D67130F4EAD13F80359694A34C6598413C93B8678CC37C726AD82
4E71B51CE8B82F99E3EDB6D004BE6A3A83F2E18CBE2B038AE2C62C87BE867D65
BB51BB429413D803A7FE99ABF8AD9D6391BE0463718C7357BB34ED03F7D42CA3
61094620B491DCE3489FA322F968E512AC8A5FB7C4DADB75C72812077C473AEF
AB9D2A0AB18FCF5A40C9286D069ED36E217AC161371032BE4902BBD57AA5DC28
5EA30F18F418FB1D9675E87B3425FAA0924B45CE80295A6BAE3E06C552DA11E1
5D135E7C5993472E8E1B01705929B12CFD26E66C5852C838BC3BDB4D669E857C
7280605EDB2DF877D8E0C96165F1DDAAFE732B4D2F88F3AED9A0475E19517604
29E12CD2E9B0ACF3AB0324616A7084723F04FA738BF61AB70AD1C6615B51881F
B83E438FA7115926B45A098D5FD28E46480B0DD99F4679772820B94DC7FC28AB
086E3FFB5C4B56B45C48662F6B272B13242044C7DB909C705C3684DEFF82699C
0F42B3D41AADEF9B66291CBE97575EBF6B7F14B8887F576E9D5C9F615EC830A4
3D730EEE7E8463FFF7B0A03F7B5931AB2418F069ED55B1A5A4BB7B3EC68B932C
ED8C170C93B6508CF9AFA3B995C4006E04619B81578C0EA3C3A72402DFB9B35C
8E5123EC4CC6B6717E8B794AB2DBFDDF3A89648C906439AD546D531DC6F43B3E
523AA8313C2A4ED52022C5D8E5104D72E98CADD70F81D892B4D2DAB0BABA6621
75C52E51B3ACD9809CCFB180F8017A84BA6BFC1BA5940ECA3076C7B57DC325BE
DF738EB6D550863099C9AE6A1D3DBB5EC929931E76266B15CC8303BE2A0AD1AA
715ED5ACCF13AD946F7493DD611F3CE69BCAD8410DC9787A8C558FFC58439C05
1E5CFB78B1758D1A87994CD585A8A8560DE20C373A057CD51647C683B815685F
8DEE7A7A5D20112107B12DF7108DDB96A96B13CFAC20C428579113EAE3714E78
F710ED5B9882BDC14A6567B37162EE6C70D2D10EDE4241C123BD9969AF637E04
D931F09D02F18C584BF5F2330AFCE8FF92E2DF9B35F469A8BD86B652E5E10EC5
E39BE6790BAADEDB6CA0F8150494A7C524E6E51ED7505F69FF85459A650DAE96
72E28ABED13557F619E50346D336DE665F64EE7B1DBF351FD970B1FD49E28DE2
D87B5599F8695C7490647BE595260BB70CE0687AB4013FD10333512A42674B3C
3B8DDE1813A84E326E34C67DE72985041253E76AFF78B3EF3A051A1EBC2C3852
F0A4ABF75E0DBF780943774832ECBDB147C54FBBD70E578DD1B8E0D0CBFB6DBF
19A81F088C9AE16443C5E70BC18F029243D6F681B4249968D4F70165A8DB7B3E
80326FBBCA7D915592A91D4AB11A1C8701545ECA6EF2160CA7018895B617ED93
853615C97E629FD0ED9D4987C1C3F19BB1DF75F985EB1A1CF159D248C6D982B9
08FDFF6E6135A30D1F0CCA7F0A4005587C61372851EE7FE6EB503074DF9C6FAB
A7F3D933C09C38F2C2F487CA8BC0696574F4D97784BCD075E1720BD45EC3231B
ED6F014A7B7CE4D18AE1419122ED11A11811116C45649029E8664B1EF5856534
B80E1124ADBD8229B98D35736FD2CCBB0E36AEB6643C283A61B6E9161EA6C1C3
A5B210E9C2146C0797AE355583D824B2B8FA1D7C83B6356A4F1B01317BA227DE
03A9FA9242F6CDA09114D9E0E6E79F86DFBA81F68F8C745EE041F16B12624442
13B4FC74A1DBA9ADC2B4D6E38CC1F7D36D1F03026C5700277EC06FC91C453613
AA0DADA3095C755E4EE850D961FA70CCF2A9568E3A47FF5923031E7BCAAF3A0F
C2DDA3108450BDF74E5373FCD4127D1F4EAA2AB5EB18CCCE898C458DF1F326D4
F236F6246B976FBDA2E11F333061706D28D3DD7B944ADB0582A109051D378361
FC8CBC09CF5BA8D6E5C1C149D38E4579559C969AFFE938F608AF10E3B31B98C3
6E5AAA15FF906E4AEF8ABFBE2D30D00FCB4A82A25B1941359C0D043F7F3C7630
66FDA7B127F68F2914E44BA101600D1A0D3251BA7D3E82083FBDDCB2252E07CC
9FACB6E3F89F806F12DC748D8FBB08C5C48741C21EF9B9265A15848581F21DB4
FB64B7CEA62AA27DA04D2DC9F3EB1838B3E3E37097799B5DAFD6259565C03C0A
3CBEE624871C984F2BD4DCAA4DC78A5EAACAC731049FEDCFC1B2867F81222FF5
0F5022BCA646B2E1C92C92045B85A4D53F194A93BBD0BBAE51B1B1A3A7076F22
569A9BD942A14F8DB4EA9BE59EFCFA0E04A901B462B587C2B3729B863C2A698E
4F95DAE59B9D743393D4AAEF87997A5A98F36874F1A5D26CA5CCF584E4F33BD1
D1F4976E0295E16892A291549CBE90BB342872080EE956BE97CB6839DAE21B1C
75C0A78B860E087B51FC85C2AC573F58F970D09695A036876F2FB93A5BDD52BC
FC546A5AD2D4B0CC85BBBDB938F2F2C64B6CE0945B983C272024F9FC6F73D17C
8F03F5F2E8B92F56EE568643CB99EC6378544716EC8C12E078F2C319C0D85961
435FB60F72EED0C271256525D431D7D6392933752C203EFB5E7A4BCBD19E2A86
6D13B70B05BA312F399D1BD5F7AD504330E4097262FB4A86AA882AD0EA3EEF45
9E995E5EF4F3D2F996E6EC16402EE6888E438BC3CC41BF8C609DAB011B52BB0F
642870A1C2BC8A391CCA1F6BE1C09663C644A6B0EA63877A315A41157461C269
9E7E4A82AD7C61DA6E68369324D529447BB4E3F0123D22EA1DCC48C35F2E6D69
8CCAA4DBDC3F7E0608ED0BF9CABEF853DD01623E22F77B9BDFC531BF9577BD6A
56A0F2A6D82587046518C3A28908F0E82DCCBAE879DCBECB57D2697808A9094E
6B8381C23D33091189843F346668B97190E93F4F8F97A3088968553F1A3E3133
EBE538325758214CE9B34C8CAB088F07CB04C7AE660601F71707381374913A74
1D441FAA28ED577864AF4E78969434FE6CB0E6E76CAC86BADC061C876E68F579
37047AB540D33F586740B08AEBB2D085C52280DBB6E90C8934845945F9015049
744E109FDC27E27A3A825B7D209A24A67F164DA90C38CC5BA113642D989CD6B3
1010175A2DC3FF53ACCB292A867892BD1B1CAB42D7AFF99C9D171F49C57AE4E7
C9B1CE356C3079B29055B18C584F086AA106C9A7937BA887470073C05F68D22E
8727CA45635F254BEB63C0469F9DFA69EBC0D13744F5EC49A37DB28EE9BE00B1
03298CACAF2C3A8C44166ABDF5FC2A9731784FF6CB631EBF5575B12A909E7A3C
35E696EDF723F076D3534EE8895B9B989D019EC0B2C68DF19B9202F9D137E2E6
552FCD25015F819BD3E9B6CD55C709711E92A6E9934418E6302C0AC1C7CA428F
508E06A472D3DBFA7A0E9D1825C9A75F4B19040834B26BBFB0B0E2E4F87007DF
786E744650A6F7DFA5966AE8ACF1D96CEE1508026D9EEA43D6CA872CF6728D15
0E5A052601AB9BA9D75893FE7C57FF0F26685624B7766755396422C249D1EEC3
F31CA37CBA4F59F76D895DA85A4EF4FF73D29F6735CE8EA94D8892CB2EAD3C36
8C153FFB8DF1E2D5EA3FE74A21C15D4F287C2419A8C110EC89539918AABD35DE
34F20D884B720356CD4097D581AA90F1F6D18A127EB8B469F9CAA315D1E8E2E0
15DAB9578419E9152B3627E2C3D3467E8512A7DD84D59ADA537553DEA088CBD6
6FE85B86A18A049136BED978AB429AD2E25CC592E4206285F95AFE377A8AE97F
87DB0E63688923B0F8EDBB0C4626C9F7C2B8D4E38EB82274BCFE2E9D196CD05B
B546A31F775B0456A2FAB80F05FD582732F19A7BC912EA7DAC1AF600D8BAED03
7FD8B8F02978C1C09BB472C29BC36248BA8AD72B670639606BE671FC0C58E4FC
6959BB5545E1A6DD781D5A2D4B14971C68903970F856DD860C9E85A0C4921D8D
0BF0E805F4E53503012B0E059282BE6C98121BBF444B9B4A556BD4A2012D0ACD
5AE9B3AFBBC08AE85AB8956B6C8D89DF63FDC56170975283972D719B3BE88214
EDBC4D1476655A19EC1D3FDC7CCF36C5C6D464ED4145DEF918D07500C158D889
23A868C24E189FA6CEFA1A064EFBE3A18134D772F0E6A32614D31CDCA482A683
3CD9B2D0938CA55B139950EE3AFACC417AB6229E37DA5B3EF02A7AFE37BE7D38
354320958A678DA330EF481D5C693B4A0446350199017B180CBA9C9109C4DEEF
F55F5F0F267CA11CF28BC08B29222129419245788AF02464447FCB4A817B86C6
F9A704F530001BAE35F6E3F7BEE8674DAC9A0CBB713602F00115719C6443E8F0
1E84AEAE0FDEBE29152342605A10E9733DB6709168753669718211CEB6D750FF
C2BAB78F30AB80F959CCFD7FC49544B32115C554DC4F4C964EB124670CD9CDEE
7BF4A94BFB6B8E7BDA7E7C46AD5420A64B07DDAAC71431DFD5573A1C5932D1AA
FE75E3D682E86A5BE496275F79E82EFE9F05C075D28C7B78AF647605C3CF4300
207E8BE8C118607F1551E5A2FC26DF64C21F17234CB387EB5153C96441F00DB2
7E458414C809E0AA9CDD374486FE59F960212842643A52A049B4A1B226DFB431
671F322B87F4049F2F12DFAD0F748629E218682D2CFC885BA79FF99E3E923989
B2FAC492B724D4072399650CD0C811FD470AC86A7787EF56EACAE1B1F25B47FD
55F637789CE3E6E97EC0A959805A145F2192E38A8EFCC84F58309DCD0A10427B
7F04A7D03D40173238DA4C88EC9BF513D3A8230EED623F1D615387AA053FD0F2
6DA4DCD624B6453275134465F045AC89C141ED18536E356A425DDF148823468F
CB88F86867011BDA1519795FF5EC0DB0FF7E5C15DF4FEA39BEDEDA150A1CE10A
5483EE575B3C716A28892F44B9A825F9BEACD1B99A841C9AC8B12CD56870EA3D
6BAFA0306C57AC48745E7D8C2088D5638F08AB03B4191A9379954EC70AD3E3EA
FD5654816A5A1F6C8336FF0725766F44234B6A760BDA97CAE897D9FE12052A81
A1F77242C890156A7CCB130D9FE287AD81D4C5BD4CA1EAA09BDDC0AF0CBF4925
789233B94EDC4363A8BB6A57D08CB0105730C3B4E83B65B87FEFB15A99C72C4F
289247B1EC843A51C1274E3E08D0C8A662DA1AADF13DF1DA1931AD20CA627AF2
A5023F9B8D3C9A53B4403A7B8323C690090AEDE0B56D390AE2D366EB004BB312
702E2D0F36C38D06C0B4009CF6386C2D88C8B2AB3BE2EA6A19827CB6B83C6913
BE8F7225BFA8BEDFFE89F1416367BD69F62982D4E3298B3C543FB4FD33951D2C
DF9BA29E32549F96D95956DBDA15E26811C010FDE687D1CDC76EB29953C6BE6B
38E9752E57A73BFDB2A2724AD51A890C97986D3477647B560F3BF48383B9878D
67C2F258C217D6F1FC58B2BB74A66D4C386FCCF5262D03B7B6FC5B355A2FDFAE
164C3FF4A0958437AE2500661BD38C0D833343749EE85FD305F284A62555DC89
B9CE538106C287FEBEC16C38FAF8CB61DD5E0BF5F03924238D1CC8F310BEA73B
2C861D4C6A960024169C3013A1479EFBDCFDB985B7319EE00B0CFD6C617BDDBC
0CF884DCF5392A1D55B781F92A4B74262D772919D84DF987734D219072F85E73
5D6DDBF65DCA3B30AB819075A6BA7DADD168010BED5BD45170C3F5EA089564E5
40C42D2DEA99A238BB07E6DD10E6E66E39F0DFC5C203FAB7EEF9051AC831D076
269E99F172D615473FD3B02518E23D17FE750A6C113E44E2E2A195B57B28AB02
7174C6E3E2EF17D843CAB064448594D6E8FAA8F9B733828DE7E3C522D1D3D89B
9CE22FC2AA86E39E57686D7F0C4F50F1438AC3E4CD8BA1865E083C1B57D4F182
383C2790BDD46D91949CA8918732B1A1F187A2549265FA0849036131497BE5B5
717B73F335D806C61FCB688661A92436EFA7532A32F557C2922FDA6428FCEF45
1C35869990DC1D60DA5B4CA9F331E8395A290549FD26B4C981805A7A795511D7
0D3B54D5C3DA12543F30FC9845BAE168151123B33B964808AD6D5111F1C35952
DA89D387420CFC849D3ADCA515A9A1B50A7E03705575DCB43FC8088692FAB768
74F6C353F63EB3088DEE9FBF2999D9A10C5ECE77A5BC263B150D2E7061C141D4
79CFFCA90B10571EFADAE0F8A9B4A43C2448FDBFF4CF4A07BB7FE03392484CB6
B2834B8EEFC673304EA3C19E84038F14B486C6A8196A3A3B0B846E33D11769FF
184DE2E187735819227371ACE1144FCFA0F96C42FCD8CDC4771C9EB20166C622
10DEB87B94056D90F65DF04C25FFB654DA4B04589BC16F2BEA9349FAB4FAAC97
33969A812729B68D450B10F64AAA564346C18E451EC1AE7103026446F12E7C8B
586F80F2F6B64467D4DC096524231D2176E54DE310059674EFE3EC3EB7FF108B
766727A31EACAD52D03246C5FEBB5B687E9376C6374944D3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: PazoMath-Italic
%!PS-AdobeFont-1.0: PazoMath-Italic 001.003
%%CreationDate: Fri May 17 11:17:28 2002
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.003) readonly def
/Copyright ((c) Diego Puga, 2000, 2002.) readonly def
/Notice (Copyright (c) Diego Puga, 2000, 2002. Distributed under the GNU General Public License (http://www.gnu.org/copyleft/gpl.txt). As a special exception, permission is granted to include this font program in a PostScript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/FullName (Pazo Math Italic) readonly def
/FamilyName (PazoMath) readonly def
/ItalicAngle -9.50 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Regular) readonly def
end readonly def
/FontName /PazoMath-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 98 /beta put
dup 99 /chi put
dup 103 /gamma put
dup 106 /phi1 put
dup 121 /psi put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.00100 0 0 0.00100 0 0] readonly def
/FontBBox {-70 -277 902 733} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB0A7F85C4
9167E58A181840EC46CC379EAAE07071FBD381C7EDF50327298FF86A6A4F6812
2553C2CAF67371991CB73DD3F08A7BE3D12E5D0B885AA74F37D1940EEE91E918
45D5847CDBAAB475B142774C14C38D20D16027AAB426CFC43043B69E67862958
8D309D463F6EC259BC9BAB2689D1380DCBB972BC5D1C6C0E70024BB94743B0D3
0E708C018C6FC49FB3675CB4742FEDFE96626AA9EA7D3C796CF48BB4AA39B8A6
F6CE05666C879D0C0A32D94DD56B8F9D70D13AEB18E9CE60CFA59B7C09A1315C
F5CA850E22F7A7D830CD703ABA72AF0809353FBF829BFEA6DC6BDBF71868E50F
4FB5CF3E74205306F4A0483E4392234521E9BEE73DCC872013FA0C00CEF2FCE2
56118ECB17B68E6CFE34CA1ACB4ECAFE88D23CEAA9A342E6F99DF3E6D5C384B9
73331941B9FCDC23DE031D356228C697FBA2B4B23D1F6666CD4B46786097125B
BB9405A45FAAF63F5368C50330336F4B21261921A08C5A26FD946FC76DAA4D31
DE30F498228E6805F19356249B0CB284D0C92F91C19B50408B9A1CBCACE3A2CD
13642CAC2B58B5C098805B8D26695ABFAC108093696675CFFB67877D51E33527
8A9A4191C6A0F004CB20C4A34BC4446593A38EC5CF591C6CA42E6F2687735A3A
91BA805B7E95C85D8B19F58845029CC7F63FE860355B39504ABBE922C21E84CF
0223052B9600CBD2D7F195ADF94FB5BCFB53393ABA60795FA7875C01CBE21F84
3DE9937E9DFA1FA1FC62E3D51CC8F9BD7B033B181C2E360D4778644FE826B56E
67BBD6442947964BA6234EFFE258C04969109B86BF934FDBDC3A2EDB5A22A727
47C69DE261E264E6D19CE391C9812D7953777F081C42F90C9A7A72B39A1F0DF4
B294926C617885AFF629567C9F7AF2CABC182BEFD7EDD2AE8AA82BF9D60F2FA6
1048F1FCA7F17ECB7CDB1E29C436D1A232F19E436B8B6E503C2E481755CBA7A9
8BC9F176A27F776F07A7CA94474DE1277A94E6D20255339FF569DF7E17EDDE5D
39DA2DB64A52F694A638F0F8C219CB92AE0B4D757CECF555EEA6E35FD7E5082B
B68BA1797A58AB12362DD1EE58216467D0BC24C0033AEA39A983E4ACED244E5E
E11466590996AFF30FE0843CB3324ABBE848D8C68F1ED037F1A1CFE6FA3B36B8
EEC999DA93F9BAA26EB30141D204F6FAF2D5E0C7A590D6C817424F81E85BF788
1E198C956F22008E81353BB2131A8F6ABA7456AF84581B35DD53F99E96005D40
B3D072F7F84ACB436A0111F8EDC3A3B494F3809BC20E03E4DA37DA7FABD009E6
5BBA5AF39B237C53D32176E0B17A5F655AB09BE3DB0C8FE861C3B9182E928185
24078C0361DB2F6EC733F5EBF4B339B9233DB80680CC93187A2D8DCB4B75CE8B
C658734CB89DDB09053B640D5611AE1A5BCBDCFC8AFBF4EE5E7A2C6227B341BE
13F628CBBE00FBE2486B329E785A8113B00497A08154752DCC6B99EFFA417DE9
03CEA643F8ECBE4C52A10C03486C133C2E126D63B329E4FF36D1D478E7E56F6B
BD4476109B5DA96AECAF3A445FA0805AE960D06C87661AE6FEDBAAC6BBA86ACE
DC40036200C3BAE0532181AC959746FD4EDC533A575B32E6A9A58F9406572434
1F907E3E045A1E8EAE967B6738797AFCF77E5C4A3292CDA8289860BF8A14AB6E
55B0B851D2FDA257448B557E0E3045C80493B3ABABB911186600AC62FEFFF4F7
754FEF09D7AC9FEA3E44617753BBFFA3EDF0966D4A7F5056F35A5681980B7728
5AF53F0C37CE00142A9692805E40C79A86D8858830DD50D4A0FF28CBF3E55CCD
801E9C2C7D246C6BBBC779F84B6DFBE0E673604D21ABBC45E5D0C0F7D8416730
AF4BE4FC931E965594E0359BFB356A8CD7124C119706E8F6070A92ECB8564959
6050EDE5D2768687CC471A1EC7186D318D849C05B0EB93F73C7A6506BC917B84
0F304A2C9A9D22859D14EF8F3111EDBB246DF8911317DE4C75D695826A465E78
7B6593B8270723603F097803324E2127A46E9DBA4D95B6583129FB837AFE9E5E
A65226535F722426F4748E52B9A0FC6005FF4097D119A49B413FD5E2288A989E
43696F3ECA394C284187BF757D1835465DB7CE3EFF1B13F40D3F8D619DB75BBA
85281C413245BACE3D563741DF251006BF7EBE753A7F2B82FF750829FE883F2D
2098D94298EEBD3E93E848FDEB52363762FC4D1625FF8FD008BD4402918043BE
DF77B840B2BE0F03004115AB6ACFF86C5B057FBA8A473CF7B639728E46748192
F0F137E33EB9D4A113F5BF8F391A1179E03C5967CFCED8C63258A3D4FCA3A07C
273ABD8D91D9049B6E71FC3C112A2667AB420374B85A3C89DCB80B08AC7708CB
4C4E9A8C6C0B36B033E9CB67097BA5E013D45699653AA4927A440959BA859665
9CF38AD3A1AD844B996C9EC9203DF2ED2DF29C2AF195DBC92372FB2E5D15C8D0
9D13B0A98AB430342A8C76E4521EF136E11C0E801D5099765AE51E69F5A96C3F
D32EB202CFC785BBDD2D86B42FF91FCE7E06435BB2940232865FE583461ED91A
90CA5B743636AED81E5142CC0A7C12AD65564EA5B099C094DA672C9D042051FB
5E063F228D081F67125D3750E3B00171C322102F98DD2B2602CAF403BB449F19
BE418B41F69BC01816313959F4944363294D9C62351B3C4F287019FDB80F9ECD
6C8B4742DE7800D31AC5B72EF7B5F51324BCFD2B6A49A29126C833429B2152F3
5DFA47C7AFDCF6ACD031363C8C076E141B2562D0E6C7A10355E2B7309BC89E95
4BF1CEFD985721947B2D0914DF69CD19EBF01385436D051C5D6C40416D227420
0897E197FBDC5D32C6565EF34B02A2175FD680993772529D33BF66064C8D5372
ED7D07B1802DD59F20C74C28ABB0DAF433A635EE5AD113FAB6E5C85B3964F4AA
BE1B53975DC2FB4EC2BB9FB4ECFEDBC77433CC69D46E6885495B65FBD9BD1670
369376A064AC889D2D4E0B81B4C7CF9E2EEBEB91A84B8396885F6502DF75C7BB
870DCE8384EC6D88357D563BFC416AF1BE715D01C997B7863B6AF8B7D3C4D5C0
FD17F1D1C7D8C18DA4CA12D09069B9B1F1000D672275FCC60A83E2DB8BED0CF2
38B8E435E233FD4EF18D06B88D435B067D944ABC6B03ED48F2044E493D0D62B5
DD78DCC03B8554410A0E6635CF4AFBA1D0D544A1A4CB96A895056C258B1D87AE
2BFD5CFCE8C98B18C68499C3F6E860F445161FC4CCA100158A1F70BC92036283
39ACC0A57133C4D9FFAAB13A72C802BEA4A46F73CCD4E74212314D6685DD853C
49CDFD41E7927EDFC593BBB1B6B8E70CEE2B28842E21CE6B0B76972F9FD584F9
02F2A335A12BA0ADCA2484362988BCC05E364D7ADBE9B8CBCC537BE749A8D81E
3A1A689DCD1F88A4D114D80FE9E752A67431619818DBC13088CA88D423843651
7EB318444BBDEACBA3D6FDC897937F648A0A9264E205DDDA97B5CE0B4700CA87
4D9DE72351C3331BB82D448476E1B3EEB133E6FEF5912BB393F2349B356FC40E
F36F07A0B0CBF198ECADD667BF8038A30CB2EEF7471516036186A4A0F7C8C17B
D1B1707ABC60A9AB85AFF1F3CCD46352B87541C9B15707C60FCC4566BB6E0E18
C94D35B48FF05CEEEE6998D45D6214DD02CA3E73907674BB0CFD0C70D0D402EA
42D514636F18444927C1C6AE4557D39E3ACE68499B774B36A5ECBDA2E2576E0E
2AE8D41648887904C098930F8FB44A6A8B7E943C08A039C17F8A3050AB4CDC28
14CDD059CE8EFDF9906112C62856101525735258000B79420E7A5CE1A080ACBA
22DD638F384F47C6B0BF3CE9F90C505249CE78D46A5320662EB79584FCBAA4CD
73828B4624C5CA972BE0809C7C11E869DCA8F7882F9452388511F773225028C9
6ED65EBB47006C1866ED542CEF4FE60541BFD16ACBCEBE9F3E689A1E9579C3B1
3161B65382ACFE9EF4DF915623B251C3024BD12F3C4C8BB9730E31C73A39C05F
3630C364439B340739F693C7A20E4CAE8D014EB43BA3CB6F434B801042D64EC9
C09ADEF7ECBA6480139BC0F61BC64B2053ADD1CF19592F68414125975727646A
A010960FF35DC0ED463FF8634956AD002A6BD671EA273EC3006E297A90CCC2DE
2908F8296A6BFAFA1EB1C4B8006603660DCB3CEF6E69A4E08F4209D4453FB42C
E4F4DF962CC0EED0DCEECB4755287E88705D641EC0D20C65591EDA59391B565A
C9184791614FEA044C1A9FFBE989B16D4276254F94CD514E3C40CB8E40BB3DA0
8C1761BEEA4BCB42A16ACD3409F8ED479C83E03F2584943BF77B0CAA21E541FA
3AD7A2138D2EEF3C90BAF3D2DBFCB81553916C4F88C123D6282FB67979F1D36A
B89FA9ED517457DA316722BBA402138E1B93CD547DFBE4B10F8F67DE7003EAE3
72EF2B0230E9E892478608693CEDB55B88F04778234EFC6C87C7306B6BE7F2FB
330E00506E17EDEDD49EB6F3FEC7FDE0C13CBB524062B52156B101D03B6E5507
BB77D6F2DD66DF5B4AA3C993E2E45490071CE69967833C16924C4E24C313220C
BEAF7A7E1037AD5DA0C4D5DF6AE058C12697028BAA3E0463D9DCD6E7F7178264
475B125E7042076F125DBE3547CEDD542EC9CD31
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/UniqueID 5000793 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 61 /equal put
dup 91 /bracketleft put
dup 93 /bracketright put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E0B5622DF6FC4BF52147208D9A91EB49B03BB40DE7F8FBFB566F251942C8FFB1
1DFA50465919400C21CE4724D12E4EB47AA5F392BA927329DBCA28A78FC1DF2E
6FF27F4E4E3F8971D7BCB5F3FBF8F30C214A26E5E32E0E8CBC71BF20AE573BBB
163DD66E89F2C4E2B1A1532AE81C060146F755A1ABA3F1365FEA30B403DE7B22
76F43ED8EF5C8884274EC7FD5E57E10CCA8B09C0D3FAFE7F9122F1F259E133CC
DF1DC4CD54AFABF522EB5F04445F241CEA612AD474377E241B56E22412356E46
2A7E818027FFB057270EBFE11971EBE66E203F3FE3B48BCAB8E6DC985E41510C
37D22F2AB42B414279EFFEE416CF4B52A51B214D3F826575C60D5D4C4CDAF96C
2A8AE2BAA62C353B3B81BA71CF70354594D933D4A6BF0124981F4156244DDB78
9330619D5B18F788760796E2BEF60B790CE855AE62039F6E23923F4DD6309DD3
E47CF1FA44EF753246BA20720ACB9D861F331CA1739CE12AF94A7F3B9119027A
D8275C9A1B5B84158686025BBE2AFAB98AC164C9FF51091FD936D27583C816D0
73CD893B009FC205B27310E65C1ECB79F35C1F9BDF4D32E3AECF0E6F4EFE0D61
F15C34E770DBBFD4E49ECB5FAEE2F5EF559C1C677C648926B5CD10691FB92B0A
A345AE441E622CA540193951C15763CBFF6A344893E0DE5A50355054738D70B4
DC61569A9CB25021A1AB26F7C1DAC7BA99E4416C6B379D9487FDDB85B3F7617F
747B71E7FB759E402F8D559FC4AEC1D1CC40672A120DC0E9B50E4C603CDED14B
3FDF8501E76B80E3B89A010793F4E2895BDDB400214CEFC5AE111A59FCECEC01
F1ED67AAF9B8970DB7AF25E32F81C637405E3292C48DAAA023A3F56A2884B8E8
84D9F426AB774A7BF5190A15EE9BE0C7219D5A81242E3E6C280CF6E73BE0C3AB
BA0621D15EB0B957204CE3CF8764FDEFC911B5E379FF2A5191D8A7F3F060D1FE
3A087D7E9CD5DF45EB900CFCCEBCDA451565EECF00E5EB279F9AA6E2F0C79EBD
F0075A6941D1B39FA89EEA50FE11AC5FF0A590473E33BB560A349839F83EBB58
84FA406ACF07081EE23B0ADD014967C6F33BB023EDBA0192D2F7D229905B2783
CB6F2C6544FEBF93BB0FE0320DDFC90E3FC09BF16EE599334EF23956BECC8431
C1B68717673328AACCF795D5F5EFCCD9BFCA0968381F3AE06B1468849270A5C9
C75EAE740402DED7F97F1134D15742D94C8C8CB48E3C9B06E2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: stmary10
%!PS-AdobeFont-1.0: stmary10 001.000
%%CreationDate: Sun Mar 22 10:51:38 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.001) readonly def
/Copyright (Conversion of metafont curves by Metafog (c) 1995 Richard Kinch) readonly def
/Notice (Copyright (c) Taco Hoekwater, 1998. All rights reserved.) readonly def
/FullName (stmary10) readonly def
/FamilyName (stmary10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Roman) readonly def
end readonly def
/FontName /stmary10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 74 /llbracket put
dup 75 /rrbracket put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-123 -2958 1055 803} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA3140A8A4C99ADB
B3214E61CB091BB87421CEF35FF5745EF8DDC51293183D75AE11F26462B918E3
F15A016BF051C59D797E59AC042DB329D8738C9DF453DD062F0BA8A59E23E500
D03758832A6150BF51F1096E643C98DA553929EDAC78FE0F28B0D59B9D56721D
00317093DC68A43C1B7BB7F4EF1D185ED2AA7A6E6F2D367BA67AFB0E7EC23092
A210DB79335BDA6ABBDAF5E5C4842B0A1EEA9B308FEAF483C1E8ED22088C4876
BE91F5D97B1EF9C6C943DC1FED8893EA22A5A265001D8B50A4F9FFDF83700265
B2385BDCDDAFC00F453DCB457F0AF33A1D8FF22BA6C4A7951F591ECE699C3D14
E75F936B66F381315F7DABAF8408AEBA61B6BCCD94269FB8AF5614B23A6FAA9B
331A47310A3337123061ED33479DD2F676F112024F940969472F7302693D0058
762EFEB05BA41394AB193F4563F3909CDE861E5D53A6238C45EF9710BE15FBCA
5D20A8223E5B377CC3B3438C5257F4033D36D2F6F43125802E53A348A51F9D87
A07E47DE15DB238C3B64337A44F4C88167C0FA1671468E030FCD02FF3D075687
3956DFF8A78C4BBFA06C711CBD066DE67958FB6D857C2B8851B1759285D79A11
EE35885A02259A2A785C64151FA9BED5BD06B8A0F84F05696E88FAC35B54F9E7
468DFF37F9DB581707C977F96CE3585CCC85FE9481C8E7ACBB9CCAD0B4D05070
4609CB0F1CF22B7C2F2BF7DA7064EB101904D2E7941490B5700104D9F84810B9
3F60D774F2FAC9BF95712C97B1F097BEAD4EDE4569609C00D66C3038FCAF7C14
6A92804F163A09FE1883EE040640E8C9E5476C6DE456D731C8DFD998B1DE9DB6
E5FEE8DD02F53DBE587DAD016B69F8AAC48AEF9D9F3379FCD592E02C98E65265
B0330B5F90F3B2FA275130A38A51B654C98317E867F78A93B8E847EAD914493C
6D26742E16DCD21E6AC62884E41A3CBF9BC0BB4B083155753E262EBB88B1188A
A5757A22951FCEEF0035FCDB592821C77978CBDC7BB06DA2289639211F070C28
6D6107790BE7B3C7F55F6840440E36581874A117F879FF966298B0FCEF744C8E
00300B4AB28E3A0D20565BBD3D4DAF867655D5FFE8B96DEC9F3E71E5F4A44E16
00D8933AB62879A541530FA1ABCA84E043EF7C2E675BCB40590BA9D4354469E6
3CA571D47738F73F637F9F20CA3AF2491CCF1BDA50BE022C473522C9ABADD9E9
A686E60F7C28781A82F4ED04CA91A17B477EE848B5F58C6FC93EB3EC977DD31C
766F8678A38DDD7E7EC6BFEC28CD509C45A804291159A9CE7191C8B0A41E5900
3457B788A8739B76DE58A6580B4E37C63596AA4684306C3D83DD53F4D15F2192
B1252FA8FE28AADDA0484492F0DE9983A45757202C7503478A3546D5B6424951
D391EB61FB751317A129C5C5BF3944A9673B0ED9F4DC1A290CE6BA89BC88EA00
77A4150280773F0BFDD9B699FA3D93F860B89C502C26D8EEF1AE28904926E724
66150F0F85BB044FAC069A2A15E076F7A130C30D4FA639F8425162DB8B8933B5
AB6E01ACA51F75A0C01D92990321D1A8A59DA19355A67ACB1A4C023C4ADDC5B0
1A29E27678E10F7EAD4716C6DC5DF2D9B18BDEA90CC1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: PazoMathBlackboardBold
%!PS-AdobeFont-1.0: PazoMathBlackboardBold 001.003
%%CreationDate: Fri May 17 11:17:28 2002
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.003) readonly def
/Copyright ((c) Diego Puga, 2000, 2002.) readonly def
/Notice (Copyright (c) Diego Puga, 2000, 2002. Distributed under the GNU General Public License (http://www.gnu.org/copyleft/gpl.txt). As a special exception, permission is granted to include this font program in a PostScript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/FullName (Pazo Math Blackboard Bold) readonly def
/FamilyName (PazoMathBlackboardBold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (BlackboardBold) readonly def
end readonly def
/FontName /PazoMathBlackboardBold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 78 /N put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.00100 0 0 0.00100 0 0] readonly def
/FontBBox {-15 -195 1118 709} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F6FC13F6
956DF14F0BC043FC51433EF506A869D4DC4F4CC8551813BD4FB32A549ACA63E0
54D96D2899DF1C91C0DF800BE3BA3183ED98550A1B6E8341018E5958D6FE55D9
31F13205A8D7E8E8D272D572FA455E4F79A422E23BF4446DD2E07B074F30D20B
7B327FC652BF42CA69B3AF4EB4EDCC4DC3FDD9F6E97566FB964CB4941B14186F
90ACF11EB96EF5DBE23EE591471C6CBB1E5FEBED31B6233CF057945C928EEF4A
BA00C461E2BD02E6845FABF2469862C1868AC67E9820944DF750735283EE93DB
C5AC907F4DB0E3FFAA4879F572B8A31E14282100F00A93CC110AB9DB3D83E5A1
F4A3B69A6847A30060728BF2FE4ECFA2CC78D6D332E81D449B54D4C5ED4B0743
4B7F2FC9ACE090F2E35DB9BCD03AE87894485BCCD3DB72684636A4E42E58436C
A6A21BA4F014B9C6BF83C7FDC71368E1710460D3FEBFCD506C3C37CFC202E0FD
E93B06F345D460E8B09FB4BD3E3C8F6298DD646E421A6213EAB9714E2F770AD8
F73B72AF134C745D08A1B27D8524D8A3B26602FC08FE91B6EA727A66370A25B0
26278282F06DC022F2B5B73313D4CAE299EA9D6E460C9053DED9BEFC5D4AFA4A
D2F3A52F7C51CA75C57255288CEBCAC17E5FF702FF96EBA92A735856224DC0AB
F42956ABF57816DF995F73554C9731F708C2ACC44A8445A70674C80F2C802851
F9B56D4BCE72BA21D204950920F6693ECDFA6045CEA1E3ECEC4557F79DCCBAE8
A6449BCC4612C44B46B6C3F868B90CE48D0EB31D50D450AF1B73F38BF5C1183F
3D03D74C5C90E114F70FF1C5A57C6B65905F08E67DB1D2AA4B56D9871EF9D678
1F9E0973C62CA6023BE0867F8CB0D212ED40902165CF886FD6E41E5DF3F3D491
18A16198EF898EE374D37409110FA3A9431A57BD918BCD631490291AB39A8DBF
29A3A36A015163334C085CB8025AE64294CD7BF78C4017107490975F8FE6E41D
AA2F3D6837DED80360D2EECBCC926002321A47C10DE63B298E2F88F669B2F977
A348E28994C87CCA39AE1F17BCA3ABD09FADFEF46F124CF880B36162E8838DB2
EEF382D5AD4BC17091EA476EB9DA01703BE04C1B27FB8E6ABD97BCDCA95F11BA
428CD8721484547F144B689B02E2D40285011696FB42CE221D35EF6D3A4D1711
1A0D28C1AC9D19A6F9ED2ED65CE6DCF6213C4F8D9EE3A45217B2259C4A076BF5
8F0B89D6115BF34E660434E53077206B06696878E08D696F299A0821E42C97CC
50E6C4D6C1ABDAA045D3402FD0AB800B022A9B59AC93D44CA1463EC3CF8726A3
FD7C28917CFB4D3B4587CBF59A38C4418DC5B1639D45D5A0ABBF1FA44FA6A5D7
779A5031AB41EA020AF7B697A616F07AA95FC25807B9C3C1786622618A58440D
82194CDB01A2CFC41133C69AD75946DBF8881B61D9AF69A47DF33A789FF79255
ECF2AF644ED9C88D07A5D43B48D40D3DE3B9062DEBFA016CF35B3296A4D2331A
8ACFD51DD8F95023A5763651EEF6D328079912F6012B974D2061E7E1BDAAF50B
9DA03EA412A45C4F2DDA808D365A7468BFCFBF7E680446F888A04685A6D16D46
9A20CE3D0401A7B165F5271B585DF664199E9CA3CF34E140D7DBDF0CD2C2808B
F33DBF18EAF9E90B484FC8C8D637F6F6C0136E0E1F0FB0A3B6845B26DEE73E36
0BA24603A6B42398895F1F95D5F0D035FAE9DC24349F29614784C3339DBF4C4D
4D95243483D723FB557CBC51ED0027A70B19A0039DEF9FD4E7BAEE0B3AF17AA5
0A1DA4B0CFEF053F44EFDFEA9519D114360B4D3ED785EC763635391ADC754BC4
4144C5544715156A99395CC93B6189189FDFD3AB62C759498BE62E4A4C69618F
E8EE03001B4A00839DB50767293D6F873666DE01A7354BDBD3B73F695138F3AB
72016B33B5418F210BACAA8CCC7D60AF299F7A6109C2682642104D9BB6DABACC
4AA136286FC74158421FBA6568591BD979D642FD47D7677CAD5B82B4548BCFEA
FC7C74304E863B1CAB3DC4679896560ED8BD50E7E141A38ED6285646AFB0D163
B7F08BA3D9C9446A52615F03468042550ED9739076EB30477D455C7DF2258DD2
F13A33FE49FED460A102B225FF51C3CAD527A8BF9CB710BC75E0106F5F94BDCD
5EC3826DA19468F81C96DEDFCE3088529A5C2BFE6B271EFE69C67B6E0BE067C9
3285487121FB3EBFE72A4B9268E1F3D065E8BCD98D19BF27F59CB0616C73AC6D
0D113E9D918049692DAA676AF73508E9704D6E01E3FC943AA32D2E5C8DA3642A
91F1947AAB4A780D034BC00B16D7C4D77CA434A078A4716A24CDF975CC7EA03D
80D1B3F78C5A26817EF500183246F0377048C48AB0D05E92A03FCD2E6CD1B748
90B2029F4CDAF8B95A33FFD5B823CD6A47154F9AE5827A5B89299EC09650AEAD
8210F7AC185DD0F5F92CB77F7843C0D4BCC174D4FBD61DE7DDB8C5B82AC7D6D5
21E9D0A70DB9A2BCA8A15A617ACEDDE0A068E3977C4C730F2A37988D9D03CA30
5BED5E3FA22E8D0C64F81BABC9E046AEE8866049379032547DE1BBCEC7D01555
1B07AAD8C85C6196DC28076CF4C4A1C12A54ACA688D325B8FB6FD35D8B2A9420
802B29FDE12CA630B01A0EF0761F13888A4306667786F6967E002C318363FF20
B5A0762A4A9A546A212DB60D5241CFAAA85225DFF931D0829C9385C6D5F48BC1
5D9DD07B2F6C52952E53E988DE37F3AE41F517DA87CCC5DA3E4C99DCACF80286
44105038841988EEE3BC2351F0834216B411CD0127DFC19CEFDD5752FE117E17
5F1D4CDA471FBD381152783F047D62B2BEE984B17FD89C314D618E29B9620271
F7C8E0F5882A10A8F5449AA859831FF2B40D41EB2FD9C97C134944DFCAB36B89
3DEAF6514F9F1200759948846896C7ADB1FF1960B85AD009DEA2B826266D5C9F
F99CE2D3EE2119DB141979F9F0A08C568A14BF67D0DDD15B7692928512B33B4C
579DE37C2F4E685A06F9202EE899AD9C341351AD59E7345098946C002CA22064
26BF4187816FA0B96CD49C0F860EB6DA1BD42A065562095B06DC28C2669F21DE
A96DAD51F9605E33F07025D5C099A0CEC012CC13D5F5822F0FD4573D799B25E3
0A6B14826FB19236868E2AAD5651E0066EE46DAFAEA884C45DF208F8440809D2
DE5153874F44BBD533B0F7F060F661B70ECA742B19220A7102F03B2B9688D2F2
BF484FB09C7E789AE7873B80DA3346B580E302A5D0979538EE40BBE8B069DC43
D5D918ECC4120B9BAE603204B5AAA57C1143F50A87057B0EC0C8DB61258440A3
B9D4E052F86FAC5D267B524F67F643B6B833BE7609292B1FED6F854EBE19FBB6
6761E041B6871421FE2A3313187091D09ACECCF37CF6B155DA3846AB1EB9C7CA
97B5295A088A41851CE4EBADC9B42C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMEX10
%!PS-AdobeFont-1.0: CMEX10 003.002
%%Title: CMEX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMEX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMEX10 known{/CMEX10 findfont dup/UniqueID known{dup
/UniqueID get 5092766 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMEX10 def
/FontBBox {-24 -2960 1454 772 }readonly def
/UniqueID 5092766 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMEX10.) readonly def
/FullName (CMEX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /parenleftBigg put
dup 33 /parenrightBigg put
dup 56 /bracelefttp put
dup 58 /braceleftbt put
dup 60 /braceleftmid put
dup 62 /braceex put
dup 83 /uniontext put
dup 94 /logicalanddisplay put
dup 95 /logicalordisplay put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23E7BC2A6E71BCF95FF3DA948
1A27320759222BD7BC7C1A533E90058824F06942F0234C68671083E0E4708398
D246C94F9C16DAB6563651BA33D86273FD2DB3C50C106F3CA95B1C79778D0BEB
B99D9CFB38E41BDCB4261A86A23E2CDEE4837D9B6F0E85ACEAA984C344A63709
EA35B61F08821338D363D172BD185A3658F43052AE1E61D879C99DED7F6D726E
FAFEBD881BDDEA91FB09DB75675FC74AA2BEA8771027C7A51BF849F8E765B870
8F7CC0871F301ADEF9B71EC3C607B2F51325AA5B3DD74A2C5426E7B329FAE84E
94A159C8C9C35E27A0FC93FB98A4D616750DAD50068A5F0EB96B8228946E5CC6
B69E93D262C92E3BC7161313156E380A2ABE27BE400A23DF95E65A4F76B3FFE4
CF3CD141B006C487EBC73A5A101466D4388FB2CF1D9439D0714720BB58537B7D
B3EE1F04AE117222CA5F0E5942F7A875D55D91D63958B1A02405D9DE08109B8C
7104F2D109EF7074852DFD74CBE02E0F3704F2BACA14E05EB1D0D9021EFAC23F
76C2389F8EA237D2E2AB6AFA83A725E16AECCAF025E05F1B1B5699D761F62A46
EC6F31B0FE4769BD0D66821592ADBAEFA9EB454CF1402FE870F5F96D09980C1B
8B6D2FE88BE56032C1959E6C3DC319B6A7353F3AC629CE5BCB947B4B235426E9
4769302817AEC1ADF50E50265AB488017634AF824D44D3C8423FC7CAD97F6D6E
6B34313637687FBDE3BDF6FC951CB41277D8EF49D14767B59656D214C9724DC4
0523EF896F4E48434FCC5D8423F07194C54D48C62AC29001B10C9C8B514B24C5
CEB60FF68D36749711E108DBB52738760FCF6571D5B04E58F24CC0247834B412
D0F6F8D7F1573F23E3E399D5A3A3A37FCFFEAFA044A5694D2458EFF2BC1F7650
8FB0A27C505A20C16776EDF94BEF9DF702F3C64DBC1939BEC0399B6AB283F832
DD8FB358F701CC075C596FA7B0ED7A9304DC73274C8169337D55124CB748CE26
A635B2704D8F65E23CC0FDA3C57ED451F8FDE7B6FBFCE2746F5AEA11B065A6DC
C3D200D962A034DD6757991BA62D8DC0408F49083D48799B6097B61343365A5B
30FB02E9CDFB5104FB751BE8A268EE55C1208DD8B29D5635014EDE9D0D94BB64
ED5643B3049027925BF2FD7EFCB631E01269B731AE12AA6226B2656F035C7E92
959C4A21BE40D7C138C8FF28C9FD4B768CF25F08859AE84FEE6EA18C033B3659
D9EE250BA5FF2568E8BF7684A93BED7852251D1ADE5DB815AF3AAC36D1A500C9
41D1BF3A1926828CD1F9E501ABE441A07B1B96612CF0728AD5FECF7480421F46
0B18E06D2FF1A5B1183459C59517976474698BCE18A728515CD489A83C001AFA
47BDA929F60D0FABCD8786AE16EE18615C37D18703571936A365D334BACA9BA3
08E2523132887B5EE95ABCE8581C78C3E858DBF35ADD56A1F6C2489AFA73D1B2
379C5064DAFD30FDA84581FDE268B470636EE35F21648955513714F6EAA08AF0
249C937721DB0E93D95C4DDDFB0948051953F39C6D2D811D3FFDC25F786E072B
2A8A1F4830F9CFC34666A1D3F13268980E9A26682CAB64817318A1E266F3D2D2
DE4EBB3EDAF0E7B526C838CBD7F37E74A35B1C3EB96DA4099DE689A53970D4CB
9AB355E93EB294B07DD09356C338BB4A61C147BEDC152E58DC92FA69846E4829
551A5330006793CD88523F7B3AF7B4475C531C67A4B66A603597EE72C4ADA491
BF13706F341125CABF37FADA554FDA0BA5534C7AC35F1829E250C885D9A9983C
5D1FE8CE24458A8B13E5C7EA22BF1608AFA96B83C700889A2A6C9C4052DCB892
6CAEEAA9E7D7F3E215019719B36A5DAFCCF2396FA0C04AD99A7C23772A7BAA64
D1FABE8E476EAE9FC1A3E08CD6D1DDC6E087934E676BDFD1528652B6B9A50A35
2029466364300AF4CA3C5883F6293A7104617D0858B3E43D43752F814654A938
A44C33410BA0E5EA7BF55D4F1D57E27921DB05C059DE29BAC1BFC9B607D2C5CB
1DDC47793984FBB18BD99E1DF7776B563A55E15DF024D6D8E6ADF62F16F602A6
7DDE1C68637672AA9C7A1250161502ADDDC1B4F6011A9BD5605B73AEDC37CE4E
4467C838B7692C4D541EF87DB41123F9DCCFFA971553A5D9B0E7EC539A28750C
8554383585CD8B93DF731A301D85BA9ADC95B4A3A237794C30230A82300B6756
AE5A46A090958109C5565EF60B0B16D6C0A16A56644B05D3371DABBB67ED9BB8
9BD3983575D371419C7568B2556649402AFB9843106729E4EA87B3F9038218A1
F820B098A1271E330708432567297CCDA332B555A40C62BAEB16330175D28AA6
13AE6939CEFA2334E3E890B66A73277F0B63B1FA59F856ABECC5FC0A50571F5B
0747FA554F5FC72A51E215304B2E44701A13E41D91397B204C66AAB3D101004C
7FEF2D87DA558EA057BD492CD6EF93601CB63F78426B502CDC5C8E9EF4FF3692
376601B1FAADD801602668370B5ACEFFDBACA8F8B3F4E850D07A20F6F47440FC
FD39504F0FDFCA35AF2ED0DA8BAB63AD42EA8CDA912CE17F5E62192DDD912333
3E9FA0884117F07221642490044A72E359D5F25D9591A8FAD568A3DEE435C354
11995C0EFCFEA21735DF44A30F79F747510E28767A4266461D1394F81344F6DB
1FA8D0B0D9E5F52FBB663C8F1E91192E5608FFEAA178B93F8298F70510A65BEE
12ECB5D675311B5B3B19205476512D92B1D16262720484049370A76F78D9BDC3
02EB96AC1E5B3CB078D2F219988FD0F36B043ABBF347B22D36CF541A8F80F791
8E4F92D900B7E7B64DFD500882EFBBF23565FA470103B2E0D2D14E3E4D7827D1
BAA0F84713A8CDE5904FFF2794850871DEADDDC53B77A502F5CA98B0744BB656
2FC40ED2AEBCC5CACE2301E983E6C18CF16AFB9FD8CA49DE51B22F4259D43076
DDC1BD4974CDF2E733EAB6334B1D5614288CC81FDCC722CEE193635D1088FB29
F80AD5CB96394AE89D920DF8E1F271585AF019190F17DB51FEC9064B54C3A53E
3FD33C3B553FC79F743BEC9674743BF0A821051261DE4527A2BEF4A04E293E97
02B181EC5F5EED3E26060F2C9EF6852B7433CA1BC1690C30424B03C522A087EE
92016EBDAC4B787133B4A22BFEF0B6CA564C6EB910E1DBF983CB4CFC3A1F8A26
45329CED7F5A8704ACE9D4233583365A5A97342A053EF403F0567E9D0A62EBCD
84B5D7145BBB11D31046BC2CF5B450CC68B85DA0E78EF8902F8D37DAAA9D4242
455288C0D73748F9BFEB1B1769D6FB84B94993D5F7C2B9CBDF75AEF2C930F277
210B3CCB8A0299F50AFE2548A4B8DF5ABB52F098ECDD56FCB8D3A406EFD95088
92D7EC39FDC7EB1824ECA24D0CBC6EC6F4C6A7F9590D593B269D2CC0BFBD961C
AA8BB4296B4E4411B54367A341A5EDA97288DAC370A015FDE6D7FB0A4CECEFBD
1A67DF3A3703E922BEF2C414FDDA42482EB35D5DBB206B44C76C412A435A0842
6845EAD204BDF87065CE2C99B05D2D4080D5D11CFC3316967472C7DA44CC1F9D
51B83B4BE9B882D6E9ECB482F9855D024ABFBA502CCD624E0F88164A6F13CED4
85F20DC01BB15C7D78B1C79FD9FF71F4B043F59DB5C297768115542BC7C8A99E
ACE39A268D32122541FB441FF1364FCBA2B7627F12C49ED038BC044B6D9D533B
A72D35317A5AB8D91A9AC56CA90D1DAE9F967605C63BC9F406FB3D5BAEB4B38F
4934EE3D2F5FE434B45CF5C2D0E5E417EC279DCEC4F16504EE40E837B11620B7
7526AFF23381ED3E9A92DA4DBF4EA2BE4FE444B9A74AB60EFC818E20DD8B852B
DF8CB659C0A3956D0DA61F49A9DD467726E57E9B32EFF540D551A67213D40273
AEAA6E319D92B4B406377D36DAB85662C755D76ADF5795C52D54ECCF0DE81E30
B84F951233A0A400CB063911837F0AACF44AD2441A7CE08818D64705E1ACF7E0
F59AEFC5DD812981C5508385274817056B2CDCCA4C9F3103C92838917EBFEC94
21D5737AC634B23B6F7F63B166D60C6BAA8F33AF44379C5A7337E737190EB3EE
14272B905D08C01EA118964D3444A03676FF3B62E7626168FA1DC6220699780A
0BD5776DDFA26BF0BB335B3C978CDD5CF1A419D4B5C562B3974FECFCF0118199
E547EB287CD92E32E881F344420FA3CD97333BFEF5D7E1BA31FD20622E5B4F95
692DD0ACAF01D413B21C8608FA87B470191C3CC5AD333263C955B4ADF4370FCE
D6667FC93495003F4B6AEE4F83603D55F19EFBF56F955FC9CC01E494804952CD
D426FE706C13D41F87C5C668D8B6BE50AE0370E07F52AC0534ECAB1C19851099
FC0BB1EC2A649795A62299F73CA606EDFB1D28183DC63ADF67294553115E8C57
7CB603CC491A6065802B925E6DFBF42917EE6E44C714228AE452851D61BF70AC
844B5D800EF029357FD659B8A648445CED0ECAE1474E443124F4B3644F54C556
A330D92EABEC7F607C6B13FACF69CA928F835056BD1A8ADA20EFE6BD5CF4A1A0
8B9E415E4A5FC6F209EF05ABF2E0C55F6E3060D1C72967E1E68791499F303C8B
3960C5A1F2DF6306710DFA98C8D0815A06B5590374554DCCDBDC4C295B3BA6B8
8BE3200CD4421A521C06BE39D4CA495BC63F3F982CAE3C82AD38DCB537E617D3
34BD96EFDA7C6A0F6D97A6BC9F084645390E194E7A11399FCE4EEB9A965909BA
6EC69D34DBA081BB3F18BD1ADB1AE1B7FBF96E4C546498667690857EB6931841
46C427A5B7C7D99FF889582C4AD11A7D267B301C5A5AAD9DA99D5BFD438238DA
62DEB899FF0F7B7997F781315B2CC328BE3572A3903A33EC901AC6BCC7F152A9
8A6865C6CB17189A4EEB699006A5F9D4482D53A76E88438E444F9302C79F0DC4
B3033D29D303B38F5959F020337EE6619DC8A8C3912101B02CF8AD113BF4BC29
8C6B9D25AF6B6A787F222C05964475B49B6751E3A3A6EBBEA03677D5B136B9DC
6D9AC20193BFB0759E89831C9E2AF68BD45ECC81175DFE80DC0879069ADFA8E5
24CF3C84121CD9739A28BACB9891945FA4E72EC07136682E18FCA81938FA6A3B
8CEFBAED60121530E33C1C0E698B5923D6AFC4E907A99B1367C3D435CAEDEF5F
878237453B8DB2FE53073CF3319FD096343F42D68F097759D051AEE17E4FCFC9
86E17099799DE82A38F22D870BF7AB90890E3B5264976700BAE594C8563A218C
C985D9A5A7D7BD959F7E4E66286833C86E89203ECECD6FC4C6FE1F04010218FA
A5714881C4C846E85F13BD68AC250CD0E488DBF60BB10B2CD7AE2E30F9C21DFA
0E84F76B4E996AA1C5C056E64BAC85622C160B56DEFD4DEF86887C1201F7C20C
076D4A27BA69572BE9C89FF3A9D3BAA5CAE0A6F2187AD01ED497798A305E3BD8
422DBFBF45E3F4AD35240B07285128B59FA9E83D9F6A2E620CAF6DB05129D930
44CB241CFF84E776315114C3AB61FBC0A8368D9154CC5066E2B162E89DA51165
F9CC075F2524F9A8624D2B56ABE64AF93B9F0407CC770C1F2C76CCDC06345D03
7B173C2FAA201D8E1F6C0315987A7A13902F4AA5ADF081C2B0A01C77E4F7A3E7
6A4AAEDDC577E855D69D38AF6A1D271B02AB496D94D81996FB078FBED17F833D
C6C0BCE141BCDE277D530951DD6574B9CB3CF0370D74211E9AC00C7CD3A67842
0B4B72ED517E4906409DEA7993D0B8E92D418139960EBC86BE63A1B1D417C451
8BA13C230DAE1EC4E466F23351D410D9FC4A7BBD477D5FA07659B71CE9921B1B
6755C67AB3D4988064004CF75948879D16174E8097C91F7544352474C2D9A1F8
A1813BC6F4BA13E952678F5707F19B4799ADB3BD186DF650821DF58CF3C78D67
84E4E1DF8DACEC50D15647C3DBBC3C4355E602D3A03171FE1CB36FEB940211EE
0A5300841DD7B7CF91C02B3FC5D89C691156BFF8A38C6C72789DF260B868AAA1
895046E405661D97FA9A0048AF114A89E3ADAEBCE541753E4FFCD902391B5372
6A97E32F0257FA9FA1DC15BD3140EC7F0CA5A68AABCEDBE73C38B35FDF195F96
0F9DB0F592C188D72D73512F4DD92D2371D1A59254BC477CA084E68184AEAB6C
266BB21DC3AAF874DE999AD2A17C79621AE322612EE4B6D5BDAC511418EDE90A
AE75066AF19662C4AD855E4200A5D67BEE4ADA9A399192C74D35E59B15FB61E7
BB167282D32D538029ED22CC5C9860C1F6B7BA7F33D5CF108D4BEEFAE7B37E67
39391F9934DE17956303532ABB011540645DB8420749C9B9A019C3CE86ACD566
1EE8D8D5E0D8D0DEAB33B5413EF10D4EE650F82417002E436E0B3B628A657F84
074098C2E9F897D9AB692E0FB9F268E6728F94A79CF4D6B0A07C8DFDC1D67FD5
EDD5863EA8949D180B1596D0009D662FC429449D76BF13D83F0D0CF165982443
E9CC288CF7C5F2E17EB7F3736D1FB814196CCEAB8C833720E3733BF594E1B536
BC0063080BC751F9DA1741522B2967D07DDDA169E7D3417B4A39EFAC15EA5E8E
DE3473CC9DF991FAD2A971F44B09635085DB02D692F149F144F3DCDB69B72C53
A2AF34C65DF0D5F35E82102E67B733750646EC03A4FF47138F7998607BD93AB2
B63A0B82E8E225FFAD5DC468077FBE8C8C8E5B4BB10A8FE836B07367D742BD6B
D36DF5304B9DF363120504C279453452EB177FBCDAA6F6FB78A24848F4A1D94D
1E49F6C46CB36796F3F4C9739346381F28AF085C5EBDB2A02DC0570C7A21E097
77522D4947B51182431BCBF3E55CCDDE93A916AA40CEB577277FA512380816DF
9111C56F36341381D62368E70462577D0C135BB3CB4462B269AA8E0F03245BFA
D01DB8E23F2DFD5DAA88FCAFDD51D48E562EC649DB1FFDA0FD8CC8C48E6A9207
260ABE35733D75630053CC74A07E5AF6FE87BD5FEA69CB6AA20122276AD92853
6B225BC9E3350D1B1362E04C7795D473F1266852B02C83D02D938C55D8F0C671
7A9205F8CD058304DFA034D99A6BC16C582F02484A089602D42DF30D7A5716C1
D42A4CE56C19E40C01DC7DED931FA13679CFD2700B3826A1E6539AAC12293DA8
664DE251C5D1761BB45FE364CE3F7F7E9B67F86EB31D9626CCACE4DCE03EF3C1
0D2FD1B12B5774510D46C5C5CBF0A34847418B9A1DF0C67789422D0EC2D49576
9DDE72D63A4A98613461A6F730A05336C691583F96C3CAD2AF7C4BFD3AEB3814
D909858B6598FE19397006C8C4D549AA1635968F47144E7861A2BCE8AB4CA7F0
4D253949AA0127559FAE3161C810A8CE22A3079602E747C9398F9C8B2A868F23
D77D7AD6B980FEB038E0557E58E1D7AE471036CBB96B83595D9C96A4895971CD
C2A810651A045F876A1F5AE470BEF39F856808B1F8D736030A722E1576BDB3B4
4DF06F73D38D313C8A0D3504EFBC774750C9F6E687ABCB1927FA1BB3882AABC1
2306A030CEBB259AECAA646C6497712F6C1E9DB7E1365A60EEC5AEDD5147A77B
1E3A10D73C477876D54FEE853D953EE75F7EDFB287550B93CFA8250D1FE2FE7D
D34441F1224F3DB1D355188819EBB98A94DB193B9CA23803869DD10776647BF5
5BB42031AC44A7339DC036AD0292AB9B732E6FB79BEE852A103C3788BB0F4B72
EF37BB62356F9B2DF7F5899A26F1FE0A3D6469C1034B8AB14F52555EBF6DC592
3F24D6DB395A3A182ED4B8ECEE8254661C19CC942F236CA40BAABE818EC312D8
7F5762C210FCE8A3CB9A26DCE0D24776CBD0FA6F27F7636791537C1749969DAF
3B72CF541A2E7E72C3C4AEBC5CACBF5ABDC96B4FCA84D7A55787EF6A13484D6E
E37C833DA37E42E9473ABE2F9E0CEF35EA389542AAEC2E389E1C5D8AE6BC29BC
48B803E3EB1DE78B7CBDA7CB79240357C0AF60E817427A9126A9C26A07455FC5
4C21C91014C9D31B5743A9D4FDDEEAB473F04A08E9A86C68EC648A214D6F84B5
DA77805B27A0F97CDB6BA9B9A521464CA519C9E8B24E16FB4962C239B079518E
896FB197EDAB1434BE0F418D3BC19ADEA42AE0AB3741CE1DEF5B751D3B44C05C
ACA1C98CC87E8404F41256B3DF22C3C0E1650A1444A069A6EBCB15182FFEBA0D
3EA2F81423D30DD12978A8CC3B98128FCE221AB59BA62A91AE3338FA62E9A450
FA897A67E2B1D9167F97D2120BCB56EF5A317D8754C46227EFB54B113A4B3C98
D510AC0DAC6AECF34CE4BBFA2145AEC0184BDBAD0D239F9F01C677C4282E2C6B
96DCD784AE091B292F52099CA4279631A7493B093CBA830043AE39F41E579161
2F2DA17EDC7C7E41CC5789555B24002D4E80FFD5F88B43A648DCAA1A523743D6
C330432D5E89718088358672029A2C75C8384D3C62D2CBD836763788A151DEA6
1FE8A9750B68A6C9792738BC8B6B601DA47C85743EE794A5C3C120094342FC03
045AB9EB1F4BE9DA51E2634EDD91B6F523029A55805C2DED5830190632C5971A
C3F50F6B51713A3AA5624F32B3F631193EAC41C217DE3EE6F7980753F739897E
729664A02641382B07D53CD3CDBFA170C32D712CBBBF3F8DAA54737E28B5C52C
A430BA265FF159BD47276E3E2A4E6C2E94C651E49AF42428E8CC51F0ADA4B494
7159D162C6570E975348AFB5723D3498ECCDCB076A6AD8F75BFC62F4213EF4EC
F3B30624D902A736C509EE48CB2EA1FA7496210256CDB9F47EE8CB2EA4383CF1
0E354EFF06D5389D939B74CB5739135BE221F37D8C0AD2B53D170B83F2AF8311
70912FBDD7DDB00E778561B37C6FAB7A8424FD6CE4D1DD16E4DB3D72F92484A6
EA28C84D77BB1C399238A3065DB811450ADDD08EE35E6634585DA5788927C93F
B513E699C133FC4B0E603BAB435A427ACBBC30A6A5BAF632404D243BE750FB82
17E5C8C228C4C3AA0F4A2983943002BAF56520144CFEC38A8D9ACA176B9F5EE5
BD281C594AF72677F19DAFD577612F51935EDC4A24DF593062DE0431CE1F6B8A
C49449B54A6F562326AB7912885AA08BD94701E319EABF53C598CE78EE0D2DDE
36BA364ADACA0836F48C7A30DE453A38BFE31DFC78499CA18B775491FADEECB9
DEA128E53D295FECC79DBDADB6576C84A7D4854AA4C0DDF890E647B5406CB37A
C58207BC478EFBB9487ECAA41FBE874064461D6158133926FD499C22FB99ABD4
1A3CDDAE732D4C5C1FB624140E2134EF8051460A7A997F935BD878EBA3627C28
08D795AFC0ED1B3FBF10CFBC8A557A10B8E09903CBC8BB73C839CDC81E61D632
0535C97840D29CCEDC5B0B7061D44B212CF0E835FD064376504FB791E00C1C5B
3ABD7583BB458EAD5E63FF7E1257647050D02B45714C51D82655BFF9A027182B
BD05ACB2FD4B1039F9C04162437666E128A8FC82A1D140E73F180E795E17182A
CE00F67F6580E675C6005B59B995C36E4F4CC395E66568510430D0BC77112704
4AC9AA49F32EFBC1AA6962F6725991D855710A5E215D8CACAE58A3A582CD60D8
F3E9D011E1765036EC51D543CD41FF70A5C8F94C5BC9BBEB327CDA4E7E9F2CCA
FDFDC1512AA9A2771FBD3629383B172A7D0464878F0CB4EAED2A2B0A844D204E
01416DB53DC0210FA323CD8DD57A2668C28A6FBB8121E7838A49A01BF644AECF
97E6835BF54BE7D9F1E1ACCEDAF0F8D0F21A39AA0F7B4A082FD97FEB4D51B8F0
A292F3C967D0AE91A03863D9A11D70832D54FAE4AD2C8E5E9FFC678148C8EF46
9710340AAC262BAF10E85B56ECE5866B8D08DE865ADF781E5E90ADC34C1936A4
90877117BDCE1E40797DCBA537AF9F017F2BED126F4B44F975CC568F473D7563
3D185DC80ECD9D155586A7553781B56FFC406C6F88435754D788211B599D2DFC
8322FF619D6FFDA9FA7C1B47FAF289A64D57905B41FA3365A03A4D4595CB4599
09C6CF0CDB1DC93BE2960B9C77742E1D748F6C55FBB0B5F76F6360D42B3CF1F9
B98AECE13F635459E1AEDF0CD2D90E30177DE343C9BEE95CC678ACA1B9B5950B
4FFC857EC3B61D0D51F8523E97FB12DD0B5B7A0F51DB5A5853A2C2A383DA3C0C
F73A8CB95635ADE5B3F0B242F3D106F57D64E228AB23E349BCB6F46B9FF9FE61
328BD2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PazoMath
%!PS-AdobeFont-1.0: PazoMath 001.003
%%CreationDate: Fri May 17 11:17:28 2002
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.003) readonly def
/Copyright ((c) Diego Puga, 2000, 2002.) readonly def
/Notice (Copyright (c) Diego Puga, 2000, 2002. Distributed under the GNU General Public License (http://www.gnu.org/copyleft/gpl.txt). As a special exception, permission is granted to include this font program in a PostScript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/FullName (Pazo Math) readonly def
/FamilyName (PazoMath) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Regular) readonly def
end readonly def
/FontName /PazoMath def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 198 /emptyset put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.00100 0 0 0.00100 0 0] readonly def
/FontBBox {-40 -283 878 946} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F6FC13F6
956DF14F0BC043FC51433EF506A869D4DC4F4CC8551813BD4FB32A549ACA63E0
54D96D2899DF1C91C0DF800BE3BA3183ED98550A1B6E8341018E5958D6FE55D9
31F13205A8D7E8E8D272D572FA455E4F79A422E23BF4446DD2E07B074F30D20B
7B327FC652BF42CA69B3AF4EB4EDCC4DC3FDD9F6E97566FB964CB4941B14186F
90ACF11EB96EF5DBE23EE591471C6CBB1E5FEBED31B6233CF057945C928EEF4A
BA00C461E2BD02E6845FABF2469862C1868AC67E9820944DF750735283EE93DB
C5AC907F4DB0E3FFAA4879F572B8A31E142821042905BCE7CDD20581B4566DEF
6C7308188CA240DD953378AE17C8F146670B99CE786C72D24D538A986424AC14
F9616D0DF97D915C8E27F2F99C3BC0F97A7F58D0DA960A5241DB44CCC3AAD3EB
B33F0BAFA3A307D3A12D586EBD694D666DEC2DE5F336192F0FC8CA12F2873A97
3A5233DB87054ABC74E097E919D8AFFE50E496365F3FF99CA21C0E7914253F12
97E11974DB6201F01987F082178ED90876E981DA2BC21E8A3E1BC06B64C0496B
6168202BDF877EE0627B3A422374E4B5F1AE5FB419EAF4012354EECFC0E86647
F34168C09224513607BB45FBBE45184DBE99D6276A99A79E5F72A0C22BC630F2
1C80258BFCB5CF958AA75E68D9A2B7BAE95BCBABBEA8CDD6D173A8B2829A91A8
202146B6BDBA12756472D83845580B897B0670DBA5093DE4BFF241556278867B
FA4BD8F6B16BA3DB087744731F1B354F905CE1EC277700E17B3873714FF586D8
D8805E82BEEFFFD7E1A5BBC8064FCA6873AF4963E1AEB4556E9E50DEC15E6C86
9F6F483D23EBB55678821D43F68B570B0C2254239D644A205940CFCBC5D893A7
C6180C939327BD93B8DDAF770335D9255CDB6FBE2AFF74CAAE8D1CB13A12FA4F
DBE9ECAD5A374C948FC10EF8049044A4BE109CA21B610D75453D75D618EF81DB
BBD60331EB638278CCB15B0525D2DDFB5D92BCACAE3E30F353C7192BDE600F92
1E0DC3BADBDCD3CC336BC012FD2E3A2F265EB13FF9ED9F706154FDFE221CE6C4
67F9CB65F034190DE81400920531529EA96AA78B5E0C87FFA05C0EA432E076CB
A0CDC05E7416D1BE8500226155BC9D1A36F417A5C2F9B449BC3F8E7884806313
003FD63554310748221F5BDFDC25F4F33AF3E02DFAAFF16DBFCC1F93AFBEA0E6
F25515DE0DA8F40992ED9BCE277024155EE3A67C43140D327C52C12A5656C7B3
06E164DA6EF5EB040C5EF4BFFA621B34805BA4D923A9821DE73BB6F7E0ADCAD6
BD84A5074B5832023E809B80408BB9B61C2AB2E3B0B8DC46F0BD3A5958376B79
4F2043A295E20CE0F18D9C1C1ADD745B02A7610D7B4DFE27B6F1ED050BDE2FEE
2D7CC70DFD584CA4BD4F83F5B0E31839256FC299ABF128FE2511732602A5885A
6CD283AD3C1F1EC66D90AA787A9A653A4F75C63447142226B4AD00BA42EB1662
963564B1A7B40E5DF8F48C433C5CA5E61DCEFA37A93751BC46076F01E2D91BA2
7FAF9AB7A3B8BA44C2565214A84FB5C4307B6786088867E9C17D59921FAB9ED7
F964ED314D50CDC06341481153D908EC23CAA7FFE09897138C27770510D95D6D
99B372D55E9B2C8BE107A98C2D54E5C032BDB0B4906AF58FC2A2F0D47E802F69
8295CA19AD813AE552E8DCE8D6F4AFF47C936E6A2C452093DB4231E1B05E7DAB
444162C4E3874CDD4ED921463C0A12389EC9A25555EF5E6ED7C9A578996AAF95
7B963C159EDAD2B14BBA9894075DBA39BE0765A7728CC8E15684C683D992894D
D9C12460BF89FE798B0A5928F7CE466BBDDA8186563C7A066ADAED535A8E130B
46D3C97F4DE0BF14EF07EEC38ACADD3191DFD0C105CB6FC5F610237BB3C6E242
EFECFDAE0712EB238A87FDC41A647D79A3E56C4B5AB32B9A0D0344E6E5627D61
3BA2540DA3F064922470D7E9278C68DE7987BB55D05C4D40436E36EF8FDB1179
3AF5B4891F92369E9379CE45F6CBE7E3178917EF81C009D9357C3D53CFF50F60
D97926F71A1A704B01EEAFD6F1B8A83AE84F8ECCECD0CDFA74FD3C4FA486415A
746CDC1EC49ED6114400F4724ECFF05FE0BED47CE28F3348CB30D76BDAA84D2E
933C94C99D13E74F1B7BFFACCEC903E9ABCB6ADFA4EB07AC36443DC19A5BEB8C
533CE73BE753625DD6DDD8816291EE7725531F81F0A1B8BB3F6165335C2E2D45
A67FDA34DE10D993DEFE399A8E57839D2B36186EB03E4293B28E3223F98B290C
4AB2CC3907E002C31E219BA3715A9CCAFCF2CA41A6A77F829E3F6CB40BCBA184
059390CF339374B4B5D9C27C58AA432F300714BED0094A83839F08E09AB7E0E7
EB32C428F531FF5E355D691E098D1FB678751667A56E8A64CBC393D97C82A060
10BBC1A15D64AC9A238A1BF4B3A48CAD040F1F5D21713E140EBE0318836CFC15
9F6C3B5C2E9F7BE3D10BCBFC009C2897E97435B9FE761B4B89E7C03EF74C518C
C2FCD0AC8B133661B6DA9143D44484FA71460BA7578B2595522330ADA221EC5D
A545D6FB97F5042FA33E423A927EC39538B721F98AAD32D81A942D1DE58ED829
6C23E4013F3269A771013D4A5F1472CAD206AA1F85DF9121B1973DFE4ED39B0D
80F132FBD25678617C56978AB6B3A719CBF2D49DCCB626008F9C87D6828731E7
908F27FD9DCA67128C0060BF19AC7469B18937954FF172EBA4074D77978E7362
AE56E90B194CDE64929CF25D44BC24CA24C69B79E88E394BC77CB579F2CADB06
E08EAB1500B4BB5A2F4776779C4863B3165FDC8F72D557245681884D032DA557
352DDE12F21018B73C881DDE3B9A02EE83A0C59353C996BE377F2F1C9170B661
C6BA016AE411EE7B547910F97A3FA7B7D5A620D2F49A80308B8AA870CDB8C490
3ABABFE018BABF4B79920688374444162056C2837E44CB41A95C498D3299F560
C6321C80E9A1700FA511AE113C49C35DFD4CEFB29A3B0BE85600BCF538986681
29642752BF394555862A58E6FAD7F027DF4527B431D9FAC288F25655416E27A6
93BDDE8B45
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: URWPalladioL-Roma
%!PS-AdobeFont-1.0: URWPalladioL-Roma 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Roman) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Roman) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Roma def
/PaintType 0 def
/WMode 0 def
/FontBBox {-166 -283 1021 943} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB756B8E2BF5B37627E46
DAFD4A4F741A859BB5F7D7C77FC7AA96EE6AC93C06CA829B81FE31E32D59C6DE
B1BF3B6CCC5C3C9296DC86D01487F08AB668F656CDD88EB816AEDD1EFA47F014
FF598E78C978DF18F8F66057351BC96B48015AF2E09E3E318053E952E9AD4037
BFC7EEF9CBFD7BC35746565B7EFBF241639793AE357220843147FADB929FBD24
01C88A382F00BF79554D125C543455330002B0FE6D229830470C78541E78DAD5
3E7C1A619B91215AE025F81561441BFC9ADA446035B8EB9C3D69BA746AD0CCAA
049D1FE4D905DF3F48D22900E02A23FB23F6B571DDC8B2CF7008431C1EAD7F6B
D92A2C42CAED94F9714F44E3CE31FBAF23A064AA2A7F13D6E5378E28539F0009
323A0755E58BA7564A408B142C230672A423DA6A6E54ED162AFBF8FADFA75B0B
FC648D5DA6EC31251B62B9F619AD9460876EEFCB8F9D2369CA3055820306533F
3C1D47D5A2EF97619FC2C780BCD9540A820748369FFDAB9D52492F130C0AC3C8
E0C87377DA6C21F1DE429C15AA939877876F84605F6785B5ADEA97321BF29DEF
3692AF535EEFE801975F94645272142128A3FEC8B1BCEB6E57B83520B5C4DD69
36DB8CDEF6E49B8944CA31C59F8790CD3FED58F1182D9AC6DCB2D75B4881B430
C67DB769B4745EA54233CDFD5600BB2A96209A83FD04C13D4AA4AE27DED97D25
93F6FDA5F64711EC7A2899AC98BD8D8879A6A348265832994C3BAD80E1D12291
CB05924302B780443A76A09E1C27E8DCDCD87FFE3BE17DE0421A47733C2BD723
9C876942155834190F65598810AF8CAD9842F8A1E3BBD2AE3348BD8FC9189FE2
ED5643EC4D87148775121702EEB7639ACD80EF4F07542BBBC09F98F81FB91A1C
89C691BF38CE4239B11C1C0D9A6B864753E204C0BCCB093E139F9D6104FE0584
DF022C621F86E5BFE2E047FD560E8A89B3872C87F7811E9EBCA9CF182472841A
88E7C421E5CE69DAD123B88D4E6C0FD85C86C74435BFCAE28C2B5CAD57D91A9B
4473906D044085B5336B066C6D9CE994D2B333F470AD32D3BC28BA2D699B7AE6
2B689CD50CE2D458501EBCD2381F3430C3059EDCA22D9F15CA03CD18CB160E59
C0E960F79010DC1E9EC40BA6914F9FB7951CB4D5AAFAA135C17D5D64CD848A32
C71A5C856CC9C94F24B6C9AF854B83771678C0B0B4C6A4D9C05ADE69E5C04697
8751F11D2AD4A508CC61D06884D6246FA607802124E77FC07620C1DC238000AD
F6AD8E9D7418065549E5A7DE64405908A078F353F447D44E968A8BA903DBE04F
677479DB92989DFABDF637FF627F4756AFF80F27EA2B9ACD21AA8BE59F75A8EA
AE3BF5ED74076F822C41086CCE1E87A943549450BDB18CEA58D596BDEDB2EA43
8085FC9662B6C313B5CB54A9AD8CCE8BAD25DBCE0ABE023261A1794761FA8430
E43AA6A59BFCDD7DCFEF07F933662CDC5724D3A5C43A25929B54898BA9B58D30
C6F19B4DAE1DDF8E068A8B441C5B5E1FE556DB195D2881FC9AAF598C88CEF222
74222E0FF68051E53B460935C2DF2D8A77807B4DEEAD3FAD1E46371B4494A4EC
B43C272E0A1DC0BFDFA816FBA451DCFC20B89F7603803A12861C0FECBE1F47EF
98C35E5DA9D57564EB8DD80FC43D47B3C5D419327F7870805E30810C134DCE8F
C1F5680ECAB52B7666FE5AD07FBCE7B6C7466C36C1FE04D8866F9251B149042D
71C931DDD8234BFF1BB6BC76E651CA85C0C845ACFDC98ECFD8D07A125E562356
B7D819379BCFBCA830A71389C246F771AF97AD574BFE9944461FCD9408C88D6A
3EB9ACEEE59EFAABD76D5677B231727E89E110AB58F78A4BE43408C7C2F6D446
5B31BDEBFFA59B2A6E9438E4F5075931668B04698B3CBE8F262043BC15C05289
17E8327FB8B6B10274907C8E9A28945C70BE2EC90FDE715D61801FE189AB7A75
30A0C7C921F074C2C63001A415D6978EC80CBBE250BA0562AB6D29135BA477FC
3021B6854484A0592796449AE8F9B27B222100FBD51A9BAE076457A0A9E830C0
658485CA6304D445AA4B08E97B5BD3466C6897065446F7653446FEF499C10BBF
BDCF134E1D1EB8B314610183673444B6645B55EAD0550D79E5E4655E10AE13C4
0486C064E7C7CF994BE8DE8672207703D00D9E6A2484139549A171890B36BD31
0D1A184C084913958D22575E85F99F8590F62933B22EC8CD48D81CC019C9B4E4
1A80822687CF6CE66357C4904B79B704C799AE090C2E12AE0D988D2190616F79
3DB31310AA0A8F45140EE4FAEE07B79952819B5FF425210978F6869E3C1D26A3
B34DA0CAD446335287E949B2DA10840861A6AB8C7F48779F207A550C0806D9E0
6316B400896E31F05ADC4AA9717F440D77A9179EFA63058FE7FB2A50F8C443BB
34DE070AED19C9C4F9725A3215D16F7AFC92937D3C14CA769A6A9AC619CD3171
3A7D8FEA525C4056C91D75575ABB9B675475760E419838B9087C27057D0393EF
B379209FE1EE863A3E85591069A9254BD2E0EE8A2B8F0F427D0612960147A3F2
8F0BAEC0BBE3AA6566853377BE58C2C6BA2ED160DE50D4E677E6F550F9392447
8B165E1D27838110F8FF6DD6FDF305FD68CDA69F8AE9C5604405154ADC837CD3
20A4163742D39561F7378CA9710B07715D7725DDD482C01B2BF1A6555911F4DC
790674ED864AB42DF68C07A2ACEBBD47194C76DA5741D88DB558CB37DE4FD3EC
CAAA6117F981891A5792A10D1C994585FB8AD717CE578785F0CC9E73346B1FB0
2FA3954285E77DA2F9C45BA87B2BE78D8788D0872F81E9657882952145EB951D
39E57C8BE31CD6B04DAFAE557778897124CE313C2AD9927CDEC58B61A7D2D635
6BF31FF2E3A900879B375DF848EB30012F048B4760A6C2E6ADD8F2930C56EB7A
FE8551F5612DA38C110B0D893F287408CADBF78A9B5362735B054CF3EBF5AA60
64C8DDA0974C49EF8DBD3C3547A7BB582977D22E8C3771E1C7E05F885E3AC77C
D88DD8CE2574B47309476377016FCB6CF1860BB0323942B77D128365DDE72061
38CF2D23227DD5C8D2D7B45FF7596C82C1D3A822055292500B94E95873D7CDC1
0B11FC5829429F15FA1BF32807B1CE07B7858FA2205EFF87FE0EC23E6D1F9684
6D3A2E7E499D9D41B4B57D61E1CB07CCA95A3B2DD8097243BFCFB7D12CD2A014
E23AD16B9372FA0A71A43071CA6C0C8A5BC3F8DA49A76D81582F4610D9971042
BBB8AC5E1D5D864C3D25B150A4D25159FB8121C146F014C87C80C1C3414B1023
35971E29EBD34E6EAE4442B785289F45C31DAE045122F56077DE4C0DCB3EE74C
F67C15BA8EB3D89F5E9F90D4BD03F30AB7AB849450EC2548552BF6F52676E160
3BA2BFD3B585AEEBEE5BDCA08B11E56BFE50B94DD4363B87AA83A7BA8C997C69
8FD12B02C5EA819D161658BA2081B885BF4865E02A8535602B989F8B18B28388
EB4409147EA9CC00D21FEF4631D400ABA9D113AED12F0EF4DB48E12D9D480FD0
3306EF7707617ECE0EF359A925768A3CBF623F5E2980FB86F06FAA5E98124881
CD477B308B5B7341714EBBAEB38BEDA28D35D73282D4F1F9A15C4403B7C69C7B
74A20BC3423FD37E586D41CC4BB36198BAB18372CCB1603DB4A5A4E1627BAA96
D856F2D9710B38FE827933C1FDC89C5FB383963A3220C89D103EDB338C87F126
EC4447ACB31615427B7572E8028C7BFF9495B484700D72CE5B235469C4C7138D
06A32D37E4D24AEC5433A106CD00A3429F6330121E8F22BFA734E9AB8F8E57AD
DF347588E65C70D1A1925C71FA67E9DEEC23D2195359D083D5CD489A461DDFC8
C9D26ADF94C4AAA1AE106F7206C7102AF727DD283CDF7473ACA3AA399717BBB7
714E8EAF6F6A05033E656411C5CAEA615430A9E0E4B81F3D18F9958B3E5E1A00
9B5F374E9C80F45AB3457A2E3D641BFD07D12B4C0FCCAFE83B30690ED44E2A51
E74C0DBF08A2EFF1C66B148E036AFB7FF007F18AAB4CAA2CEDB6DE55D203AE9B
7A5F45D61E025397644430ADAE42ACE206EDB6E3E0C73D943D64D2ABF634FF6C
2A313F2C53A68A1B13A88B332B7A2826CEA8A85101DBFC468B8AEBC502C6D41A
1F22CE4A41851366801A856D907742C6E42A65276F5F33E63C9115F886D0E6D7
A582C43C4A1C0A85A128A440DA9EC86DDDCDD81370BA84C972EE85604DAD6CF2
70950D5BE890B1D54DDD17E8B53DB5FC355F6A0B94B985B7F10AD28C7EE8BBCA
AECEBE0EB199EAC9EB8F7E9369A82A2E183B6A24D6C8BE9C8D140B328A1F2895
057F1AECF691E2E7B9924DCF25E9EAF730DAAE9F50BA70DAE151DC0450AF16CC
A790332862087358842F3CEE9D5D3FBCB63653AF1177739126415A794889455F
631F4D589C69B00486C1EBBD1838CECA30DAC5D0A23358A5F1BA37AD932CA072
B7F4F1E9B18DFC863F0E99E487DBF1AE8B44DEDD7C120BF2893F595952C78314
4C542040CA3CD4C9694761352B105E3A8C19911FFE007AC97BF84A06C0941CE9
273B15AB89561C37924764E320CAD9838AA986222AA00D720FDA51C2041AEFA9
4AF4DBC564F7FF3EEB25CE1B657439CB7AC7DCF575DFD1306D5ED9CA77374246
E0A7002AB7775B74E8AA26084E24D5C75F49B06F3E0257671BB50BD4BB5C5365
B29BB562E026D4A5292467C240C11B4913B7FAEED43BAC24F8E1715B3DB9928E
440DF494CCA0943A9117B069C3ADE9BB0E1C867DA8FBA751774A6A30DF6AC972
A38217B446DC924912DD405551F77959D5919815A98A89EDBA52FFD7F2132BBB
754E07D88DD634787FE1DF52B38F3EED60778914793102D2A1FDB6EDA22EC0FC
D0D15B44210AECD96041DF2C1D460C531821C23E4DE1D35A476091B200D83BB7
E25B8B704A27AC8ABDA4C04D637DFF68DCD3E59302B519824A3C6EC5B8DFD78A
27E9A586EFC454674C2C77AC27CD2D94DB7BD765EE9BA2772CECA00B5761B269
929C431F13BDFDBA9895619CAFE2B3232C2F1213693773310AF59FD09FE6BD3D
F43849D0FA33F0C213D6CA61D3C5CAD691845DD924AD00F65B72E35DC439C773
08EE109A5057BB20611F05D522A110E20C551D57B980DC465F0BE54800CC27F5
7409347B0DF15F12676FE2DA8E437A097F487CF0EB3825392CADB0A25FB35E5C
17662E8C088A3DE9F9BEDDDB4D715B4DF9EB5EC0E43974FE41D79CC8525F0820
C31ED465EBD4C9ED6B07D654AE74A7F8B19F9CC9AACA37D69717CF020FAC9792
851F1CC40481634C777018C2E5F8ECF12B4FCA274C572FFEC24BA30EF9DB0705
4965BD2200E231574CE99C0F28418B2C299233018717673D04902380B648DEA0
2023C7822BE4025B4A609DDC0263A623B96672467C628929CEEF1714A63153F1
E0922FBDD3D7BA8C254DE72495BE6DDF7C7106451DA13085563129DAC4518B7E
1005D1750223115919DE72B125BEB21EF5798C8B07FFCF040763DCFB1C3C634E
ACECA682F454B02920BE88F84FD7F6D626EC1E2ACD0EB3E40B3E095BB22888E7
109288E0E51623CE0E21C279F2870466250CDE486DD7255437F0938C825F8E4A
9A60DDFB6761DEA090CC0562228E592A0E265C8A88331305402A4EE87B47C6BB
635B33684008BCBFFF79DD7941D301DC3AFA580A6A4C9C9C4B2381BA6F85C23A
0907608E2E01EC97467C6613039FE2B738745BA018AD686C769411AB96827D0B
75F95CD169C58DAE5EDB91D1E99CB308097A4B33A04A3C4567C791CC36A50035
9AFB4A63021BEFFBA93350955B2A4835A7EA833F7E4446246D70602D7AD1A3D0
F20CF59DB3508C926362CBCF599BD777E5E23B8400D07F27AC31B518F7307BB1
CF33F49BBF8D05E538A6B104695D4607B5FE505846B96412C53D9B0184CD3248
0FE75C21D130D1245AD1DB9B5A7A6A76A58A4694533180B12D648ED51EAB4FE3
E968B44221BEDA0C08CA210A3E5002428A0AAE9DF73C37D16FEEF83D4B8D7191
A9C5F8F8338A0E519D305B0313F79DD0D1467A83942F085E589F507F817C04AE
8BA59F0EAEBBB39952D49DD1570F1FB7DB958DF7C5F5A79F47385F4EBC80C48D
DAA1B84F50232B74264BE68EBE184D96B18AA4BAB8207666D252700EFE142213
831E596508F72830EB272F36F978A460891C5E4D5FFAB8FC9850A9033B93AB16
7DDA27F38CB984D7687EC71BBD29E5A4B3CA89134E9C424C4BF51EFB27FA4B9C
F430BC88CB9B0FF5A6E013BD7D621A902579281DEB3D546D9CF622CC626B8836
08352261251DAFE6E503A1EC23FC240D9E0C1B57997B446E1C506D76C9184F8D
AAFDA257C4DEE0E44D408757AA80FF7349A406941C18F1398EA92DACC5658C91
99712ED47DD91FAF70D74209241C455F604F57B0472568927E5B23E102563716
A443EA683DF15336D07A31B0546A4127D581B84DD05B327128E4067408A67886
CDADFF3B72732ABC927B50E2CA3CC973DF2099D19B44295BFEC5FB590BB9EFD6
0F9D0ACC2CA1AB86188D0C5C9C54CE9369D5B87FDD913169E0BEABB95F57397A
31C9B64002B390ADE7FE38149C2089C9578780462BC8F3AE8D6544AA69959EF3
0457DCE707FFE45A7B6E640BF3D98C31A141E109DE87AF7080752C6F5ADB6B38
7B0DBDDBC51D90BC83918E26510143F447648B57D3CFD35C10C367B7724DC4A8
2FA17D6A1BF291CE039AE6011F9C3201990BB24CD0AB080DDA831A5CFA00E063
2725A66BDB67CF5444BF279D43EF39127E869E46A72B6150DC759BF362DA6771
356EB35BAEE6A26CBC7D9086F80F3DDA9C5049829809557E922E524AC2678057
8308ADA3B73C01A160BE03AD5C2C4CDC280C8702E24B7AB8A5C5A2BB7D775235
CF6D27C0F914E665E9D850FD30803EFE6BDF653BA1E7098F7AEF1E5EF1C597B1
9B7F375BA08189712D595297CA5BB228E7B343951E055A56F48AA9A5F42BDE2D
0FBBF396531AFDC03D20F527A1EC42CFEA756755013CF3B45B758138E0616DEB
2C552FDB98A0D03B6699078AE26EDD44FB1F83288CA08FEF7194154344A4B525
777961C3CCF26F185BF167AA859076B5AAE8969D9B4CA6132AC03A25067F45B1
6521AD0199BF61E022A04519A585B0D50E05208B6D2C68F8CAE9E03728998E0C
E512998D42FA38107DB1C1CB3292E6AC20CAFF2E55C5ADC3F4798C3EF4A56D79
AA6C5EBEB45D3AF9C13FE275116CA98589E3ABEFFE9F6EF4DA25634F0670E0F9
4E63C0E6038D184DC74E2EEAFEDDB79960AAF40EB540CD5ACBE14268833BA0D6
4D1D333BF473295FCA42AFC7E0EEFDE2DD220D8D62A9926FB0E1DCFE488A4121
29FAA0FCB6BB326D4053C7FC5DEE702A858E099911378067489DD96DA6EE8B8F
BB54F80607494E08EA8214CD4647556934DCF47621948723B39F1877B5F620A0
139D762DCED1FB3B3F21E32EE2D281367E1A90090B02386BEACC3228335B3A05
18434E4CECE43EEDD1C200D4605376B388DAADD18D402171B1E7A97A6D38ADED
05C6CA0B8C4C546B1A709FF15CEE8CB12CF89D9D3182506536172147ED365710
5C3B319D9C4019810E1967D275593B5A007FF7C9C09591816609514BCFD73829
AE688196034200F74BB5CB5E9EA0CD76B32B4A96E0D36E79084A6E01DF7CC9E7
1711A29BF35E5A7AB099BA31C644F4393C65C854AE7A9E525E0B28D1CAE6C4E4
1625B6C1F9A86E62886E826B1E34FEC34A90D3FAC2AF1FB275E4DED2FBB63DE1
46E1AC092E3FE888245721D1A0993527E407C8962542E2E3021A0CD14BEF6115
D2AEE6A1DBBC525A06D4EF01D9FECD5C795DAA94A1ACAB3F519B3220FBC4CAA2
849E39805EFA48E9BC80F485B7054999E5078D091AEC00E3C5746415B1D1F480
33C4DF64BF1916074A99C58A664D4ADEDF7B74E13E6D85E03E615A60A2A83534
5BD39E67394AEC643774D439F8C4C6986748404CE30DE9213AC1B337A488B20E
965700971760B311521C5DDD2FBBFF0182B969C8B3B2AC8E01F22C646DDA1374
D05883C73F40CB14DEB8D94CBB8EA969DF366D3E1141C63A6EC69BBFD9378D8E
8982F5AA2428AFDF83DAFFE2CD8748559AC37C809D3DC43BF179895E1A40C6F2
10539EE6BB469AED90BA08D8A485668D943A073090C526CA1A8F1109625A3415
0C6E51CB6BD0628D87092F4E3D32343A4B6B867FADB683CD2F707540833CD2BA
F0D7FDF343F7FCFD87CF70678BD423D71F557E12F4E64DF03128BA190C87C37D
CCA980979D13097DE3F428531517C102DE4586D32D51343A265245470477E38D
6FA3D11804581247D7A27250B5F27579F25A18C45D8F29B489327DD7DF1200BB
C2060BBA94E19271695EBFB4F18B9ABFC7807E63CE3D554A7BB3C1D9F9DFDD40
D20906639E0243D98ADA9643735409D0BC963430775945FE528FB9A1E6F3CD88
55A1D9E16BF3DADDD9BF7699B1914D3E816BA48162E543B16DB2872F80F8854F
5EFED994E4DC12086677D38729C5703627FD919B75ED0EBBCCB03E7535D6EC3C
03DCBFD3CD474013A0DC7E2E9376BC1488F0F22E38BEFB071B9FFEBE0D0E14BA
7D5E4426E48C0717C8E8A5B1264DB872989A98F2A47F13A9C528A198B8EC8620
0AC3830E66175C4B54186B1D6801E39931F36530F788C8D01C9D7573936FFF6B
6A823934C888DAC306CE4D07ADC11915133C496B406D6D48E04E2D2629B3A868
19E9411C4B450506402F758DFBFB408FDED7AAA884F2F6EAB09F1D15C0DDF955
F214B70A745CD5A5352678D700ABBFB4B8CA9A029ECCA0CE83C9AB0729DDE545
2DFB1B69EFA2ECC07B5E62FCE734BC03EA38962D9BB73196B89EEB1E033A25BB
4CDB09AACA73B26A9BAA42A8FBECA64C3444728D681EC91C6F8E483C8376BA18
203DF60B4AEF8D0DAB719F6B84DFBC58F89AACB864C93C34EF18BE533ECE9AF7
7D62ABE8A3B2A5A6D96F9F22218FDDD7E5DD25F8A25A6E372A50B6A0AA6C2349
2C0A8D7E5B8259B5A12D9918C225AA2E83CDC31995DF4E5C260CEAC13F9E6EB1
78DE388A7C0934B29652E763300876BB073367A61A91B741B3C920ECA9329513
ECA625CC1C5FC3AFB291A6B75A593BACE2581F3B8F165270E90C727DB9E45467
0D51D7F880B7D1E2BE6CBABE23A220F662247DF70428C1F79C7968439BFB366D
2E02D65D54DEE623100F6E46490A01F560115C525CF4D5F48CEF2728CD776420
7FACEED85F6557B69A3C296AB7EDE2DE6A51B697DCEAC117EA056D12D37FCBA6
D5E61B5B11D5B16C646BFD7EA160518EC3FAA2F7AD237774148DADF08503BF16
6A9F41AAA88EE6187F3D90FB366D2E02D65D54DEE623100F6E46490A01F56011
51B3CB1C886ACB3D1022F770E256CD75521A8C020F9E6332983B505372701FFC
741679197360213A13F98136B7D68F86390113BF944E37480AD3FF9C10590C07
0D167F9544BB71AD967C4B8437470E4D020FC6E867725192E66A4D7D9F22D433
947287EB76443C23040EDFD082CFE34502B84153B1F9E5DE919FADB67C8875DE
7D96261C824F0B50DFF55BC0A1E2DB0883F90B78285444A420EAC70C3A1EA27F
2FBB2CF686E15BA73E6ADC01FBB72CC7C120D81A02F786027A9BA12713D98E5C
9321D3DD4BECE9B6329455158D66FD11BBF975CC4F481013B1B34381FA7BED9B
BBA6BCABDF0F1771AEDE8BA1D267A8DDEDF8A96758018E584A4CA5B0B05E4432
C1878DEF01ECD5141C14CAFB9AFA3D7FF30D31302D1522C8B533733C96A4EAE2
1E644859CA5C7595778511CE22DA809BE9F612EC537C98230FC3203062681DFB
3A2B6B31E07F7FF591084204A5F74B4C57434FCEEB0B052C80A1C10223AF53A1
6B1D4EA3CE084D8D33A3AE4BFFB6997A5608992A57F3D874E3AB2D114A58F8E5
3D6DD38CCDDF27E9A2EB3313CC99779AAD70D1202CDC5E5A12AD19314C31907D
A998AFAD854F54BD4E712EFC8502F0BD1CDEDACAC06E3DFB32066DF175C619AF
AAA87F56269FB3B4DF3F36F817DF500AB24FDBE046EBF0FEDAD7F5327813659D
ADC72984F59A36011983ECA9CE7C52E5F0552A121D0F6087D6FDA5C0F6ABD1FE
20FA8E555E74602E5391487C07D815B6CFF07B6B3EADC1194E28274D47A60999
6444EF090F3570392E45F511B594AD285C00F92400CC746462D3B237E4536F91
7FDA25D9109B786C04A7B4DCB7BF03630A12F27A23419856A87ED25CDFA615B9
3429ADF9D8A9B9AFD9BF39032EF0B6F08645D0C7527A3940AC414BFDE87C8DDA
445B9D579CE75A1F159EB60B49085485FBB2AD7679F16E052374CB0D0742A314
497D1D25B4395812479AFFF7DF7065992B7DD28F7C9A3641466B2E222812A64F
A47AFE7ACB77DF9669125D28EC455342541E5C343B4FA4D443BD58101F706E82
CDACC5CD36D96F695A2ADD118EBF6C293143BE324A6E5DD27485B87409AA8B12
D22CF0952051495E8A880B0BCE50FF617DABA7E4158579AC577537746A4F79C7
F5FE0658EEF93585755BC8F333A77985476AB3C0555282D914D69038A15ED9D0
4A7D6DEA1CDDED30955B9E08D8BD04B6A33FE4897153F85738BDA421A37A3158
D8990D8EE81BAEF35BC0F2DF1EA304B73F2968805884C8C94B5D461A009DF7C2
666BE4F423962E2D472C414FAC37B353A3B842E5DDE0D88503EDC03D48D216FD
7D61FE47E01A6EB75C34E8AD1D722E59AC0478EAAA0894872F925598158F2E92
F550976597C1AFC38EE07EA1F4CA653779AD023EC11BD911F38C6954DA65F16E
0ED743FF52188FCA5ED5CC6DC9C9012A64D26E282B8A5634A2C401451A53752C
5AEE42439A707D32670F210CDE4B8C30E1F06EC884252032179BD5078DC719CE
AA6DBA13BCBCCC282BAB706942019011ABADC172632EA67374D31276B86AD143
0483DF9E92DAF0D26313E5BD17A12EA617930DAA3525B7AD81D3047332879171
7B98A1442FF9D14690E19F47203A86D6D04E8CC46030810E82BD89B7DD71BC3C
3A28560950305462FFC9C56D2FFE90EC9157C9379B78851361CF5C913332422D
78B53045BF2832D2419CCA7D574884A221B78214CDDE5007E7F888F4D333F5B7
C93ADABA58CDA40DC812FC07601A528C2A2CC4A75EDC0853E2CB86C76D8524EB
40A8DF452F5334F6ED87FD1A5ED3E41FE6F19F2F7B4AB03A95CE57F47D8B40A5
A2EB1BB8C26FE9004BC127FB7367DD9F73C88E4D622C39534F12614E0DF155D7
2F1EB2508279648003311E5B13D4214E6B52B9F5684AD99C6B52980A9B6F4C72
FA185E41F8C63625AACD0916A4648BF5BEBC528831AE8C3DB6684096A4CBFE22
6E7AE728A1B19B88313419BA7B64E68CD0F58CE1D60E5891AB5BA93B1B72148F
31572AE1B2B9A234F394EB619D4FD9EFEF43C4933AEF12E05A4AF2145FA0FC56
73FBD1F0E09303F8F6B6644440DC65622EDFA8E6EDE9A47DA62658B43CBCBC5E
8CC1E8B255B43E04EF1076D4422E27F4227102CF7D568055B154C776D73AE198
962F216A14775AA537AEA0C96D41BCA87F42341643BC0F15C35BA9D7B664BEA7
C44E87B34DD658C15F74FCC0988DEB494BCA1B6C3BBEB6A99725AFB04C54D3DD
C0B03DBA3F6CB29E1EF04A52962CBBC2C89F64B7426E0DDE0C5F17A43D600E8B
DE06C06351E337CBBBAF7E1DEFF412B9EA71B0399BED0F5F25591E7EE4563988
E68FA104EDC28F7B0728F6AE31866E4CC3B9A481778ACF91C1C7371432988870
65AB98241E7247059EBBDE1BF5AD5D03897F53DA8E917F6077D95716E5AC8442
73566BBC5FE0933E430CBEF817DCE1BA41EA1CA2091F4087071ED8B4A37A0A99
7B1509081354C8333E7D40ACB70C5FA5B962E9CF116794316E56A74DE14A8D45
F84649F94FAC09FFB53EE66E5E85F134CDC2B76DF1BA594CF983C68B90437408
52B44F8532B18F0B272D2CAF5B322CFF5F4E5EEA59EA0C751106A029B28368DC
7EE7C97176E38580880F97B8B51A32372A937B60978AE0D5CCE8C85FDC7D9BE5
1EA4DED86D7AC8A668BA8ECF2797B8A82B9D527848C1F7CB9221317C8F70535A
D42A94F6281F1192BFFEDB197846A4540C3660B39727E4CF18549FD13673B2FF
6A52C9F18AA49FA515938E085366ABCDB59BAEC5A6F9CD97B69D42ED90686BBD
8CC79813E8CB95FA682244260842A5ED48B9915045AF99FB8306728C9447DA48
680A8C419A7752F2942C4C4D79D304170A16CF107442DB541B71031C1702D555
6FAED1CE4466BC78326B9385D96E46713F0DFA25CB40A7AD7328EE874C52C608
600DCF2E8142937671B3DF5F641E723C23300D20A712B256913E52D41940B60F
E817265F192A9EC10E76EAADE419438F44609AC2EFC9120F0B598A2B32041AAD
11A159D2BF0E6B0C5982FD1414D6CA0F84ABB57F119305FC57EE3FD4C2DCFDA2
50A20695E6D894246ED005534BCECDB5D3F866C42C7368D56C7EF199006024C6
974854641FE560F8C0078A809559DF7A94EB81FD61322F1FB69E5C5D1EA498A1
38CD5AED408F030CC95447F3FE900978937FDF0ED5A20C3BC518DD1263F252B1
6F93EF2B429BE1366D7A20F17CDD020E1467961F23B578C4992EA47CC17C9696
631122FEF6C4B721ACC8F7296790FAFE2E84B3756227C8B6EB69128E5F4965CE
EE407F733931E45172FEFFD3575664343C95143BC0C81D5A73E52FBDAC6A8BC0
AAA21B870398665AE86F9F3002665513A4A6A6318992D95E40E29D0B4D7D727B
616FDE1D147BEAD6851D32AA73D1EF8EDA349D2E65559FD28EFEA89A9CF61418
74358F69DBE743813AAB7CAC97FCDC586BDDC61058D85B83B40E6C4502D0C1D5
E8CB34DC46A234E8AAF33A8996F592C9D43B2453870431427EE9EF6498161C79
4F644EB66182C06E1776B1D9BC9C54460F8A781CD9AC9FBF383B3364B5717632
66A476141C40FE6CF76A2F779304DCD9A5B9FAAC4C0AA4FB7E762B179B038D83
C10F56541D8251248EF220E52F7013B6AF798D3CD4C03599F52F61F11621E068
510794776BC74DF0244AD819AEB7D0C42008423D9BDA918225DADE21E022F6A8
A812C1CC027C03A04FF34F9ACB1F053EF0B47FE4DB2686E90AD0A1F66684F424
4506038E76EC13C6A6D39A260B60D295B80E476F9ECE9F4D72CA38A610D68540
900BD23614B66CF6B3B7A3B9358FB65CDF6A63342C7FA447EB5E4409299D90E3
FA5DAAF7142BFD621A9EC8A3D037D083F901F706B464CE849B3211D79039E8E2
B53FE7161103CF6CEEED40250F177DBEF860B21ECAA82C807759D2F5531C83D6
F38DA57502C43BDDC5CE6D7454163E8BD50CDD078B2B3129F157CA272B577AD0
616D09DDA2A16584C8D40E7F673FBC84E97A26FAD924430C88DA60D539F1DDC7
A6C71C041E38FCE81A6B261AA81DEA1BF74F5BF076049BAC92B6FB9D140BDBB4
6AF0048AE61C09C54CCEF9751B8A3C854A9A52B3182FC0E908B4F83B885E4C30
7550A32E2FAE2FC4341C7B2B6227C7A655304CF4F441046C313A79DFA99F926D
9995915DA277694D88170D993F727ACDCC09A566332E5C03F528601788EEC9A2
65D8E2374D6042A4B5BC994657B3A2C968EF269DA47C4E6B45E56C56A2CB0297
E6C91D6CFDDADF9652D054B34B4A4EF588149C84C6E1DDF42080E6B5584FA1EE
0C768AB997A4BEC3F515F8544E66CC01BEDD930B27D4314A1032923ACE057116
BF380FB698A564D70A67BCE335A3CE8FF2CDEAA9239BA942BB12BA9741C4DF40
D44C0C9E833A5BCC9B6E3ADFF835926F542D02CDE963AC7BC2AE0FA4B6353BEA
DED607376CC2644422160EFA4BA0C1DF2A2A29B18517C9E899B7141A237BF577
2DA451B0045F9F39C493D0F5CEF5F148C8E3C0744E633047639C5D0E1AE0A98C
F30A0BD29303CD36EE6224C8D867B0F2C3836C8AD7C40C922B8233E4971AA37F
3880260DB5505BA6134A70CD6343B5C0A2F44DAF2AF196D205E20A2D7C636416
8CB927FD8289E9F1B5E29E5FE0D58926B83D1377E1D5BCA58E20A1343723675B
596817F235263F901F6DCF242F0D9CC02F1BED2189616BDA0787AB65DD7CCE3A
85E304DC41A642F4CDF648948AFAA4854D3FA8B2CA86B637F3C1E724BD9783BD
5F645D9518425588DB8647BDBACAECE1666BDE062AA61858E8B7D21DD70992D6
2C587736A9BA3DAAED3DF19E72FCE7EA39EE56587E88D77EE938C0C63164027D
11D4068704D25F4A1042FBDC37142048391241CF26DEE37A0DD31AB275E311CE
56EF8E6B3279DC20CBF6C00D9D7C212A10C46227A84A8CD261105A55BA5FCB42
3C7FDB8ABC12B9CF2EA932C1443AECD2BACD55B1F6278AD28D8AE98E2882439F
289D4118707BD39B489E544753E9D9F7786AF63CDD9131A617E7FC8FF1CF8742
A92AB81DF7232FA45599770732EBB5A4C7762716150795CF2BA78D4E55F8A259
18FB2916F0AB41B429CB513E33AB6C347B9CA151FBB1F304A4E1D1B6B398919C
95E95B262A40A4142963BA691DE1D00A4BC548E19B5AD813DCD97FA38E822135
E3956F0D209EB2F1051476F136C1F0BAF8573488CC482A7B2461BD9055330FFF
3CC7217F3DE5EA21CC41E3989A82E640C4A0DACAAB75A89F3AF5C1080E19BD33
30C8CD742E2B90ECBE12C6569A79136AE676E52680371D036D1801406A3A5009
F8AC3F68783E806D7FEDDC4387DDB2E10EF3FA3985EDC86A731EF8BD73148E88
5B22C95FA78B9E9B4E4483DD252D9F36A6BB79660666CCF6F02A2710BFCBE86F
DD3101B98627AA973F9ADCFCF2099128D14082AB168D5C8F61B2B8C26A1EFF7D
798AA003DAD6DE32F1544D6568D883C598CA1E2C3BE08AAFE98B384A7A0899B5
96FF926171B0E25FC7692384C9C0075818EE391ACC2EBE58CCF7BBDBA20064C5
EF7B5FA8C5621724E3338399C2DE4B757895A22E4177D444EDF3B5FB00F28D78
484342E657F529E4EE5DE0AA949E5E34EED520ED1284349397490EFA6DA31200
6909B47A0B6B41B5B18231C7BA4D24D344CFB4675EE4279BDBD83EFE313A881B
89C0E00E931727FC83D88A8AD574B6C9E7AB3DFBF7160C190B1409462EA2652F
E5DCCAE674EC937B2546BA0A3DFE0228F35C31DC5FAF7F0AA9FF3E1C2D6A8310
17332E8D83DD6B054186B729BA776A2C6C2FE61C4C99E34BA06745AB4541FA49
7C1211854463046528202A452C3420F1AB3ACBC5D65E427C2DF89FFC8F337C8C
D0510F06A63566E4E13FFCF18F6046189BD0022AD86D661BD0C1B7AAE7BA5E8D
5E522FDD1A87B85850B6C8CF8B22E6CC94F1660E4A93CADAC4C28FD713683DEC
1DA106227D7A36B5AA4F7408D881917A0935303EC1823825BF2E2F5C26BCB2EF
16034D9E2C7C0817245326322B9CC4939BAAD44192B47690044F3C5214C42F7D
6D45D590A5087DB46F37163C3155A2C612CA44A7392D8E791DDE1DE818BBF26C
E3BCC1AE39345A9B68B3AA8EE192D9328E21D5DB7751562EF48ADBCA00AF3A35
859345E4732BC03AB10851B0883A211EFE272E0E4F0F1DC98C47A78BD0357B42
7707797E0E88017EC635EA258404F601199BD3D3CBBA1CF3B7788A7C8677D7C6
910FF7B94A9353307B572EF4329C555235F809450303520415FB3E47CCC39325
326E15E7875560620514BB04DFF82BF14931B8C01880C40D8EE814A6B7936118
BA9D0F5EBE7D9B514FB3AD474A31C6A9E4B57653F9D83164DBA39BFE7765213B
7D57A874594FA5CFCCAEA25B4A4790BCD610D7A203D903D20853CC36ECD7193F
90BC0CB3045F9813B547A2A10CE66934AB31C2942BB07DC70FB82101C19895AD
CD1F6D8D70E6E3112402DFB9B35C8E52D0C204253274DA68CD751A7205AD0A57
2C5A5392F73DAD10DF995BD98FCB720B30795867EB4FC60F6AE7BF7BE4B31075
AA78AF3C630A84B77090A3F9A21E2D447FE9A283B3A8C6A36512C9C9CC7B68BE
EAAF9013207DF9CED38336776FDBE747DE3E2059CCD4972C4F2797A7772C590A
835A6D3C659C384735EF641436228895479A6437CE495A0D1979852A59724ABD
636430D496E772B13469BEA63CE279516DF1357BD9CECB2D86E4739177FA7A8E
F12D03A1BA252D76A8C51EFFE9AF6D6C0F58D3DE8C2888B43EB81B61D7224243
3B3BA60E796C29E1E4453B45FE7FE7C1D355A75BA7F35B44E99BEAB6BB88A9B6
573989E216B59E7BB99EBC752159205C127389682FCE5F5CB6F03C7D5365CEF6
C182D8613ED3A26B7E8BAA8EDB4D11F9D20EB4A0C9201D2980CB24681C6A11FA
2A5EB75B3FD961386F3C0BEB0B8D294069E1055610056A05818B44AEB9F504BE
D3487D1FC8FCAF525515BF52FD45320721BFFB87076BCA1C263C74BCADE3957A
2F7BEF0CFB7364649E557505A1366EEAC197E772B9B793866DEDD7B8ADC6A563
C249F33FB375380B34888EFA8DCA131BC4999FC01E54A639DBE7BFF8189A2583
50CDB97056F97CCC4209CAA120DF414BF9044A05C3E613E093228678586D1590
F4C85CCF00AA107EA2DE64C1D02FD6CAB479553AA9B765C965D69118D313BB38
3C12155843895629B71900A3ACA96791E39BDA97672CC2DDC0033D035B1D76DC
14C0E3A5055D73E0418C5BF14E72341790C7D753E73571F3FB1CBBF3906B941C
593E76EFF0223DB9ACA607BC3B849C4C417FF9ACF675B817793536F67C1588ED
D14D6BCBAF4D8D22068CFBE203C130570142D6849BC5B3D0445B30D984FBAF9B
1904FF0B753618A374051DF4097191C6BBC815C3DB9617688D9F4B94EBF84ECF
DFD0453EB0AC2EC4684B0A421880905B63CF391ADA2DF440658BC5CBC9F250F5
8B066634E44DD04F6367E04C3CBB3400BA3C1943B874CFB4B551C8AEF37D9872
B22CD19ABFFC0468B2D448A840F3FA379DFA26A2CCE2DB8A256480528D81018C
B12244C6B6D17EB716ECD75C6A6CAF0F0FB5F6A73A47FFFB9D64165827DFBB1F
3D0BE971812A7A83450DC0675C45C27A13BBBD2715859B5C81A2C07F42C53E87
33A85F5D175086FE584B86FD1D4E42D1749C64E0D05FD323718C7294A2012E0D
BB45723E3858702BD9524FEF8067C9C0ED749FA3CC23650C429AF024EF5EC259
2A32E90CF70EF4A1CD94A70F6AB8025660CA3EAA7C93B7524614BE7C953735D3
CD79A5DF50A35A7075E0A73A9EC77B59540B407D462BE4E54041F97A726D2708
EDE5A1513CEE9710990BE2962CB44AA85ADF6C9108935595DA856256A5356187
4A9FD535B764932404F3017E135EF4A0FC537A4959BC52FD1EA5F3DF42C664BF
1D80AAA5FC3B713F6E51125E5C22D5EAC0F1A348C633B9FF63BCB6432087B8DE
E55588A85CFFD9A23A25EB45CED97FB553EE3738DABF2AE3B0DF0C10D1E1D889
0D8288087B11D68689E119D2048BB631B02E339C18C3181BF6DD30F1F1D20300
6D976EE25697E1E5A8B467F6A0178AE5EA53C75F9D4CCB6C82547AC619B71539
0765F74C73698E0DC00CC722B6DF68C00BB0B91C2E9F665A9DA68A334113A00F
62F7A578C9B6594CE895A7DC4044F60BD22152DFDA60295CDB821EFFF0BF941F
896EA44F0BB9DD2FFEF8C6B373C1B8C218FB1FC5EFCAEE62258A2989167B7DCE
251964CE01B71CE018B956D4E094D0AC7C600800337D555DA5AB9CFE2A4CC0B9
DE515B301C9463EB9FF6942CF30A0EDCBF42F2EA76E495BA882A44EF4F437F5C
82ABF1925C3BE1C67CDEE8A926A2E37187DEC15CC897C5E39CE1E78298A0A78F
6B9247022C114FE236DDDD5D327AB23E21BAAAAE652D11CE7CAD9C1A221EAD9A
6103E66684BF7A7107630CA57A020300932030C47C0874759E69FCC66A70BD8D
B9593D914515AA937BFD7FA8654A66D29A0D18FB781CD2E584B298B54078AAF3
2F7379616607196BF982367F88578778CEEB87F18BE958762EE4BA247A0AF305
1EEAA0936E133FFF636E46D8D00FB31E1A35F0B3A03F455DEB1FD7AACAAC8D8D
F87CD556764554CD09D9F4AC97C7A8FD33D6DE023B3E129E0F9DDC6851C1A825
9A57FD36434A353A6EBFF04C43B0794E2497DC899CD1C8BBB6BE99699A42FD0D
83E6DDA2E40080120EA0D4B7F79B4DD5F1392974EC40415A4E0FCC622BB066A3
9A9505BF7583A4311817840183F9BE3C68517AB1C493A2834096F3C7F54DE88F
3B57BB43B42F7ECD971AD153A5ECE16625250C5C9AFBB020DDBD3AD3C48928BF
BF73E85DA16F1147CDC66963E4F31EA794BC8B59C5CCB8F3EB5AFD00A134F3C3
57423E7D4F9C228E7E7F3F8DCA60BBD93FE8600B503A5AC47D9FBBCE0D060620
83EAC81F2305C394AB757BBFABA93EFAB8BBA48A5F64D1DB569956005B786D9F
45BDE5E74F96C827742F59415E4DED0F14C5CD9EB08C9B56D7837D8F9A6060FB
CBB8298ECBDB5E625903885B8E51233CBF49B756D42FA0CBD862C56A5046047D
DBB234C973B5D265BB1DE94641169A9986E587936D8C4DA6F4AD056A6C4A5B98
E62CCE5E54157595FF7F5761829C1D40B0571439E5AF3F9C520E811EDED8DA4E
014B89A1233679C8C3675A673E6E6554D774D715491E2407EA78475305B0CDD5
AE2CFCAF3AF145B9BFFE54694EEB77F32C27104802783DAB8630C32EFF5154E3
59398F2D2228D35EF0BD4D1B9997140FF1532F9E69A3B8E2E4C00658EB6F7A8A
0A5BADB438374E3870FCABFB8A49B81F88220E5980B63AC736D73305BE7C76A6
D637A543047CB2ACC55D507108EC02D50C0D87C31A11E0231DDCFD8B1C7046FA
E296405CA92AB1E898987F8990C6858F1F681547DFBC2C87AACB2B1E4EF9E1A8
E8B0D52105FAB1898AB74A3629BB0C3892F3FF9C17FE6C5FAB68358E1CD4481E
4C8803A911BCBE921B6481C707918C18BBDF94B1A40CCD118B91A352BE082DFA
6E40ABC9EC16B343082BEB07418C20A9DBCC4DD51A86C378976EB70175020DEB
C0B99FE53DDE40531DAB2BFE11526767E2C752793C0B589A1ACB8904EC579082
704F64753BB3CB10D9BD06C62D31A86FBAB3682ABA8AF7E7976BD95846FB41F2
A82FB79581432C904833AA8B347E8FB1B43ECD51D99F300E890AA38A16BADCAE
780CEC334BDE633C03E696CE60DB248DCCEFD6500084FD75CB36F23C8BAFCCBE
0115E94ACECE52EC7BA6446656F2AB1959913EAE96F46412F078D28CE6F6C468
D9F18B7DEE75199183ACA9BA88214C10818B31ABE5EDC88A4B83A2FCCAFDCC86
1D6D72E217544E49DC31461FF981702745D8192C9DA22149EB0453370647B615
66B667B0B03596085F53D5F19563767E6B5A7AE4F07480A76225989E751E23C6
54F39EB341E94846AC98A5D88A61AD2AAEA8A45E9A29BBCF83E95F0C65B2D601
69538F8774175B38A6DAC0F0BF71956B5DAD5D06C98514F10BBEC9280ED033AD
04799EB9F13AD2F4373BDA157D238D0754CEBA89FBD98CB518CB63F1867A7D6E
44D9E4187D8E5D9A3433023CE0290DB68CD3E9FB8AFF9059D3EA7A867BE3FA01
21BEAF0DEA576E97B4F2CA06E674D5AF5D1129031466E740674F06401B3A92A6
19912D6E5330992409E5776E87EF17B8C88359F34D058E78A43E98706D30950B
A2906B425FE4047E477FFF8B5804335BBCA18349AEF4282DF339BBC50FF0B3D8
6FDB2566E73402D57E5B2638CD2A5D410268717EA1D47EE407F08F469587FE9F
FCC2F964E4609B0E77970D17828FFF0E8A6363C1590E4999A373A0AF2C45779A
352A3F923AEC792F34B9B2EE73D30924A2DC43DEEB5D123A1CB093D58C17846D
E026F5750AFF6FA14CC2242F7B6609845483EA23744C73C0E91FB1A3307CE8DA
21FDECCAAF95CA8FB8D7D67BACF720FAC8F7E47F18FDC14ECE51E6565918F9ED
22231B4C9A1946D8CACA5F0DCD4EDF3A72A9A4A949376BC800D911EB09E5F39A
73ACDC8B4A14C260D8D7498A3EC63F0D6B99ED5846DA7D8F3577FD995790D528
4F71BA1AF9D23FECA415D3F5192ED3D27273436CE8DA710F8DA257DC2063A50D
967073C99B3ED1AC76E29FB1BCBF59ACCDB4EDEE8DBECA7978873B89AAD708B6
888C37B67FF16330113A46379C1B1C1587D7FB600BF3A186B0B3F4F966DC195E
3515E78AFEA9D6319DC8FB0207F98BDD6B94C1C5AAC984E2E27B0B1F2ACA5036
A4C19F1E0EA564E57F914969A16323E5DF9B9B0F35F5800DDBB2CEA85F70A8B1
8E9358D579A887A15B8604A38CDAE13CB305ABF079948B0249B67CDFEDBA1EC4
949653AB05D8F80446D62276E075AE0E4D3F4FC0FF21A48219B70B087FE22FB7
F3A851983C4096D093C749E8A9AA151AD7B60C4325205AF8895D344D917A00E9
29415899E5CC634796FC61A6E7C066503CEE9FD8005D80C65725C8CB8496F963
07D68227CA60476E712A904778C91E3C9F6496FEBD7747E89E51A94BA07BAB0D
B827906A9578EDEB0DA62BA68BB61CAFABA46F8357B1F0BBEF30CFE3F2AFA2A2
3CDEE9B4B44BE0C014BB9048085810AE4C901FF54C852CD70454DBCE2C3514F5
FB0EC52715111DFB861ECB321EE97E39BE3F72DC42200C572E2EE843F75614FF
5B0B0B532716EFC45E7B733CDB34A116343867A6AFD1DD6FF967A9A062C62ED3
C25BE62874131DA8EF2EE6BFE909D7C3B1F8D444F31AB96204065BC6B72CAA2A
35AC7D852B7B2250F6655529007542D6E60D9A58B86281716A471A5C4DCB3399
BA26C214E4FFAA2EE25D3E68C4AC256B922B03DCB0F7B649FE656C2D7A2EAD52
EAB68CB03BDF108C04E22270A29D1ED466827FE499C983B6D62E0800A3815F0A
A1C4389E8FC5E6C7E262365C3DBCA663C1AC95C9BAB0FA077EDD13826AC38D13
409800A1550568802D32C0AFCDA97350E618F91F3B5F583FB0145D2CA4FDA103
79ADCA653613FCC276DCFFBF48848B17D65B31EF1D0480CF31740AAAF5771471
E688EE33E9D0723070516C777ADBD361D37AA763238351F8A3B4A3EC678A3C6A
2CD143458989D817EEE84925DD5E9C8F52093401A466ADA1F1ED0C64D087EF1F
21B566B6E0A3FF2D2EA4F7D918AC05E8C962FF21D09AA2AE9A42F4D43A574B76
D05BC2659A117C065AC474C3F5BB496F9688E06EFEA0D413726B30D7F4A480A7
D38200CC0EA804D01DDE43016E4B3B01E3C7C191A6D1F37BAB45869DC5C57BB1
5DCCC93B18B00D76C171A13F932C7517EA6592B5CBE5C6C93B1354DA6877396F
BD3D88529A603B42BC101ABC52BE234631C97108467C3770E7B20382E0A9024B
66F6871720ED5A5C823408AA6C443C1143F3DFA95B297F46803C468229E17A34
8F59118B0E2B69FFEF3EF8FAC169DEE66BF22B05EA68EAF1E2A791052EE46416
E29A6B8A02DA663ADD0D452A7AB79ED8D3E6EFAC09F886CF6C3E63A270B97E38
8FB0073BE20DF18BA4AD414C4C7E8E92C43AE22828EE1D53457F62AE741DAAAA
A58E141A95222394672B785DC09041091A96EC741FFBD293CA3938D8952EF21B
87F7A76DD68F7E5DCED060CA362068BF1E9DFABBCAEE09DAB320EC4835B4A16F
B71C40F8EECDA39C31FFAECEEA97C2674F40C66967FD684516AE52A1EC7684EA
E2BBF38828EB7D9ADA81F64C92D5C61A5432B0F33DDBEF4472B0A63F233DEDF3
F8A0E5FCADE08A2079804B02D550D844030B3D84CCD160978E021C5250E1EEDA
61B0922064879760CDAB849AAFB488AAB7A5547D981B5EC238033B4D34B1F56B
51F6181D67EB708EDB97E1D3778C56BAD11C592C808E8C455BEDE20776E94B05
F94A95F9E6FE0AC013D4C9E4B5B54D89B78F644D3AAD10753A7EFAE16FC5119F
C724E669C432CA5A7A4978695EE6A70D3C1D7B85E31A653F9886A573F16202D3
98C8BCBF98A0EC3687CF7FE9E5C1F3220081403E364BDC556A835D6F04DB6AEB
2FEA72CD4BD7A19938FB22AB05A9367C2F791415D69E076B350DA20B1B77A7C6
2AC0128075DCA175FFBE5921E75FF4168362F1947264495B53B9944F27D93312
7A48898D9AC87926FEC30C48197C1847CF887C122EB0081DC9B95F4AE32FA532
AD15FC273E22BF33E7E7D8D1D4452AB328DA647985F1EA7E5347742130CB166A
40ABEACA33FCEEC4EA16037B1A92BA2AAD2E7E9BF54813F788E98E0F2C17AD4A
2BF843AE0441B84E09D2C8C9C07A797ECD851DED3B565F0F1E03456CD3C6AA4E
825C3FD6E267B06F1EF5F3AEAFE3DB48444A6EDE971A860DD5C21602D9680295
9782A5A907D6B52577C69E28ECFF1DA046842C15F01D4A0DB3050C75BFEEC3BF
8EC371F9FAD6765476339EE4EEA31FC92FAD954B462516767F1B531D31A539A6
D70CDDDAE0FBAB3936387B62C4916FDDF9FAFD942D792046D673314351087639
0B4306B56DB00280478AF4BF142240B2A9827B09E28519B63055A2E4CE2E9EF3
DE510D05F0873BFFBD80098CAFE301D7349DE048570C4B63A3317B278155870C
6B9819E51C057B408B7F0156D958E74362D4D1027D7120C6B325F9BB7491A754
0D2AAD1B5E5C1A1EDCCE7A4B93E852120836A2D3CCCADC7815BE88D0D787A4AE
4233CE8F946722EF7EF365F1D5A3816759F57138D62C48DF7A99A96F6F18E737
C09B4B36B71270DAD655090B59A932D55BAA158794CB4817839F6FF3ACAE37DC
356648103AA50AD8EA12B211882E7E5FE1795AADEB0A8EE71B867E6D76FE56B4
E452124FAD88841400697C748555D717859D04C0244B74EEAE000ECF395CBF93
6B1E5A11A4E6892FC0C19D15F8F614D537BDCF5C4FE7F065839257FB6DAA727B
E5C99C6930E298A756649A50B87F8E892068169563F0F673DE53B46650C6C249
B001674BE7FA1BCE82987C21427A146F8A435F6BC94006F822FC09A4E01040DE
3E6EE28AB2F5EC1B1C412223861AEF8F474BFF9C19C28762A7138A85FE2CEEBD
D168A4BA21732629D150D1DC4ED88BB848F4F7515ECADD74F38A8BBE811EB727
E9C275B64534341BD56349D6702F0BDBB2626AF2DD97D00057DFD32F21DC8AF6
DFBF263CEA259D18BA3C4729E5525EB7E9710D68D1E39486B6298516188FAC8A
4902E8D1FB6EED7EAF9DB574F089E32FF421458EEDDF98DFAB09A9DD063A34DB
487E4C6AC69972272D1803C045E052556A5B774187FB6DD3A5315F1F7EC04D43
3D1AE46E85A9E2C10C8643F2C9C30AAB4425599CFC61904FC54E7068BD3A0488
9E053D7DE92BE03488630058BF4184D1AC6632E40C6D0E2C0266A9D1A00B9B92
A0A5BAC677610543AB933260CC17DDA3F784D5FD6A22E1853D97442ADE152B6F
88F2715CDE00FB53FCFBA5AAD981ED9BE739E3159A3F097FFBE3EFF884F4FAB9
741EF4D05FFA78F7FBBFD715355B118610B1386819DE7C7535C2490BFA4BB3FF
D60802381B31D322161500E15A74E9D87C9243C3ACD11427FD804A84399AFA35
9DE5D68D59133B3AB52F2E454938142ED67B569B434E8676B708CAD0E7B0882F
F7AF2CF88DDBD6B71A45EBE1D3A41085FF8F00978233BF3554576AD55E355034
3A35EAEED3329177BC268C2F502AEEB1045989B5F1D609FFC205642B2F1F35A2
3EF37F89BD54FC22B6453276B325D0E409A5244E119D9AC76F0A1F7CB268CB63
36CA708AB016A081D0CAC1FC0EE950A9EA34DBFA819297DD69B9F9A9F51FF245
CD0B3EA6341195425F0AA9E0F014E6F0C0E1E7C40A0BDE76E5EFA2C0F71C5B48
99BB486493D23329069189D5851D2D63B18C95ED150BD96526B298E899130D75
5C36FDBD944EB32AE45083967FFD7C3739996AFC515D3C9DD23CCA7A2EF1A748
F4A9F0FCA7291F10BFEE84AEEF74721E53FCA914D7949CBD4E230DDB7FC923BD
6420DD364B4DFAEA7F359647E959DFBC2C6F8B26F236269AD6C810E5FFFE1E6B
FA92B4AF6063864B355783BFBE5B607265D6D25CDCD7096DB7F846BECD1B4E55
525FE997EFDE90BC2939000518E2AF8B1FFE7AB823314D1FD7F4127C4140DE4A
5EAADC6137B003517C273097DF93CBA6EEDDC1151CD84022120B9CC060D01EC2
8AC3099A2FF69EC1D5F22911963FDB3F335D3193783C3F4D43270E6D70283F3A
717D40B3FF784A342D24224AEF939DC5A9BE787F382029EF230DB5463B1AD1D7
AC95CACDD1E2A24E21005CA8EB88E858E34B3E4EAEA7079553509331F2260053
C1E2105E4691C4E575CA71F4F76E5DDB4B8CBC265012843E715307EDA70E6FE3
C7CA07A8866B21B9D9EC93DB8139398B2DD5AC7CBD901763768A9F2CFEE291F5
DF03458073C787384D56E88FA7649078888EF1A8CC7B0C2A6E51F0BCCA201FA6
40CB0D4F1FA52F93C1B23EBB750B97655409D8E4E2DBAFABDCE0E606547D27F1
9FB9DAAAE1384066DAFFEEC8C8D92066DE25F0CF012F76EA8F6A4DDFCD73174D
A5140A1541AA40046BF7F462F6E38B26B827F64F1D51FF36916AF15615C9DF22
838F10B13911C8C0BEBF1CFC2AE1E6AF5D19805D60D697512D2AACBF9716CC93
A006ECC2320CAA42681B105AAD8F008A01EC500C2BFEC66C707D6755910FECA6
4FD147F4DF2D567E6C47E0FA6F385B1BB1AAD1E3D8CDE566AEB374B14389F8F6
5A8E8D0ED586F58AF630E1C4A42D9F54F7BD5590628BFDE8E418C6AF3BF7B2AA
7433795EE65CC932742D531EBA65AFAB47C277FAA6460A16C50D7245EDE04253
C1B23C9941ABEA18037D77858DD554394ED013AB5C5468C68DE71DCFC47B0727
F2020EED9212FBF8272901FD55359C1BEB8AE811578D715C5A4C698D541455FD
7AF3AC902B0CBC3AF7312564E2A6CEA8AE298B4A2DEF2C7478C1F8E9262D5949
175E362FB069165765BE9F4C9B1382D5701030B630A0C1A7F97B7A1756D505B7
27800C8FA21A58A439F1E78EEE31A63277C84F95C8D1AFF789B6D536B0EBB859
D220984FE516CE26B8E403F55E6FA03C97FCC08A6E67974389E2F5CA05E158CC
2154FFE612C06CD16AADB836728E531B1E987FFAC89B33A7AC6FB9D66F48F0CA
260E0B9E4F761C8C161D7F075FCEB817D4F25AB9ECBD3C5385080F902C0A171F
34E3DAA428721C39D67B1D6612E1DF6EEE979A2AF889361CB8CE14587920FBC7
0A6A0B87305E2604ABB4C3E1493919A275C2E52AC5DC3B4CFE4CC24AF8308CBE
F9EF0CA1E3EC69F516413B6A6D6DC1CA85DF0D4E65F603D0FC8A506B34387E29
F3449574B2BEDE40BFEC05FADBF125913EF29EF575490D7DBEEC42E75CE1CADA
D3BDDD55CFCF556CEA53C97DFD0CF8894A404AED2B5B288EBF76E6398A7DAEE2
3EF8AE5B83B4A2F3B3492A357AAEB93BC50BB456C529FB97BED5864BF3772237
BF80D6DDCA868E9C33690E98A80F2284B31BD5466C9EECFB49B7F5C9E5C9F92C
AA1EB57A39396FE3CFD60F0675F76212ED6C00505230F77D8E9982601E397A08
D9BA44D78BD7722B2C8579C4EDB5390E70D5DE1D29A66F2D0FA0FCDC940E79AA
28A743A20DDA1A2A7C6199C78E3EE15E5A9A393AD61175CE66BA681E8E9411E8
0DA4099E971BFD845C6253DC4715CE9D2EC5C02AF5D6245ED1FD00E67D880ADC
EDBDBFED0E9E2AAD84D23A592B0A5F6C67F00F622D32DD313E8B1DAE56BBC12A
346D0FCE9919278C2FD58D2FA7FDF4A94CB02B67C9EF41E62860D6617E9654BD
928EA828BCCE5E861A7D3FD24BCEB89735647EE159E9327FD7BF81E31A3430F4
8739402559DD3BE2FB2F25D48E171F04F6E164C25CD4157E94A91FFC925F122B
70B00F2A6CDF1EA190CD78FB6FB050D58F8A7F878035C773A681CF35409EA30F
8298FF35389DC1BAF197DA4DC1D55F815B9573FFDE20643169558A2636CC699B
132AE40B9273E2E157F46FF2AC488DAEBBFAB2294BEE3A5369D60DA264675D54
3364BDB54C73C7CE467CB9E1D41EED4B0D94EDBAB0E6FE5FBC8E6FFAC6645139
6EB5C7F413C5177B5E164428F0EA95E0D96FF01B74D27965F18B5F409918BE34
50C5E8A2E02C0765986563342DEC39D0DD73AE3FBCCE1D8A76477BB1C9F5B156
998A9D1500B202EB7298EAC969A2EE56FB4A6A5EB1260BDFA87CB8E536D7C8AF
01AD1FBF1A533F07382EB3A493ED0C5D0E8C553097FCE602399238B4FCA4AFA9
BB54E341AC72921AC1F55336B63612B25F737E3589C0CF69155A8349FF797B52
5C408A1AEE3D79993BC971AEF0A9746473F006F8641E8B548ABD29F0554A6FBA
ACAD9F34CEA2CFAAE59840780CD514CBAE3CF78726BD44853A4CFD52EB359326
66A1DC9EEF17786285C8DD36263EE17363CE48A5AD9521E02D80566E36545DAB
1BB0D6081A68297BB86825C242A44555BA598C1CDCB47107F870FF906BCCA169
9387B9BFBA7A3D4AAE2AB973E252718F68D5A6F413B6C4AFD00F2C2BAE710FE8
DB1B9AD22F17CB3D3D00613701EC9CE3E9FC0E4ABDF17C4D0F4DBD68853DAB27
60CC08B0D301632250B42A9793421DF3012D07E4168FAED78D8DBD3722CD859E
37E8C3E091B54D0592E5B12E0E70155FA406D150FC22ECD520D88A066D10A275
F9EE855F51503EED579B1575FE630201C59855764B4A5EBE7220263E40A2F9C9
AFD2D7CD78440A5FCC260490AC60C0AC715BB77847639C6698D415BFE029EAA1
EFEFD7BB43B511E2948C26408408F0574E06A5088A7C2239DA7C642A45916745
F027CF677D737C3EDC1C3336B45E338CBD39C3388802DFEA1E9741B8EA7DE6FF
E086F964991102CB44AEFA7F1085035A17D8BB93F6D7C052D47D098EB54FB661
A3C6BC67C261CE0B42724AC3B5BACB62776149412BA566486C3CF45C6C320A77
603E16B2A26FF4D4EFB6EDEF26DF866DA962A4D571C8963F1DE2C6CA6728F08E
213A0DE927E677AD31B6EFF7014E0125B574A7876A6E007D488756C71E620AD7
8D6D304C30F20E97FC6D882F90ACB6970935842EF1F246A1468E10A88543C49D
B09EC778085E9205047F60B1CA7BDAAF6B1AE145814ACAD9AFC69D9ED749561D
EFA4D36D97473F9E777FF6F72FDDD9CDAB803359DEBADD82EB0DCD7744D56048
C2E89F7F7E9E4CAFEB3B40E4185736073B4B7A1201DD23D8878B4B5A0AF5883E
1FAB59AF001BE9AE0619B1DE7B3CC9779E1C2E3183A36A359CE728E3D465878F
E8C4AF2508AE47E04519422BD862523E4B456AD3D47918AA1CFA1006F99809ED
4D3E5B9CC9410FF5CADC1D47E63794A861515B5193859D0D9718966687DD9EB8
CD8EC2031D28961816D90A98FEDCC3E1ECF909653910A3D7893C7179E3E9B664
C9CCC8DDF341773C9C76B733EA37CDD07ABA5CA8E861266A6F000EEFCFE159AE
C0DD4D2E7326D30F63E870212870486B5D0E7EC3C2BDF24441C49BBEFD5FEBFE
884A2D53B85BC8E7F5F41CFED261D92B93419B0DBFA32A5DEF3E22BD2F93C5BB
C3BADCE620F0B8A66EE54EB102F6D051533DBBBB61FAE28CBC9B3FDD7AA0F832
F73ED6A985E03B45448F55C7134B9D4D14763459049ACF84284DC78102EC95CE
F404A81CAEE00673211AF3ABBAB4E9B2C6720C0EF6567E2DEB425DDC5CC819EC
AD1E02C436003B9666AFECFF85E18498AA4E96FDF05A3EBC98163ED9C57F9A7E
81315E6BB6C504D322DD12E02BE62A080535C62A27D2CED33E62F44F48339057
A9CB85C951E406BC99327322342EEFC4ABF1F98854332857926B190CD7BD0ABE
68D54CF908C44F9F273E42162EE276DD9C6B05CA4D06B7FB03EC3C9F069492E4
BB782137212EE71AC224AD3256EA70BDA07246C74ABD0D180121F0ABF5AE7E75
44E7181BB65CAE02899A79C3DCEF6B1355183EF2FCE564C020C7144D09D27E84
883F7585F7D4195429BBF8342CCE96C3A2AC18BFE9BC7B6D9F925BECD3269475
FB621AD89DE7AA67C944C3E9CE29A3C0E271E9611695A40C3A889D247BF92595
F8303863F6D5115F73073524FF25B87B567405A496486BD11CE762EE788C9391
694AE9AF5752C8B35D8D0C87F4851A4738129A9DB6310D62C89C722545AA3B39
723829D050FB29AEB0D17798007841960B5C2F4FC9E529F2CD0AF488952C1C61
AF31F17320B09BC0435E12A6C096F22B5C07D50A313D927CE69CF3D3967C8E60
CD3140A9C40E1A8CD833C80B90A435F63AC26CA64A8F0888D02913A3CE45B887
396C4ABAE967877FDDED97FD7C18B939C4E63FEFEC1563EF44CC68B4C0DB01B4
3E85B3B4139A8D1C3457703CAAA1BA6EA2963FF472C79928DF8B0F1E12FFA717
B1356FBB70776C8B7A2306E578C10DDB1768DFECD1AD94C4240C4BC2A291D9F2
D1A6FB9C983709ED401D016CC89448F75E675B08143AEE9DD9EB185C2D13BFC9
BCBD1DEECDECC0EB66A38A14BBBA287F9E3ADB35745DAA2C7F7186C98E1E8EE2
8E48569A707EE449F4133677FF06C9E05DC60D3DD4DCCBF0C10DE45BE2F51F69
260271CFBE430B3A60D37029B21A6BA02A4571AF58307E7A4043629CB83FF5C2
ABD63C37AE95A27BA11AF466B8A1D224BDE40D84140D1CE3AC07F09DC1CFA52D
217B44E5CA41F9111E57B9E4AB6F3E6FBACF3EC755B00E4DF6A736843A470ECA
C2971D57A99D2CAD8D1EF82F75167667AEF87718FD7EDB611DD98CC15CE17097
31BE3DC4CBB0CC5B2A6496337F4701BB569AF351533534B251A8AD9C980FC6F2
6BBCEB26B36FCCC3BA6801B076A5D34A1EA687A419911039824E08612C48BD1B
9F663E3FFEDD13B663F80B8C0385024FF173D6547A8B1C6FB23523CDB4CE6B57
355B4A740417DBDC6A6456C59FB4C0BB4124F66C4C5A5DC32DB216771CE5F77A
32891FD2E4CDD7A6505941C40CC160E23BC0D5B863BF581802FE778391D4FCA9
0DD0073B783FD9B35044809457BEFD8203AAA65D8116C776550E75DDF8D6552F
224E5255B5943FD78DDBA508A15EA065449F8277F5308460C4A0081748B09921
7B3A37AA3C5CFDF33D8E4A5E089A7E0FC927E6D34D762740985D3B4974E366ED
7AE8E3D2DBEA13363BC803A1D3E33595B0F7F2D36262E4BC4072233ACABC606C
29519D6BE41907DB3C2E88CB0418F8668EEA3F6DC6D6B3A4601E2C5F1881AB22
E9D3AEF63C97495C7EF3678622E9E6CDFA19D68ECB410D0E437C65322B553040
325C52D4F6E5B4E8866279723F7A2CA078E32C35BD0CB4876AE68CC9F72B4357
64EDA8D7895B21E1E4DE25701FDD6E806589F0D50870200B324655F19845D052
2344A3133EE5AE656F7372C0094E90A4C81B07CC9924F8BA82AA180529BE4CA6
110F52A03DC61C79C0BCDC2FED1AC089E5198615A6388DF6B44FCA375FFCDA28
EA3C9DC6D1B49B4F9DB3EF3CE55F866EC169CD64BC42A978F1E6BBD44D549B95
FECCEEFDD8923A0ECE6D95C1016C19863F3F6A4B5F54DC2FF6A39665AE21A652
F5ED4CE1F97016579F95043B38E98BC0B834FD89813D43D85652999EC8B0141A
435C0C9969F91FEAC4977BA62C3A1927749346B85AEA85D7CF94B1392E80CB7F
305C2BEA9691547D4E09D901581EE15903A7828E2E06B9BB8C484C55CF46AD17
70CC1575C3A097BDA46005246D5417C1E061407AC053F39747CCE394F1700A4E
8E65577E5ED3ECA8CACA395F480BDD187991BF59D234F27DC386148D8A037E9B
0541120D8CBE5A9DDDFA2C2FD31A5FA6CC5CE817ACDAAF2CF94A6DFECB93EA94
444A13CBDD007267E80E42E0C36C766399DC2075CFAD614AADC467EE29884D7B
5AB658BF4BE8CCB56C664670D7F5C206312BC30C0151692A20AB7824B40FCFB6
2D0ED5C2FB6C6C8CD1C64AF078041A3CB694C26021570944DAB553727A20ECDC
BE9B0EA04DDFDAEE2171AFEEF1AF3BE946BB3A8C5C2E449418368BFB73EA952C
B987AB72A138753C48F77DD096678F51C41D7E98788B235A2052B502E999EFE3
4BD76D4381E814AB7375D04723AED18679DD3AAB77DCE598068183459B1E9CA7
ACF0CDA883301811EF502A542400DE4F5998FCED3285F434F31ED7487539FF93
8277AE848FD89E60CC1A6C8B8DBE6A7E950CCB44D4B054A5BE3A91D8900C7E74
05E3E8638CC75BCC33376A11B988DC1C522441AA71D5D32FA9E3B5BA1C34F08E
B8DAF4CB1D23330DD590C3B7F765A37ABB90026ECEAB4C17825201BD10AA13A0
0A2B6C702593D7C2072BB7F95256F8E9EC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/UniqueID 5087385 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 60 /less put
dup 62 /greater put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D9173633D9B50449E0
F9026E7A4CC1A3694D6C030E5AE53C0DAAF90B0046E22E14FF2787AC8194C42A
4B8846856AFE4CA20940A4E53896A851344E2E5538B9550721332077A972C793
89CE532A20FA4A52F80B5D7EE0FF0915523A98E98B71B8ABB4D7F35DA6C05364
A8B3D5DA9B1716C5C4D4402847C5A9BDA2F668709D51041BD566B7E1E675DCEC
1AF4BD172F05A73329FBB30BC7D1D7EC85FEAF5CF1ED6BE70F7526E115381BF2
47D955C5032404DA2FD82824C73F530E15E157EF023A2D9B50F4516A611B3F99
3803C6EFE49E08AE983B4D15CE6699B5111C0A45913DE61EAC437709143AF4ED
0D5136428AEEEF3776F9BA48212963150132D63DB4098AC124EE86C3AC7138AF
B90A504A1E15524BA2662D7E0FFD6377FF7CAA3B6113DAB8AF64837C4A99D99E
A499EC597828133A4C6421E0707E7E978C9B2A459620D0CB189775816D1421C1
87110675A765C25DC2FB607ECCD8C53F705B406932F41A9DFE08
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: URWPalladioL-Bold
%!PS-AdobeFont-1.0: URWPalladioL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Bold) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-152 -301 1000 935} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB42B05EEB99F8B643CE3
F4B6449ED5A733594F70CCCD7BDB073E630C93A502476CEBA5741BEEE5938FCE
3E77996A2C56EBAE52B2701DEBC95E363E995ACEEDFD1CF8EDC72768951885B9
84F82225B3BB8E9522E784197B8AF13D70B2CD113F7501CD9333EB9A28CD9D56
824E9A3A689741D4577777676015723D17033D2815122B32062451E15DD271BA
6831FBB953F03DB40513901CE59ACCFD6C2D6F05E2B6C8AAC7EE97D4C56B8F52
BCADC9DC83D5C7C45F5C6E60DF9F9471D42B1D6F45EF98EBE41997BEF7D56981
8F9AE898AFA16089A91654ADB0AE2631539262C43BC5206D6CB73867B19EDFF9
024F9C3C7D790946F34742A688BFD183A1307649A36F782DAEAA2D8E581C911C
B42485441FCE5FFBF911F1D9988FC5C601D09514633B415378648CA65F2D6F40
F7CC23901787522154CC33941615849C4E5F2600BE11CE10B78AE007EC0E5137
4C66EF207977C2C2CE5FD8E70A74DA9968C71790516F1489FB5A2585DF9F5E06
9552F391999992E23975398FA0F539A299EF090B9CA16E940104614A4FA8C6D3
495975F6ADCA90522557B3F02FACDAB68EBFFBB8579876F09895D723E482DDF4
FDAE645CD275F3A8DE44AAD1D4C2987B6CD35FBB18312851D858E2F382FC606E
41B7B9393EA57A7FB9903CE835BF1F8E67C15EC8AF980D14FAB1A56EF1A62E14
5433A36160111440DE43D4C8F28013504ABFA5BE40DFA52D34AF251629A70368
73B22EC87849070CC52FE3B74D259E603996AAF50D77304A8B6631C652E482D4
C36A5EA242B3F6A979331BB593EDF29F2D9DC6B35BB39A5876E5378E71CF09BD
151E4B759D53762BB109DE5D452919DE87197C14A816E6970C6476C8A4F1BE28
E6FBCDD677D4379E9D96A978EDA97A0F256534A641017C46F0637A6886CF10E1
EBD75689D3CAD47F1ED6096F825036BFE59A50A550F0FCC978EFE560113A6231
60AE7DFF1BEB6846A97F44BA6196DFF0E9AAAB0F3F34EA25A98ABC50DE2C1812
47CD8A7E2F2BFB159544B845133FCD3B9F46D1C48462A806E9E614D5EB37B65F
BDE52075686731382196CAC3AE3161EBF89944F88A19A5CDCCA280C5A47CEDDE
B826B08AC1581B76BE95036D3797DF9D68406C79A4B51ADF64776AE9BCAA6D51
1362E7A00FDF2C9A6D40F64DDA4B706FAB728B6F6FA9302B4455661480719E97
CFB7A10536081E4E417984862DAD762591F1E352EB919871CFB4FF8536EAFFE3
51E99FBFE366A8105105F3ABF883222A8596B5C71A798B4C25D89E1A97DF22AE
7F7C5F36F1025EB753B8EEFB121487E91658D1692E96B6A021CEA623CCF6C9BC
4ACF593CA80F3ED850D167CB091D6F95BE42F08C85CA35DA36AB230E3D91EDAF
A2B77B58F4D04FF628190034DCFE58B45A71579F9701691C2A5A57BC5C6B1992
738F39E279ADDF7FC21D76436C5E22167202C94B089B617755699EE01A4C7B87
E4F5D46FB80565D7EB65EFF9467A98BB2A1B06CD5A8AE30297EAD23237F1A1C5
F538FB22CAB1E57CBB9EF520D4E82FADAC6C3829A77B21282347CDE770EF4CDB
A6BB2FBF3648C5F5A0B3BE75E98F6E719AE4A222E708C468F8B757E3E4224BF1
5C2546FC3CD2F4C08EE304C75F8C275BA31E999ECE027C3F34F3A7994822DC58
7BAD51CF47D76895919973DF3F8DA82E7835A49860EAFCC0E659A9082991DC31
DF0B088BE04EDAD1872737624823085304CA2A9E9480BE92186290FC29C3C7B4
C27598C98A3DF3EB0CD389A52BEE29FC22398BB244AA98E0534CD3FD1A44C8A7
4DD5CF9B41D608FA42669681F72A3C3B7CEDF181D84B0776AAA08091644905B7
43C26A74C90C77B605EBAABF79818A68219E858B6E4B63F8E9BA65BF43438EF9
F52AF893BBDA215450E6174C5C555DAD5EEEB9110AE468D1CC587A732FFAE035
6382226C92B9537DF8C4F37383902B4E1665B01234AC83DF6D4E53F991531228
15AEF3FF77045FCD774A4F81A5577BD4B255CD6114AA6A305C8C2635D44EED34
55C90F1D36E21D52A210FECA5F50626F2156ABEC6BC7453597A1F20DDDC346E1
C4E776557BADF9158C88A253D74774970B11342D30A798FFA9B26E48E4728D19
5114A9B35634AC999453690C2945D12A5044CB0AE12FB168192AEE4AF696EDE5
4CDD8A7B08A1A0E70E5CE0FB43E820AACF407DB268F2760F36F91A050899D71B
F8873C2203C7003FE088725F37CD5EE2122D79E9E395F5CAB8B4637839E43022
2CC6CC2E73A8B7B88E1A128C703B117F616F6E9F716F0319307A660C06E76820
33B4376512D85F65AD30E430DCA35434BBFDD27F19E63578110A8079C749D840
7CA5E197797432F3B24CBCF51F4C14C18B1E5146F691604BFD194D4BE46D0077
53445B322C7D3AF68FCF93A5429899C70E43EBD1E81973D800E720E96FDBFF1B
2D1E2190B918F3ECA9ABB8AE7CAD0E7D4F2681134FDF014535369EB96E6A51C1
8E0BC4346921EA3A8BE3B680852F48F0854805296C03C19A04DD221C12FCE97A
CFFD0DC14F1F22085EA743F9C98587768C2816E4F17A563872539DB46C17F1DB
0C4292D035FE3A7CC3A471979FD6A842FF6BCEC22ED954560FF7A1971E39FD57
FE6934B5368C099B59A7114410C608C749D1B7D492319C511FCB552194CDACD3
6DB6FC331F8FB67C9AEF7DE98CADD70F81D892B4D2DAB0BABA662175C52E5319
BD70E552E69A1C4D7638F4CE5850C70EC57F21B590810CB98D32B706A177AC31
603F49A26F9E5F210888A3E2D3B21F23C56F76E3568322057E16C7309212EA56
945C846896C782331AE75E78968646E00976BE036ADAED535A8E130B46D3C97F
4DE0BF14EF07EEC57CF5A99FBA80F0E24128E0045A5C6DDAC94750B602C2A49B
700AEFE3F8CD4087B0766575358EC8570A237B4C5B0691B761FE3254E951B325
9B2EEB4FE37390F550903546BE455D07E984809CAF607B7B16433C920D924DB6
ABD954BFF51D758526655FA1A05A37C9CADC39BF6423C688F32BFA5256F93585
A43DFF3C144D3052CD273D67E589DE38FFAD26376939CC85C4B8AA64A4E70BE9
D053F69949A8E464ED478A8E037FB13148CF34F43878F7D76E5B0744A7C12C1F
974E42BCB642814E1FF110E5BA8697379A27707AB74F4D4C6C158E509C64277A
9AFD2339BDAC1F73578793DBC5674667AEFB56A44965744053106BD5B5E99175
BBC27E4668DB1BCD36CFB0020B11D1CCC9186C1571D506413CFECFFD383A1FF8
8A692FD037572E4BD892DA454AD772EA108C7F3EAF8CFEF5EC4192EE600E7A0C
E56429C347E44D3355621E4291E8B19372375C5DA4CF8BC7BC85740A4DA7E6EA
76D91FC2C5D9AFF98DFC652FA98291BDCF0E009CC38FCBE921D7D2D3D877B044
7942F09D2314398C04A3CF831C233B5B63D82858951852D83CB926D41CCF5BB9
64801E50422D5352C9CF80113358B95979BD72B7D5F06053643B0EBEEA272FC9
31E25D35F910A75A1ABE13802EBC5EF7908D61DC7423FCDD06EC512E1E3DCA95
0F0BF9AB2EC9F5B7BB957D85840C6AB9269E1FFD3D6432231D47B3729F7F9F84
346D492C4F6A7635B85ECF70EF5733EDB26731D14F03AEF3DECF25ABC9AD8033
FC8EB4655A46507A8521E2870932F6D281F0F9C45F9969A88E05652EA1297556
98F9749939BA747C43B4682F868B604FB505DD598CC91FB8489CDEE8BC223C42
81DDCA5F7DA80BD5C4B2585074A85023AAA9730364B5B8B54C1627D63C58C09E
A5D64B5FAA44144D1A6F2F8BFE9A6DDE8802BA2A5D5D945DD0197A2B910BC079
3E55132B9C12CB0BFEC601277E9638D8E6E6B9718FA0DE6988F4EC2096A9C582
C8329607108080263EB92C9DF6DAEBA5C2E0F0D9F034FC4E903FC910C2DD83A9
EBCDDF1610B2DF01F5A7A32378F3AECCEB7EB1C17662616E14D4D40D4362EB5F
60AD32CE002FE7F15CBA8F8D641E848C51832CE89A2FA7CAE9AC02990882F3E8
1B9090CF23CD372BBD43CB8103899EA8517AB8C18737EC2FAABD11DB5C0BC79F
65939B07A2614A73E6CD0A8650EDD6FB3E7689FA12A11F62529180060272B7ED
C9492C1FD422574F7EE6C6E5AC60D349CC394A7AB9B964F4168429072C0C6DFB
D2AC4CCF96760637BF1042155BE1051B2B0F018CA61E48EFCDA4132D4899C7CE
20D71648998871D125317E14B83714D18F84E5C4E50BC74E4E5935C249598578
CC1C437E81D737DF5B9B1CCD769FF8D28E55D02C0E2FCC829A1CAA087A14C454
EDD95A9200A7BCA663C4328967C977B430B63CE6CDFE50AEE91E99918B82D8BB
DB1DCFE65325453720F02A01AD3FE668E11F681017F794EDE4A6D89064841BC9
B7B9C5757CF9FAD6765476339E4E87983023D5A21A2948AF086E3FFB5C4B56B4
5C48662F6B272B13242044CF5547C73B4C28293307F22EB28C915A6423433A18
0F36ACE400F6B71D871C67F70A2572B1FEE2E0E999CE941C53BE9BDD3A9DB160
92B5A9B5BB3C56B554A845A8D62C3B82461BACB2D43FB16DD74B9AEDFD56DF13
CD4BA4DC0AA1B54D55FA959DBDB3A3D59D187984CDA90CF3392FA10B969C3B05
50B11B99ACB572EDBB72765B0F34EFF7F7B0C53F8780D83CFB474FC0F1CD987D
54B7865C05D05159B171C9034EDBD0E861C5A26F2DD38730BC80230E2A9061FA
6DACB7BF08D93A60CA5A4D28C572C4427BA56C5D9812FB9D9682B78BD2C6109E
3D52526B114177E51D621C2E0B050FDEB852D3A6F1748B19B838C588543E6F5C
CBC5780936829A15DE3B4654B265A8B7F54BB4FBCDEEE2DD064CE344608BEFC7
2FA3BC09B646CDA242798CABEC88FE22762491796E95C793C00FF33C19AB2E64
7D61D91219C131EED631B9608F052066263EEC9B1B148252F67A3160ADF9FC3A
ACD6CC6391D45B0A6CD0F12D2D7907872FEB1412D9B0CA71BBAA034E8C320697
7847A9949178D9A544430CFF182FDA78393AC1A8B133AF1A6B9C89D150AEC6BA
F51D01EB938F82ED7722BE507F7E56122CF41C258CA3195C14C759D106AFA597
5BD1F082D7E51302756B52C123D260F7A8EF5AA25400ADEA16F2659358C962A7
319F7EE8F1C51144E79C4030937BD0B09784140385F13F19D50B03C110F6521F
BC5D395112A96B89578A625669F13341E4EF9F81BC3A5F8151719CF13542334D
9BA8A7AB66FA29A65509B045AE199722817DA61962D512611D639EBA6D18C939
35E6B7A4191278AF24415F3EC599B6586CD01855D42BFA071E14FA4793666330
9AE8B5C380D8ABB06697CBB8D46F805C054C3A0DC9B72885F3BE6B514D4ADDF8
8F3FAE9DDA4237FE84A0E3A70AB491FC90BCD65775FDCCAF911EFAB90123E341
4AA91EBD84A394F47883D04366386D92945935DA0C02BACBCAAD5FEF89E5722C
14B7DED7E9AAE85B0FDDCC0590A6BCA196798F6C6054F05F09CA349F60F4C7D6
5FB1513611ED0874B55A2F393F513C09D57D1775AACDA397E07311783290A0EA
08384809CF652F1E602E7F27C9BF7B5E2246AA9E837F39F113D935DB9E74C2E9
4E8F90983B31DF2790637E4375815EA4ABE99BE732D6518A51977DCC5B62AAE4
7E6B8FB0144A861E53B3DFC6938DB48D2D9156C6BE1E710E2EC978AF04718243
3D2FAA8F68EA9A49ACA9AA960B45B053079246F09B1F8BE89A518CEF33AB92CA
36C6D06E8D4E51000F60EB69CFE87031BE3E5A8BE52B960F67D6D533ECA263D3
0C85CD8FFA9A238AFA754C9789DCD73BC1DF740F437DF5F1B361E2AE907838A1
20A1B77304C21C3636EFCCF24A6425D4C7AC2DA83EA9F973E3F4E5F1A14EBF82
7DCA38CBF9A44C755D6FAA8B00CA7BAAAA548D35CF0F04AFD65A7E44E106ED40
E557FBBA38173BFD22C8F111F56D53ADC64547BE682B4D49E3DB83DFA942EDBB
45A07A97A220217A2575AD6C11077C30DC0E40C2D8A6EF4D85355E596E26B675
E22843F9AF30ECEF0D86125D70BCB7A92B2BE3AF10DE338D3C498E27493FF136
8E57D1D3BB77BCA871A2411F75AD5601A9125A3B90CE131D3B48612958B389F6
43AB76AA8686C54268E19962B62E2588EB6581FD0F0738902EFA84A117617CEF
422F7E209C19161FFCFAD9CBA9F634E03432279EF8F694AFDE8C03B25BFC2B5C
DD25915221B827C41F4FB4365874CC0D1A182B42E4E0146BBECF15703AFE1152
6767E2C75279BCFBAC46D8224E8952DB04DCE81FC2CE7BA777B592888D38EDE6
8FFB3EFE83870C654949E55CC2A2BB87E8E9DB44DB791D1C46AFE2BF649345BD
F78DA021349902332707106BBB5D307960EC81B01C9A95C15573DC6DD4AF0175
0636932A81F9283D638E403E6E145EEF8AC9C176225B3737CCBEFE80D435E070
4C4627CB1675AD8F922E6C8CB669074E47393EB37695E1570BA2AB068CCE1685
52299361D62A2BC2C0DDD38AABAED596EF93DD9F32C5BB4DDF37C7D9A21EC418
78569F4009B55F53BBA8363C927F02338C3B0F301B2962F17E458C7FD6012A37
AEB87BFF20C4B9A918ACC90F4160008432BFA86937E83F17495D582FDD46732F
F07682EC57A379829261DFA7DDAA3FA620CF2A5B508453BEE140DFC60D7C64EE
BA571228D4543DEAA5D983F2F5E50A376EC8396A459DB952C9D84559CE8B2680
0BA3F6721BE95705278F9C8775344BD9A0170CC19568A0E08CE6352CB79629CB
55B333677B9C88A23EA3F80EBDC8BECE9D21AE15F64D15845E9478F77B6AB5FB
5581240CE2A288EB98831A41D3F0CAF84CB920EE884D2841C2A695BD7A0D02A8
30E7B024B876F5A403B7CB1C29B3A3F622D4D754B382C82C7510F9C72307481F
E18CEED4C9CA6218A3B142296B641AAFC0DD67C008507760A956A8BF25CCECCD
5B3FE94019A96B2C19BC29FB731C3D6403E3C1FB114EC337B93D7D3CED0B11C9
A11E98AF28F667CC68BE2529C3ECA8635B7A0134B83898D1E91DDC98E280A2C3
B84459501FE4ABCE6A975C1F392940259CD5602A13FF6A34EB8BF38AF5DA8A66
26477B0C25AB289F58F4CC48EB0B1FA776618B88B61E12967CB89685B8CF7334
C6E544198630F1C47F5C446C5D3C0EF3C28372CF15A0869723725DDCBB6E457B
C31EC16FAC6CDCB4DF9BFD02AC4E99030A5AEF29FA425EEBFA4B0EFB7093A721
FBB7169D287A3A2C401624B31DD91629B0F892526BF9B63992D0702F1277814C
F1750FCC6246CD323DEE2DB26CD0F94B93B44FD3B9A7FDB55F7A48D235D747F5
27E18B215C0DCA387623E3445FC621159C9A39216B315347DE63754925F60396
5F669FA876F51562994954916340F4B0E4F0CEA192A34CAEC47A37ADBEC739FD
624F633C82A4C448122CE2721DF8373367309F337B2359B092FBB996A9284A1D
AB3BB85A734B583B3E2E79609CAC4840F285C8B0DDF9A3963D0B1161934B23A5
C5C87D078CB73DEF0B8CD10758E6FB302FDB8719BDEBC7711FD41D7758F7EF3B
47566788D4D5312707E5F2A9026BF358523FB3BD806A94BE6EFB28733CE39CF3
90D8ABDE4AB156FB431FC72472E528053EC041E396333C90480C82F2B801FF4B
1A187D0EE152ADFFF6FB35CB22667E746FCA597E03417A24C0489BE85952A677
6CA88C806DDA31F02A8242A264B73136F9AF34390319F6A543D5D4D7FDDDF2F1
578D9B2144A9749127C0F72AE27F55A17C4D92B28EE24303B4E15384FD809B87
619E237CF2217EE3A158485C2DC722E7211327F13F8133ADCE7C195BF3B07AA2
B35462FEEAFE31C8A721C2D46AA00C10681BA9970D09F1EF45A8770A4C835ED0
BE381CA8423F9E792CB7C220C9345A4C1D19CE476848430A7A0484D174958D64
92C0CCE330E800EED4DCB43B0B1969A53C181C52D9DCD913B3AC22DD7C44A82B
622327EA30ECA42B8CB89314E8AE09B0CD66467405422CB32B2039907F8C5F84
E3E7781B5BA321C678755F62A3B464A0300513DB48355B3D1870DE81146478E7
6014DF9C546D9201261AA71B05F2E629B58BEE7E100BD329B282FC53B9F4E736
3300652BEB5E6FA1DAE6C03B4E655BF2A7957D95FF01CAE1DC020E577AB46C1C
7AF8CD12B5C689DBE39DF02B3BDA5DB86353875F3A4946BA6B9E98418A0D6762
05D2D9E58EB9C6F21B2E82D11EE28AB3B303BD10282893C59F9A350845815873
E4DC859A2BA5974177626618AA5EAAD3D9ABB3AD8F64941C9D26C842AF222C92
7AABEBA8E753C2DEA7E4296B33B0098EAEBE2A5C045F1501EA326CAEE1451B7C
267FA002EBD016F6FA05FBC142E4AB49B80D2E13899CA5CEDE73A28CA9E1CB49
1AD747DA44521A96AD353B5B1CE9640CA32E0C1BFE5717694F0C090AD302038D
D7D16AB451AC2F5DB560584D8231A2DEFA18C68C158D1698635F7E2B90B16E6D
BF5D58830E86388B4909CF74F960625D066FCDC662A0E7EA0A29704094ADE14C
322FEE3A31DD6E3111102F61B2D044D1CA9E21E28395AE7A30A75A30EA4F0F2A
7A65F097813A7799D7A76291BF50034CD0B26A718E6220DE162962680130D78B
53A2B41843748F2D5FC69030F31EF22D4E33B72BD8ED238E1EC068A99627ADD8
33BCC4FC1E1CA352F141B9000260DA20C9BFB9FF931ECEEE556BCC9C4374EA6B
2CCA8942CD4E770540F478500F9A415B5CBFF6108842C022AE841ABFDA775D90
9B05A0FB959AB1146098A7CC2A625012AD612CEBA426EE4DDAF9A20FB32533CF
4A100B0F9EDB84730B650D73C9ECAFD53217BDC48F8E503BD8B01DF2644BB6FA
6C7B5DB4598D76106609CC1A998112FF048F7CDDFBEF79999598E57464E82D18
4CF76BE6CC57F8E645DDA85E5DD5C024B24774975B422C912C9FB6141D787EAA
B64220A2E61C48BD2B8CFAE86EC0A4FD7D9286592226A6B95A84177C7FE352C7
D719289DAD8D7AFE19F681D96085CF2D85B1CE6F12840B521DA32596763BD0DE
B3ED5A0DA71350E6329E4F082C00FBD73BC06D843912EF7DA5C2DE587C394A8F
E60D47B6B134260078278376AD3D8B0B7E99C3C08C33498D55FB08ED70950206
FD372CC787C1F19B923A37FDE7C43B6BB0C8CA4D1CA7BA56A44F9AFBB3A238B7
DA900CDF822A47616498009F5A75A8B4C088436BE5780A39355D1A214A5965AB
BF9F73C55D32043C847D11D7DA737251FB47D0B21212E70CFEFB68A234C9BECC
29AB2EA93D4D4B5A2BCEB8AB14C97742224618CB27405613AF6A0821CF81AA3B
D93F1BE1B8A3F1C2DEFCBB8937EE5BED99E7C2D320236CBB0BF29638D498368F
E6269F852FB0E950210F2B0AC83BFAF175D42FBBC0D754AD58FBF92629DC8866
A0698E72EBE46DE769550EC066319191D8B1E41B3BE2BD081CFB9BE077F7A3B4
C329912DEBF2F1FC60C1B1F97D357057B13F241C7EAE6E28CC683E82F754CFE7
9598457D94ADE426545A7DD882ECEAE1721C799A9DBA12E901F630BA50618813
77D54798FF0F3074A82D3474850D054DBD9ED9187F84A6FDDBAE549A9D225505
734F3063FAF5573603F2C9A1C3E6EDA91ECFEC0ECF0B5340E0DDD17A6381B58E
61A40E789DBA81CB4DDE7D4A970A3162D903EDE2880C26FC5A30CFD72807F188
592F0A82200400C10C6DFF085AEE705C3F01CDDFED987C8BA8B72D68CA6B490E
990C4390B29523A3E2876BEF80C096036DD4C95B6B6EF4101699899AA25C2C92
C8E401705B8508609A854BD22826FD05F2C1DB42C069893A6C31F0A44812EB03
80609943F9ABC4A93ADE99FFDD00F27CFE05C79882D61615978309118B6A1ED3
3D19A1FBA979FF7BAB06B1AB21AC051522FD9681F365C2C5BFABA8064D0B4AD3
A9CB232D422E89E72365D18733275A1938886D2DC102825CB3EF2A7F9D439DC9
3AFD9020BD28B685E2E5D38C7AEF7CB6D899C8612EDBB23894BC719D68C21A66
25E48518D2E33F849AF3F00A58ABDD0C086A48AD0AE9BB415E4E385507F49D97
5542DC03CE3C79CC2777500C3D08C9BAA0E46EFEBEA1C000F74B2719B7DD018C
9E8B3390BE0645A187A2B2C2ED87397E685A3420750F7BAB0FE2A25DED422E0E
DFC3F488A11DF9E9251C0554FA532AE3CF6B4CC492907F761A8AF8E8F6607639
FD0E146D6B621865797B9894857AB4262609EFE26FAC8DD975948DBF39EBE38E
2A8C25B55F8A618D455B3B13A9AAF2BD7442D393B3431CDA894BF8978390F72A
B65858B859427724D09F803119979D9AD9277A7ACB3C766C747C1997953D2DE0
551410F4681671956AE9DC82EAAA0195CEAA1443A1A6684D8E88D393E547DCF3
AF3471F16FF759D63A7C091ADDCD3077D23E508AC53F346D5AB105D504A536A7
CE3A8297DDD87EC76AB586FF1FD4C383E2785EAD36F41274FB0BFF9EA0573718
1B8391F1A591C6DA9D0D3D5AE4B2B5C0EAC1CBCC29938FA16F33A24555973303
D8CF2029795248633ADBD7C14095298EDCFA5A018474F811BAA904267AA3E7E2
00942526F12590D8A239B8AC70E319262AF6A41D9EFA079110617913129E86AF
607AE1AA2EC54DC6C94EC051A1BF427D1B34CD1E4536CEDA1113783F70F630B7
616E47C748125F1CCF350E3930ADAE5249B3D5CAE21A76B79141484BDCE75BEB
D9D6B46ABBBA618BBA0BB81CD27D65FAFBE78109CAB35AC2730A761CAAED96AF
DAD879B4603192E5E9D8452B79FF383823BC168252F57DC4E612B0C7EB28F470
193CA13D0735987D4AE2153E761A409BD4D77B539ECE65CAAD81B48658E79D2A
35BE5F9E38C6B18449B20B0C4EDE1E7B3778890CFEDE1C8E7526FB5F8CAA3270
0CF74F596B47EB683E5B0B9815FDD84D1053162FBA775A9F85F6D97E297FF188
5DB82E9B34269DAF230EAA4D5CF3DBA8C7BE53D7191ED6839DDC831CCE9935A6
E4D3B6A6E34CED9F8CB1901E976EB13E14499FA14CAB520B2E91EF63AFA89266
ADCB995B47A471A49761B5CD760F42BDAEF679177325A5FE15953FFA456F7784
4FC27438756FCD2E0E3D40564CF6DF30D6963BF27CC40CBE3C3A1D7324B1ECD5
C04ED54B8456404A37F839A554350CB8CB8E904E7535440A065493480FDA1C50
5558FA1920714E0C8692F37CF1D7E3DEFD43B2B428FBE7CEB304E5A7B771CDAF
55815279A3B8306D923FD97F62159885A93B0519E271339BEE64BBBE22AFAF52
78CC789AFAD07338208958426E81053D0158097CDB6E280C0CF1BDE40E5DFBC1
A171A7280E8FF4AC0D4C8A2199EFAE784CF0B1B98E14B1CCE43D91B137EE9096
80E472B53DDD657B5FE28D7B390007124F787E4BCA6DC9DCFE934ADD402CCB87
8CD3955BDB109EEBB8F504436BB8A83B9BBDE199F59281F5D884990D92861BA0
BEA5DA569163EDC4DB3A56E2584273230485F18113D43E7261CF3605BF5169D0
F27E87B2186D931D624120B81967E58ABF5675EE3C046C2694DBBAF882F87811
A96EDDE55E91EB124E4A04AFE4FBE09BCA323D5EB7F8A15D60587FC7D23D0363
A14B722CB0A11F3967BFAC1FBE8B11523BF84127573E93E598BA51322F0548A7
4AC221796FEF28187AD9EFB4B4B59F7D94FF33EA3281C5E352B4D7C4C1678902
D1DF36DCD1515964B4D13ACDC813180560C7AD4A851B9F9D7421FFDFCC8077AD
05D2502C7F4F71C4E72E1AF430DFF06157BA1886575C8115796C7219F735AF88
14868E0A9AC409BC09A2FD62C42F8ECD856EDBACB6271CAEDE1CDE5B792CAB89
DC298EF489C1D22AE431B254167FFBE58ED9BDD171A3100D4D69D8A56566C0FA
3EAC58EA307D6433BAB933303A7D07625363424D4E83D3930C0083327E0FC74E
1ACD6579A7DA0CD12FFEB765E13449109A100F09B9C2B636562C5C7CBD2D3499
4227FD7BC1F8394EC0491ED4208F2A7E2311CD90DCDDDF2859681D78DC08E624
B24D44ED1E3D3F761928CD2D8CA7A1B133A74D6CB9A6B340F5BB512DC333468F
B500D860BEFB09299EB3364E9B25F1235800DC8E790D62F3EF215E559F8E8BCA
28BE483D01113B2BD7AD8D322D32EEDA3DFF2E9F29763871502CBDEB3982F857
2D8519BD24B691FB11A154ADD346AED70EA59FABA7039A499709F7C85F077155
AB0B1EFEC599F5A098B76DE9B1452A5A4F920C9415F63473DB109D6A9587CD6B
0C5BF54A30D4E3072F05FEA67365D36D2CE56588D1C055CD5FD63EB45C70E7FC
A703758E3A7386A25CF46386D6975B70E30002CEB0144F2BFC4162D57D388720
4302AD80B6BB6EC73304F7A0711BA4F6385C4010FC280EAB291808EA2EB1505D
F76ED457E58E1EC4DF4956D533E0A0670D60CBD73D1E1B9865CD20F841B5900E
CEE7FEDD7AF1AD89A2C4DD21BBB1436BDE25C1191FCDE0D7F03EAF49BE962D5C
CE215C76681B2777756D2522BC09FCACDBDA067992D8BA0B4BDFB4C057E86890
9B8961012F891E2EA012B331A1419207846D378DB18B9B53B52BF7BA239786D4
1D531E8ED4B742EA905049D774E778B57F34C18CB75637D27EB885C4694006D4
2C717429B7A084AB3481D797C464DBB01593D8DFC48E82757F090E0E05FEB1E8
B7F19FABEF842E5D3F617DB098BEB80B79F35920DC64095D442198A8F97A88FD
D3C384A2F87D411598C831CEA17602D94F90D3FFB1FD7110CCEBF6F466E3F9EB
974570E77DA213AB738A65626476172573F849EFE965785C4EB2DE226458899A
A18F2D653A9918204D93D6CC44ABBCC2D448A03CBD384561CD4E9130CF2E6A7A
BBF081E5D3601DDB73D48B5FB82CE050D9CE09383C616D1752A5834048C2F405
6352D2CC7C97CAC8A0BBD47ADA7BCE34A4CCCCBFFA79A318FE4EF56765855524
6D172E28C18003522DE8ACD88F9CB320A7845C4EBE68ED9DE523EC0B48FB12A9
135521A3C4E53192328280C210B04A8A1198F808246D0E7494779D62AD8E4DE2
3F9F2181790AD026406B0DE95990690746483D218E711DE14E8B3AC3467EE8BE
075EDE59AC2C5EC3F3C050F2A2394A0A23881B3D6B9369F127E66432FCE1A092
CCCD3EF64EDC59EDE342E110BA6E6906BA57477D972E1B0C3106E78FAA1574BC
29FD7854C0B56E4EDA2C78CBA60426069D36EB67117D182DA0C8A64C3966C121
9666C6261D758941BB40C27104FDA3045013D7308502D852DD42EA7B5C525539
7B7AFAD912BECD74F1ED47A19CA860F892EC18AEA0A3B1949FC41A37205C97F4
4452FA4DBFF814CFE008F03E1E8B24AFBDB968BCDC7C235F7B4ACB45FD53B3C6
8B29559C6366A2F323730F95187278D7BD4B5CD70D556D03B89A595FBA6EAAE7
F394CAC99A85DA35E9B7633277827EDE8B827812EDD29E39A9600A0C0297221D
534DA5B94CDA3ACBB9B98021D9B4BA39A1A72109AEDBE71C1F0DD79898985914
47A65EE512B0DE22038934C40B34CF6CA1915AE5D4986DEA04EB25FBAB05B362
EECECEF23961C5762889BB4ABDDE8C83E1E5ECF9221F818BFDFC8AF809321D70
AB9B2C88B7F6464A62863CE7F4A2A0548A90895C2FEB7D6A9086084296EBA018
C11960504C69ACA0CFF8D6C71B9676F17B985BC08C51BCABBFC82C68A2D81606
527880319A1F7239C1FF5659649B2984657B92E10CA9ADDED44FFE8115E0675C
4586598CEC1CB538F920DD98A25338EEEBF8293F2E3491F4605A444223B46A22
678C18869CD246590B1BC6ED7EC2292B5E41B1311E8F851006F7512AED9E35FB
A338D264C6DAE6CB8751EDCFEE5EB5CCECC1122DC123EC8C73F70B562E2548A0
1E020DD18E15706F78B7AA67B074DF4F55977B2703445943EEBF7E9FED4B8080
DB7D587BBF97FCFDB36FC4E5541B69BD17AD1683FF8288B509058D167FDB631A
A8ED3DD382A28C9F56CA94BC8B600512B513B0957B25011C0B004CE96045B684
1174A0466BF521FAD1A2D164929646D9F63E867F695A63B82CBFC33F71DBB7BF
76E69967A742E703085B969D0517A4B9D84E53B271BFDA44D2722DEBE38E2098
1F4371DC06B87BEE0C2D68709583CF1C89F8260CA216151A0E23DE5C2DE4536E
0DA611993184F27FB66B8D5349385AD1A0AD5052017A9AEB325EA10B2B921CA5
75731FE3F4DBBC1E2326F916D2AE4A4E5ACD41E213AEA9CBC69B9489CAFAD7D8
D38B3E1E7388EA26013061077835E631E0EDB472A08878354FF4982A2199B871
AE3BE9DB6FC99C607D768FA1406A58E98CB476CA979A84DE569EEAA700EB9C1C
B2D814501EA451779FD6090705899C5AAF8C736D4F4A0D94AF55F5F1CFF40AB5
64EF90FA339101B17DB863F561BE758C7CCF7E0D4AFEACB2D35A9D55B5DBFBE2
07E1992EC005EC9440777453F8F1C491C0C952BFD9250FD0AB92DF3286ACD02A
F79E6E78DD98A94BA6A2E2AD6954CA8A78EA273CCE8FC16E491B67A889CCC0FC
9C40BD3EC5A3CA789C5E7741E8EA5E7441F32CFEE7944F481073A963DE0E85FA
30493A1BC9ECE3BFC736EC176A3CFAA770F6B713F7D4FE16073B14F4181E4E4E
0E182D9FF649639BCAF9923844865365CB546BDC33D6B3F0D4D325D8F2CF7D96
9E7A6A8EE757FB4A63F09C92032F7EAA0BFAB39293F5724FB39E9F8CC36F6DDE
B7ADC9958968DB3D4271CE34FB84FBDAFFBD8C8E9203DD4BB22B0BD5C6F7A2F9
DD1099FC1FB5AA5AA9E2EAD6B28CFE8F56476F689DE1F0B5D29158074ADB9418
32737D00EC4C4BDCC2B197
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (TheGi 3 HA 2.dvi)
@start /Fa 240[53 15[{}1 86.5095 /MSAM10 rf /Fb 137[38
3[28 2[42 1[66 11[40 28[60 68[{}6 83.022 /CMSS10 rf /Fc
240[42 15[{}1 83.022 /CMSY10 rf /Fd 169[36 86[{
 TeXBase1Encoding ReEncodeFont }1 49.8132 /URWPalladioL-Ital
rf /Ff 162[18 1[18 29[51 17[51 43[{}4 65.7468 /CMR10
rf /Fg 180[33 33 74[{}2 83.022 /stmary10 rf /Fh 177[62
78[{}1 63.0968 /PazoMathBlackboardBold rf /Fi 160[83
83 10[62 83[{}3 74.7197 /CMEX10 rf /Fj 193[74 1[74 1[74
1[74 22[66 66 32[{}6 83.022 /CMEX10 rf /Fl 172[40 32[44
1[18 47[51{}4 65.7468 /CMSY10 rf /Fm 149[24 2[43 43 6[58
58 1[58 8[52 19[67 67 3[58 48 6[58 5[87 2[87 4[87 2[87
12[67 1[67 67 17[{}19 86.5089 /CMSY10 rf /Fn 143[32 1[35
49 1[28 18 18 18[46 5[39 8[46 71[{ TeXBase1Encoding ReEncodeFont }9
63.0968 /URWPalladioL-Ital rf /Fo 202[32 32 32 32 32
4[16 44[{ TeXBase1Encoding ReEncodeFont }6 63.0968 /URWPalladioL-Roma
rf /Fp 149[37 7[34 98[{}2 63.0968 /PazoMath-Italic rf
/Fq 162[24 1[24 29[67 19[34 34 40[{}5 86.5089 /CMR10
rf /Fr 57[62 198[{}1 83.022 /PazoMath rf /Fs 134[42 42
1[42 46 28 1[32 3[46 2[37 23 23 2[23 4[37 6[55 55 60
1[60 65 51 2[65 51 3[46 4[60 1[51 3[60 65[{
 TeXBase1Encoding ReEncodeFont }24 83.022 /URWPalladioL-Ital
rf /Ft 193[67 1[67 60[{}2 86.5089 /CMMI10 rf /Fu 134[54
14[49 2[51 3[50 45 98[{}5 83.022 /PazoMath-Italic rf
/Fv 138[61 13[55 39 50 2[61 50 31[78 12[50 50 50 50 49[{
 TeXBase1Encoding ReEncodeFont }11 99.6264 /URWPalladioL-Bold
rf /Fw 87[28 45[42 46 43 69 47 50 27 35 33 46 50 45 48
73 24 46 19 24 48 46 28 40 51 37 46 42 6[55 2[83 60 1[51
44 55 1[50 1[69 79 51 60 1[28 69 63 46 51 64 1[51 65
6[21 1[42 2[42 42 42 42 42 42 1[21 28 21 2[28 28 36[50
50 2[{ TeXBase1Encoding ReEncodeFont }61 83.022 /URWPalladioL-Roma
rf /Fx 138[60 32 42 39 2[54 58 88 3[29 58 2[48 2[55 50
11[78 61 52 5[94 18[25 3[50 1[50 2[50 50 1[25 33 25 44[{
 TeXBase1Encoding ReEncodeFont }24 99.6264 /URWPalladioL-Roma
rf /Fy 138[72 39 51 47 2[65 70 106 35 66 1[35 70 66 40
57 73 53 66 60 12[73 10[40 99 91 12[30 6[60 60 50[{
 TeXBase1Encoding ReEncodeFont }25 119.552 /URWPalladioL-Roma
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black -175 -128
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -175 -128 a -175 -128 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -175 -128 a 0 TeXcolorgray
-175 -128 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -175 -128 a 0 TeXcolorgray 0 TeXcolorgray
113 -40 a Fy(Theor)n(etische)30 b(Gr)o(undlagen)g(der)g(Informatik)g
(3:)g(Hausaufgabenabgabe)g(2)963 76 y Fx(T)-9 b(utorium:)26
b(Sebastian)f(,)g(Mi)g(14.00)f(-)h(16.00)f(Uhr)p 0 TeXcolorgray
0 TeXcolorgray -175 253 a Fw(T)-8 b(om)22 b(Nick)493
b(-)21 b(340528)-175 353 y(Maximillian)g(Bachl)182 b(-)21
b(341455)-175 452 y(Marius)f(Liwotto)281 b(-)21 b(341051)-175
694 y Fv(Aufgabe)j(1)p 0 TeXcolorgray -88 852 a Fw(\(i\))p
0 TeXcolorgray 41 w(Ein)d(Graph)h Fs(G)k Fq(=)f(\()q
Fs(V)t Fw(,)16 b Fs(E)r Fq(\))21 b Fw(ist)h(zusammenh)7
b(\250)-35 b(angend,)20 b(falls)g(von)i(einem)f(beliebigen)f(Knoten)j
Fs(v)3046 864 y Fn(n)3110 852 y Fm(2)g Fs(V)j Fw(ein)21
b(Pfad)e(zu)h(jedem)33 952 y(ander)o(en)f(Knoten)k Fs(v)688
964 y Fn(m)766 952 y Fm(2)g Fs(V)j Fw(existiert.)33 1083
y(Man)16 b(de\002niert)i Fs(E)602 1053 y Fl(0)649 1083
y Fq(=)781 1025 y Fi(S)742 1158 y Fn(n)r Fl(2)q Fh(N)885
1083 y Fm(f)r Fq(\()s Fs(x)r Fw(,)d Fs(y)r Fq(\))r Fm(j)r(f)s
Fs(x)r Fw(,)g Fs(y)r Fm(g)24 b(2)h Fs(E)r Fm(g)1571 1053
y Fn(n)1612 1083 y Fw(.)18 b Fs(E)1704 1053 y Fl(0)1744
1083 y Fw(ist)f(also)g(der)f(r)o(e\003exive,)f(symmetrische)j(und)e
(transitive)h(Abschluss)33 1235 y(von)k(E.)33 1366 y(Man)d(kann)i(sehr)
f(einfach)g(feststellen)h(ob)f(ein)h(Knoten)g(eine)f(V)-9
b(erbindung)19 b(zu)g(jedem)g(ander)o(en)f(Knoten)j(hat,)e(dazu)f
(bilde)33 1466 y(man)33 b(den)g(r)o(e\003exiven,)f(transitiven)i(und)f
(symmetrischen)h(Abschluss)g(von)i Fs(E)e Fw(und)f(bezeichne)g(ihn)j
Fs(E)3481 1436 y Fl(0)r(0)3523 1466 y Fw(.)d(W)-8 b(eiter)o(hin)33
1566 y(de\002nier)o(e)22 b Fs(X)444 1536 y Fl(0)441 1594
y Fn(i)t(j)505 1566 y Fw(und)f(erweiter)o(e)f(den)g(Zielber)o(eich)g
(von)25 b Fu(b)1844 1582 y Fn(G)1894 1566 y Fw(.)1519
1768 y Fg(J)r Fs(X)1618 1733 y Fl(0)1615 1792 y Fn(i)t(j)1659
1768 y Fg(K)g Fq(=)f Fw(1)g Fm(,)h(f)r Fs(v)2075 1784
y Fn(i)2097 1768 y Fw(,)15 b Fs(v)2179 1784 y Fn(j)2201
1768 y Fm(g)26 b(2)g Fs(E)2407 1733 y Fl(0)r(0)33 1962
y Fw(W)-8 b(enn)26 b(nun)h(alle)e(Knoten)i(unter)o(einander)d
(verbunden)i(sind)g(\(wenn)i Fs(E)2367 1931 y Fl(0)r(0)2435
1962 y Fw(als)e(Kantenmenge)g(benutzt)g(wir)o(d\))e(dann)i(ist)33
2061 y(der)20 b(Graph)i Fs(G)h Fw(zusammenh)7 b(\250)-35
b(angend.)1676 2229 y Fu(j)1727 2241 y Fn(n)1791 2229
y Fq(=)1916 2132 y Fn(n)1892 2156 y Fi(^)1883 2327 y
Fn(i)r Ff(=)q Fo(1)2071 2132 y Fn(n)2046 2156 y Fi(^)2002
2327 y Fn(j)r Ff(=)r Fn(i)r Ff(+)q Fo(1)2192 2229 y Fs(X)2256
2195 y Fl(0)2253 2253 y Fn(i)t(j)p 0 TeXcolorgray -112
2500 a Fw(\(ii\))p 0 TeXcolorgray 41 w(W)-8 b(enn)20
b(ein)f(Graph)g(einen)g(Hamilton)h(Kr)o(eis)f(besizt,)f(dann)h(gibt)h
(es)f(von)g(einem)h(beliebigen)f(Knoten)h(aus)f(einen)g(Pfad)f(der)33
2599 y(L)7 b(\250)-35 b(ange)27 b Fs(n)q Fw(,)h(wobei)g
Fs(n)h Fw(die)d(Anzahl)h(der)f(Knoten)j(ist)e(der)g(wieder)f(zu)h
(diesem)g(f)11 b(\250)-39 b(uhrt.)27 b(Zuerst)g(erweiter)o(e)f(die)h
(De\002nition)33 2699 y(von)c Fs(X)257 2715 y Fn(i)t(j)301
2699 y Fw(:)1632 2941 y Fs(X)1696 2907 y Fl(0)r(0)1693
2965 y Fn(i)t(j)1762 2941 y Fm(!)1874 2746 y Fj(8)1874
2821 y(>)1874 2846 y(<)1874 2995 y(>)1874 3020 y(:)1951
2825 y Fs(X)2012 2841 y Fn(i)t(j)2056 2825 y Fw(,)83
b Fs(i)26 b Ft(<)i Fs(j)1951 2944 y(X)2014 2961 y Fn(j)r(i)2056
2944 y Fw(,)83 b Fs(i)26 b Ft(>)i Fs(j)1949 3064 y Fw(0,)148
b Fs(i)26 b Fq(=)i Fs(j)33 3215 y Fw(Sei)18 b(weiter)o(hin)h(die)g
(Menge)i Fs(P)982 3230 y Fn(V)1053 3215 y Fw(die)e(Menge)f(aller)h(m)9
b(\250)-37 b(oglichen)20 b(Permutationen)f(der)g(Reihenfolge)g(der)g
(Knoten)g Fs(V)t Fw(,)h(diese)33 3315 y(Folgen)g(sind)h(dar)o(gestellt)
d(als)i(n-T)-7 b(upel.)19 b(Die)h(Schr)o(eibweise)g Fs(t)r
Fq([)s Fs(x)s Fq(])h Fw(bei)e(T)-7 b(upeln)20 b(soll)g(das)i
Fs(x)r Fw(-te)d(Element)h(des)f(T)-7 b(upels)21 b Fs(t)f
Fw(sein.)1207 3574 y Fu(j)1258 3586 y Fn(n)1322 3574
y Fq(=)1452 3500 y Fi(_)1417 3670 y Fn(p)r Fl(2)s Fn(P)1533
3683 y Fd(V)1588 3432 y Fj( )r( )1723 3476 y Fn(n)r Fl(\000)q
Fo(1)1741 3500 y Fi(^)1727 3672 y Fn(k)r Ff(=)q Fo(1)1859
3574 y Fs(X)1923 3539 y Fl(0)r(0)1923 3602 y Fn(p)r Ff([)r
Fn(k)r Ff(])q Fo(,)t Fn(p)r Ff([)r Fn(k)r Ff(+)q Fo(1)q
Ff(])2237 3432 y Fj(!)2321 3574 y Fm(^)f Fs(X)2462 3539
y Fl(0)r(0)2462 3602 y Fn(p)r Ff([)r Fn(n)r Ff(])q Fo(,)t
Fn(p)r Ff([)q Fo(1)q Ff(])2700 3432 y Fj(!)-175 3901
y Fv(Aufgabe)24 b(2)p 0 TeXcolorgray -104 4059 a Fw(\(i\))p
0 TeXcolorgray 22 4236 a Fu(j)r Fm(S)32 b Fq(=)26 b(\()r(\()r(\()s
Fs(X)19 b Fm(^)c Fs(Y)t Fq(\))k Fm(_)f Fs(Z)s Fq(\))26
b Fm($)e Fq(\()r(\()r(\()s Fs(X)19 b Fm(_)f(:)p Fs(Y)t
Fq(\))25 b Fm($)d Fs(Y)t Fq(\))r(\))r Fm(S)157 4361 y
Fq(=)k(\()r(\()r(\()s Fs(X)19 b Fm(^)c Fs(Y)t Fq(\))k
Fm(_)f Fs(Z)s Fq(\))r Fm(S)32 b($)25 b Fq(\()r(\()r(\()s
Fs(X)19 b Fm(_)f(:)p Fs(Y)t Fq(\))r Fm(S)31 b($)23 b
Fs(Y)t Fq(\))r(\))157 4485 y(=)j(\()r(\()r(\()s Fs(X)19
b Fm(^)c Fs(Y)t Fq(\))r Fm(S)25 b(_)19 b Fs(Z)s Fm(S)8
b Fq(\))26 b Fm($)f Fq(\()r(\()r(\()s Fs(X)19 b Fm(_)f(:)p
Fs(Y)t Fq(\))r Fm(S)31 b($)23 b Fs(Y)t Fm(S)8 b Fq(\))r(\))157
4610 y(=)26 b(\()r(\()r(\()s Fs(X)t Fm(S)d(^)16 b Fs(Y)t
Fm(S)8 b Fq(\))19 b Fm(_)g Fs(Z)s Fq(\))25 b Fm($)g Fq(\()r(\()r(\()s
Fs(X)t Fm(S)f(_)17 b(:)p Fs(Y)t Fm(S)8 b Fq(\))26 b Fm($)f
Fq(\()p Fs(Y)h Fm($)f Fq(\()s Fs(Z)h Fm(!)f Fq(\()p Fs(Y)20
b Fm(^)f Fs(Z)s Fq(\))r(\))r(\))r(\))157 4735 y(=)26
b(\()r(\()r(\()r(\()s Fs(Z)18 b Fm(_)f Fs(U)5 b Fq(\))16
b Fm(^)i Fq(\()p Fs(Y)27 b Fm($)e Fq(\()s Fs(Z)h Fm(!)e
Fq(\()p Fs(Y)c Fm(^)f Fs(Z)s Fq(\))r(\))r(\))f Fm(_)h
Fs(Z)s Fq(\))25 b Fm($)f Fq(\()r(\()r(\()s Fs(Z)19 b
Fm(_)e Fs(U)5 b Fq(\))16 b Fm(_)i(:)r Fq(\()p Fs(Y)27
b Fm($)e Fq(\()s Fs(Z)h Fm(!)e Fq(\()p Fs(Y)c Fm(^)f
Fs(Z)s Fq(\))r(\))r(\))25 b Fm($)f Fq(\()p Fs(Y)j Fm($)e
Fq(\()s Fs(Z)h Fm(!)f Fq(\()p Fs(Y)20 b Fm(^)f Fs(Z)s
Fq(\))r(\))r(\))r(\))p 0 TeXcolorgray -128 5068 a Fw(\(ii\))p
0 TeXcolorgray 1046 5246 a Fu(b)r Fm(S)8 b Fq(\()p Fs(Y)t
Fq(\))26 b(=)e Fg(J)q Fm(S)8 b Fq(\()p Fs(Y)t Fq(\))q
Fg(K)1655 5211 y Fp(b)1719 5246 y Fq(=)24 b Fg(J)q Fq(\()r(\()p
Fs(Y)j Fm($)e Fq(\()s Fs(Z)h Fm(!)f Fq(\()p Fs(Y)20 b
Fm(^)f Fs(Z)s Fq(\))r(\))r(\))q Fg(K)2725 5211 y Fp(b)2787
5246 y Fq(=)24 b Fw(1)1038 5388 y Fu(b)r Fm(S)8 b Fq(\()s
Fs(X)t Fq(\))26 b(=)e Fg(J)q Fm(S)8 b Fq(\()s Fs(X)t
Fq(\))q Fg(K)1663 5354 y Fp(b)1727 5388 y Fq(=)24 b Fg(J)q
Fq(\()s Fs(Z)c Fm(_)d Fs(U)5 b Fq(\))q Fg(K)2180 5354
y Fp(b)2241 5388 y Fq(=)24 b Fw(1)1036 5512 y Fu(b)r
Fm(S)8 b Fq(\()q Fs(U)d Fq(\))24 b(=)j Fu(b)r Fq(\()q
Fs(U)5 b Fq(\))23 b(=)i Fw(1)p 0 TeXcolorgray 117 5690
a Fc(\017)p 0 TeXcolorgray 44 w Fu(b)r Fm(S)k Fw(ist)21
b(passend)f(f)11 b(\250)-39 b(ur)25 b Fu(j)q Fw(,)c(da)g
Fm(f)s Fs(X)s Fw(,)13 b Fs(Y)s Fw(,)j Fs(Z)s Fm(g)26
b Fq(=)e Fb(va)n(r)q Fq(\()6 b Fu(j)r Fq(\))25 b Fm(\022)f
Fb(Dom)q Fq(\()t Fu(b)r Fm(S)8 b Fq(\))25 b(=)g Fm(f)s
Fs(X)s Fw(,)13 b Fs(Y)s Fw(,)h Fs(U)t Fw(,)i Fs(Z)s Fm(g)203
5789 y Fu(b)22 b Fw(ist)f(passend)f(f)11 b(\250)-39 b(ur)26
b Fu(j)r Fm(S)7 b Fw(,)21 b(da)g Fm(f)p Fs(Y)s Fw(,)14
b Fs(U)t Fw(,)i Fs(Z)s Fm(g)25 b Fq(=)f Fb(va)n(r)q Fq(\()6
b Fu(j)r Fm(S)i Fq(\))25 b Fm(\022)g Fb(Dom)p Fq(\()t
Fu(b)r Fq(\))g(=)g Fm(f)p Fs(Y)s Fw(,)14 b Fs(U)t Fw(,)i
Fs(Z)s Fm(g)p 0 TeXcolorgray 117 5920 a Fc(\017)p 0 TeXcolorgray
41 w Fw(Da)i Fg(J)5 b Fu(j)q Fg(K)448 5890 y Fp(b)r Fl(S)558
5920 y Fq(=)25 b Fw(1)18 b(gilt:)k Fu(b)r Fm(S)31 b Fa(\017)d
Fu(j)20 b Fw(und)f Fg(J)5 b Fu(j)r Fm(S)i Fg(K)1506 5890
y Fp(b)1570 5920 y Fq(=)24 b Fw(1)19 b(gilt)g(auch:)i
Fu(b)j Fa(\017)k Fu(j)r Fm(S)7 b Fw(.)20 b(Somit)f(wur)o(de)i
Fu(b)r Fm(S)31 b Fa(\017)d Fu(j)d Fm(,)i Fu(b)d Fa(\017)k
Fu(j)r Fm(S)f Fw(veri\002ziert.)p 0 TeXcolorgray 1860
6192 a(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -175 -45 a Fv(Aufgabe)24 b(3)p 0 TeXcolorgray
-104 113 a Fw(\(i\))p 0 TeXcolorgray 46 w Fu(j)72 129
y Fo(1)132 113 y Fm(\021)h Fu(y)277 129 y Fo(1)1188 296
y Fu(j)1238 312 y Fo(1)1298 296 y Fm(\021)h Fs(X)i Fm(!)c
Fq(\()p Fs(Y)c Fm(^)f Fs(Z)s Fq(\))25 b Fm(\021)h(:)s
Fs(X)20 b Fm(_)d Fq(\()p Fs(Y)k Fm(^)d Fs(Z)s Fq(\))1893
421 y Fm(\021)26 b Fq(\()r Fm(:)s Fs(X)19 b Fm(_)d Fs(Y)t
Fq(\))i Fm(^)g Fq(\()r Fm(:)s Fs(X)i Fm(_)e Fs(Z)s Fq(\))1893
545 y Fm(\021)26 b Fq(\()s Fs(X)g Fm(!)d Fs(Y)t Fq(\))18
b Fm(^)g Fq(\()s Fs(X)27 b Fm(!)e Fs(Z)s Fq(\))1893 670
y Fm(\021)h Fu(y)2039 685 y Fo(1)p 0 TeXcolorgray -128
1010 a Fw(\(ii\))p 0 TeXcolorgray 46 w Fu(j)72 1025 y
Fo(2)132 1010 y Fm(\021)f Fu(y)277 1025 y Fo(2)1042 1193
y Fu(j)1092 1208 y Fo(2)1152 1193 y Fm(\021)g Fq(\()s
Fs(X)20 b Fm(^)c Fs(Y)k Fm(^)f Fs(Z)s Fq(\))25 b Fm(!)h
Fs(Q)e Fm(\021)i(:)r Fq(\()s Fs(X)19 b Fm(^)d Fs(Y)21
b Fm(^)d Fs(Z)s Fq(\))h Fm(_)g Fs(Q)1906 1317 y Fm(\021)26
b(:)s Fs(X)20 b Fm(_)e(:)p Fs(Y)i Fm(_)d(:)s Fs(Z)j Fm(_)f
Fs(Q)1906 1442 y Fm(\021)26 b Fq(\()r Fm(:)s Fs(X)19
b Fm(_)f Fq(\()r Fm(:)p Fs(Y)i Fm(_)e Fq(\()r Fm(:)s
Fs(Z)h Fm(_)g Fs(Q)r Fq(\))r(\))r(\))1906 1566 y Fm(\021)26
b Fq(\()s Fs(X)h Fm(!)d Fq(\()p Fs(Y)j Fm(!)e Fq(\()s
Fs(Z)h Fm(!)g Fs(Q)r Fq(\))r(\))r(\))1906 1691 y Fm(\021)g
Fu(y)2052 1706 y Fo(2)p 0 TeXcolorgray -152 1907 a Fw(\(iii\))p
0 TeXcolorgray 46 w Fu(j)72 1922 y Fo(3)132 1907 y Fm(\021)f
Fu(y)277 1922 y Fo(3)780 2089 y Fu(j)830 2104 y Fo(3)890
2089 y Fm(\021)g Fq(\()s Fs(X)20 b Fm(^)c Fs(Y)t Fq(\))25
b Fm(!)g(:)r Fq(\()s Fs(Z)h Fm(!)f Fs(X)t Fq(\))g Fm(\021)g(:)r
Fq(\()s Fs(X)20 b Fm(^)c Fs(Y)t Fq(\))i Fm(_)g(:)r Fq(\()r
Fm(:)s Fs(Z)g Fm(_)h Fs(X)t Fq(\))1816 2214 y Fm(\021)25
b Fq(\()r Fm(:)s Fs(X)20 b Fm(_)e(:)p Fs(Y)t Fq(\))f
Fm(_)h Fq(\()s Fs(Z)i Fm(^)d(:)s Fs(X)t Fq(\))1816 2338
y Fm(\021)25 b Fq(\()r Fm(:)s Fs(X)20 b Fm(_)e(:)p Fs(Y)i
Fm(_)f Fs(Z)s Fq(\))f Fm(^)g Fq(\()r Fm(:)s Fs(X)h Fm(_)f(:)p
Fs(Y)i Fm(_)e(:)s Fs(X)t Fq(\))1816 2463 y Fm(\021)25
b Fq(\()r Fm(:)s Fs(X)20 b Fm(_)e(:)p Fs(Y)i Fm(_)f Fs(Z)s
Fq(\))f Fm(^)g Fq(\()r Fm(:)s Fs(X)h Fm(_)f(:)p Fs(Y)t
Fq(\))1816 2588 y Fm(\021)25 b Fq(\()r Fm(:)s Fs(X)20
b Fm(_)e(:)p Fs(Y)t Fq(\))1816 2712 y Fm(\021)25 b Fq(\()r
Fm(:)s Fs(X)20 b Fm(_)e(:)p Fs(Y)t Fq(\))f Fm(^)h(>)1816
2837 y(\021)25 b Fq(\()r Fm(:)s Fs(X)20 b Fm(_)e(:)p
Fs(Y)t Fq(\))f Fm(^)h Fq(\()r Fm(:)s Fs(X)i Fm(_)f Fs(X)t
Fq(\))1816 2961 y Fm(\021)25 b Fq(\()r Fm(:)s Fs(X)20
b Fm(_)e(:)p Fs(Y)t Fq(\))f Fm(^)h Fq(\()p Fs(Y)i Fm(_)e(:)s
Fs(X)i Fm(_)f Fs(X)t Fq(\))1816 3086 y Fm(\021)25 b Fq(\()r
Fm(:)s Fs(X)20 b Fm(_)e(:)p Fs(Y)t Fq(\))f Fm(^)h Fq(\()p
Fs(Y)i Fm(_)f Fs(X)t Fq(\))f Fm(_)g(:)s Fs(X)1816 3210
y Fm(\021)25 b Fq(\()s Fs(X)i Fm(!)e(:)p Fs(Y)t Fq(\))18
b Fm(^)f Fq(\()r Fm(:)p Fs(Y)27 b Fm(!)f Fs(X)t Fq(\))17
b Fm(_)h(:)s Fs(X)1816 3335 y Fm(\021)25 b Fu(y)1961
3350 y Fo(3)p 0 TeXcolorgray -151 3551 a Fw(\(iv\))p
0 TeXcolorgray 46 w Fu(j)72 3566 y Fo(4)132 3551 y Fm(\021)g
Fu(y)277 3566 y Fo(4)856 3733 y Fu(j)906 3749 y Fo(4)966
3733 y Fm(\021)g Fq(\()p Fs(Y)i Fm(!)f Fs(Z)s Fq(\))f
Fm(!)g Fq(\()p Fs(Y)i Fm(!)e Fs(X)t Fq(\))g Fm(\021)h(:)r
Fq(\()p Fs(Y)g Fm(!)g Fs(Z)s Fq(\))18 b Fm(_)g Fq(\()p
Fs(Y)27 b Fm(!)f Fs(X)t Fq(\))1867 3858 y Fm(\021)g(:)r
Fq(\()r Fm(:)p Fs(Y)19 b Fm(_)g Fs(Z)s Fq(\))f Fm(_)g
Fq(\()r Fm(:)p Fs(Y)i Fm(_)f Fs(X)t Fq(\))1867 3982 y
Fm(\021)26 b Fq(\()p Fs(Y)20 b Fm(^)d(:)s Fs(Z)s Fq(\))h
Fm(_)g Fq(\()r Fm(:)p Fs(Y)i Fm(_)f Fs(X)t Fq(\))1867
4107 y Fm(\021)26 b Fq(\()p Fs(Y)20 b Fm(_)d(:)p Fs(Y)k
Fm(_)d Fs(X)t Fq(\))g Fm(^)g Fq(\()r Fm(:)s Fs(Z)h Fm(_)f(:)p
Fs(Y)i Fm(_)f Fs(X)t Fq(\))1867 4231 y Fm(\021)26 b Fq(\()s
Fs(T)19 b Fm(_)g Fs(X)t Fq(\))f Fm(^)g Fq(\()r Fm(:)s
Fs(Z)h Fm(_)f(:)p Fs(Y)i Fm(_)e Fs(X)t Fq(\))1867 4356
y Fm(\021)27 b Fs(T)20 b Fm(^)d Fq(\()r Fm(:)s Fs(Z)i
Fm(_)f(:)p Fs(Y)i Fm(_)f Fs(X)t Fq(\))1867 4480 y Fm(\021)26
b(:)s Fs(Z)19 b Fm(_)f(:)p Fs(Y)i Fm(_)f Fs(X)1867 4605
y Fm(\021)26 b Fu(y)2013 4620 y Fo(4)p 0 TeXcolorgray
-126 4821 a Fw(\(v\))p 0 TeXcolorgray 45 w Fu(j)72 4836
y Fo(5)132 4821 y Fm(\021)f Fu(y)277 4836 y Fo(5)978
5003 y Fu(j)1028 5018 y Fo(5)1088 5003 y Fm(\021)h Fq(\()s
Fs(X)19 b Fm(^)f(:)p Fs(Y)t Fq(\))g Fm(_)g Fq(\()p Fs(Y)i
Fm(^)e(:)s Fs(X)t Fq(\))24 b Fm(\021)h(:)r Fq(\()r Fm(:)s
Fs(X)20 b Fm(_)c Fs(Y)t Fq(\))i Fm(_)f(:)r Fq(\()r Fm(:)p
Fs(Y)j Fm(_)f Fs(X)t Fq(\))1986 5128 y Fm(\021)25 b(:)r
Fq(\()s Fs(X)i Fm(!)c Fs(Y)t Fq(\))18 b Fm(_)f(:)r Fq(\()p
Fs(Y)27 b Fm(!)f Fs(X)t Fq(\))1986 5253 y Fm(\021)f(:)r
Fq(\()r(\()s Fs(X)i Fm(!)22 b Fs(Y)t Fq(\))c Fm(^)g Fq(\()p
Fs(Y)27 b Fm(!)f Fs(X)t Fq(\))r(\))1986 5377 y Fm(\021)f(:)r
Fq(\()s Fs(X)i Fm($)c Fs(Y)t Fq(\))1986 5502 y Fm(\021)i
Fu(y)2131 5517 y Fo(5)p 0 TeXcolorgray 1860 6192 a Fw(2)p
0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -175 -45 a Fv(Aufgabe)24 b(4)-175 113 y
Fw(Aus)d(der)f(VL)g(wissen)i(wir)-6 b(,)20 b(dass)h(zu)f(jeder)g
(aussagenlogischen)i(Formel)f(eine)28 b(\250)-35 b(aquivalente)21
b(KNF)g(existiert.)-175 213 y(Folglich)h(gilt:)1491 381
y Fu(j)j Fm(\021)g Fs(k)r(n)13 b(f)1785 393 y Fp(j)1852
381 y Fq(=)1978 284 y Fn(n)1953 308 y Fi(^)1944 479 y
Fn(i)r Ff(=)q Fo(1)2089 284 y Fn(m)2072 308 y Fi(_)2063
479 y Fn(j)r Ff(=)q Fo(1)2183 381 y Fs(L)2231 397 y Fn(i)t(j)-175
623 y Fw(Aus)25 b Fu(j)g Fm(\021)h(>)21 b Fw(kann)f(man)g(folgern,)g
(dass)g(alle)f(Disjunktionsterme)k(von)e Fs(k)r(n)13
b(f)2269 635 y Fp(j)2332 623 y Fw(wahr)20 b(sein)g(m)11
b(\250)-39 b(ussen.)21 b(Des)f(W)-8 b(eiter)o(en)19 b(gilt,)i(dass)f
Fu(c)-175 723 y Fw(die)h(folgende)27 b(\250)-35 b(aquivalente)21
b(Form)g(besitzt,)f(wenn)j Fu(c)e Fw(keine)g(T)-8 b(autologie)22
b(ist:)1501 905 y Fu(c)j Fm(\021)g Fs(t)1701 921 y Fp(j)q
Fo(1)1792 905 y Fm(_)17 b Fw(...)f Fm(_)i Fs(t)2055 922
y Fp(j)r Fn(i)2133 905 y Fm(_)g Fu(g)-175 1088 y Fw(wobei)k
Fu(g)j Fm(2)k Fs(A)t(L)q Fw(,)36 b Fs(t)435 1104 y Fp(j)r
Fn(i)517 1088 y Fw(ist)21 b(ein)g(Disjunktionsterm)i(mit)f(i)g
Fm(2)i Fq([)q Fw(1,)15 b Fs(u)r Fq(])22 b Fw(und)e(1)i
Fm(\024)g Fw(u)g Fm(\024)g Fw(n)f(von)h Fs(k)r(n)13 b(f)2731
1100 y Fp(j)2794 1088 y Fw(und)22 b Fs(v)s(a)q(r)s Fq(\()r
Fu(g)r Fq(\))38 b Fm(\\)h Fs(v)s(a)q(r)s Fq(\()6 b Fu(j)r
Fq(\))25 b(=)g Fr(\306)-175 1287 y Fw(W)11 b(\250)-39
b(ur)o(de)27 b(dies)h(nicht)g(gelten,)g(so)g(g)7 b(\250)-35
b(abe)28 b(es)f(eine)h(passende)g(Belegung)j Fu(b)q Fw(,)c(sodass)h
Fg(J)q Fu(c)q Fg(K)2595 1257 y Fp(b)2672 1287 y Fm(\021)39
b(?)q Fw(,)27 b(obwohl)35 b Fu(j)j Fm(\021)g(>)q Fw(.)28
b(Das)g(st)11 b(\250)-39 b(unde)-175 1387 y(im)26 b(W)-5
b(iderspr)o(uch)27 b(zur)e(Aussage,)g(dass)30 b Fu(j)35
b Fm(\))f Fu(c)26 b Fw(gilt.)g(Ist)h Fu(c)g Fw(eine)f(T)-8
b(autologie)27 b(gilt:)g Fs(t)2591 1399 y Fp(j)2666 1387
y Fq(=)34 b Fm(>)28 b Fw(Aus)d(der)g(Str)o(uktur)h(von)h
Fu(c)g Fw(folgt)-175 1486 y(ebenfalls,)20 b(dass)i Fs(t)411
1498 y Fp(j)473 1486 y Fw(folgende)f(Bedingungen)g(erf)11
b(\250)-39 b(ullt:)1050 1669 y Fu(j)25 b Fm(\))g Fs(t)1269
1681 y Fp(j)1328 1669 y Fm(^)18 b Fs(t)1437 1681 y Fp(j)1502
1669 y Fm(\))25 b Fu(c)18 b Fm(^)g Fs(v)s(a)q(r)s Fq(\()r
Fs(t)1945 1681 y Fp(j)1988 1669 y Fq(\))24 b Fm(\022)i
Fs(v)s(a)q(r)s Fq(\()6 b Fu(j)r Fq(\))17 b Fm(\\)h Fs(v)s(a)q(r)s
Fq(\()r Fu(c)r Fq(\))-175 1852 y Fw(Daraus)i(folgt,)h(dass)g(f)11
b(\250)-39 b(ur)20 b(alle)g(Formeln)27 b Fu(j)q Fw(,)21
b Fu(c)26 b Fm(2)21 b Fw(AL)f(gilt)h(mit)27 b Fu(j)e
Fm(\))f Fu(c)i Fm(\021)f(>)q Fw(:)901 2051 y Fm(9)r Fu(y)g
Fm(2)k Fs(A)t(L)q Fw(.)5 b Fu(j)26 b Fm(\))e Fu(y)18
b Fm(^)g Fu(y)25 b Fm(\))g Fu(c)18 b Fm(^)g Fs(v)s(a)q(r)s
Fq(\()r Fu(y)r Fq(\))25 b Fm(\022)g Fs(v)s(a)q(r)s Fq(\()6
b Fu(j)r Fq(\))18 b Fm(\\)f Fs(v)s(a)q(r)s Fq(\()r Fu(c)r
Fq(\))p 0 TeXcolorgray 1860 6192 a Fw(3)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
